
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProductoXVenta` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductoXVenta
 * 
 */
export type ProductoXVentaModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductoXVentaPayload>

export type AggregateProductoXVenta = {
  _count: ProductoXVentaCountAggregateOutputType | null
  _avg: ProductoXVentaAvgAggregateOutputType | null
  _sum: ProductoXVentaSumAggregateOutputType | null
  _min: ProductoXVentaMinAggregateOutputType | null
  _max: ProductoXVentaMaxAggregateOutputType | null
}

export type ProductoXVentaAvgAggregateOutputType = {
  id: number | null
  productoId: number | null
  ventaId: number | null
  cantidad: number | null
}

export type ProductoXVentaSumAggregateOutputType = {
  id: number | null
  productoId: number | null
  ventaId: number | null
  cantidad: number | null
}

export type ProductoXVentaMinAggregateOutputType = {
  id: number | null
  productoId: number | null
  ventaId: number | null
  cantidad: number | null
}

export type ProductoXVentaMaxAggregateOutputType = {
  id: number | null
  productoId: number | null
  ventaId: number | null
  cantidad: number | null
}

export type ProductoXVentaCountAggregateOutputType = {
  id: number
  productoId: number
  ventaId: number
  cantidad: number
  _all: number
}


export type ProductoXVentaAvgAggregateInputType = {
  id?: true
  productoId?: true
  ventaId?: true
  cantidad?: true
}

export type ProductoXVentaSumAggregateInputType = {
  id?: true
  productoId?: true
  ventaId?: true
  cantidad?: true
}

export type ProductoXVentaMinAggregateInputType = {
  id?: true
  productoId?: true
  ventaId?: true
  cantidad?: true
}

export type ProductoXVentaMaxAggregateInputType = {
  id?: true
  productoId?: true
  ventaId?: true
  cantidad?: true
}

export type ProductoXVentaCountAggregateInputType = {
  id?: true
  productoId?: true
  ventaId?: true
  cantidad?: true
  _all?: true
}

export type ProductoXVentaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductoXVenta to aggregate.
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXVentas to fetch.
   */
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXVentas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXVentas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductoXVentas
  **/
  _count?: true | ProductoXVentaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductoXVentaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductoXVentaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductoXVentaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductoXVentaMaxAggregateInputType
}

export type GetProductoXVentaAggregateType<T extends ProductoXVentaAggregateArgs> = {
      [P in keyof T & keyof AggregateProductoXVenta]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductoXVenta[P]>
    : Prisma.GetScalarType<T[P], AggregateProductoXVenta[P]>
}




export type ProductoXVentaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXVentaWhereInput
  orderBy?: Prisma.ProductoXVentaOrderByWithAggregationInput | Prisma.ProductoXVentaOrderByWithAggregationInput[]
  by: Prisma.ProductoXVentaScalarFieldEnum[] | Prisma.ProductoXVentaScalarFieldEnum
  having?: Prisma.ProductoXVentaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductoXVentaCountAggregateInputType | true
  _avg?: ProductoXVentaAvgAggregateInputType
  _sum?: ProductoXVentaSumAggregateInputType
  _min?: ProductoXVentaMinAggregateInputType
  _max?: ProductoXVentaMaxAggregateInputType
}

export type ProductoXVentaGroupByOutputType = {
  id: number
  productoId: number
  ventaId: number
  cantidad: number
  _count: ProductoXVentaCountAggregateOutputType | null
  _avg: ProductoXVentaAvgAggregateOutputType | null
  _sum: ProductoXVentaSumAggregateOutputType | null
  _min: ProductoXVentaMinAggregateOutputType | null
  _max: ProductoXVentaMaxAggregateOutputType | null
}

type GetProductoXVentaGroupByPayload<T extends ProductoXVentaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductoXVentaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductoXVentaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductoXVentaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductoXVentaGroupByOutputType[P]>
      }
    >
  > 



export type ProductoXVentaWhereInput = {
  AND?: Prisma.ProductoXVentaWhereInput | Prisma.ProductoXVentaWhereInput[]
  OR?: Prisma.ProductoXVentaWhereInput[]
  NOT?: Prisma.ProductoXVentaWhereInput | Prisma.ProductoXVentaWhereInput[]
  id?: Prisma.IntFilter<"ProductoXVenta"> | number
  productoId?: Prisma.IntFilter<"ProductoXVenta"> | number
  ventaId?: Prisma.IntFilter<"ProductoXVenta"> | number
  cantidad?: Prisma.IntFilter<"ProductoXVenta"> | number
  producto?: Prisma.XOR<Prisma.ProductoScalarRelationFilter, Prisma.ProductoWhereInput>
  venta?: Prisma.XOR<Prisma.VentaScalarRelationFilter, Prisma.VentaWhereInput>
}

export type ProductoXVentaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
  producto?: Prisma.ProductoOrderByWithRelationInput
  venta?: Prisma.VentaOrderByWithRelationInput
}

export type ProductoXVentaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ProductoXVentaWhereInput | Prisma.ProductoXVentaWhereInput[]
  OR?: Prisma.ProductoXVentaWhereInput[]
  NOT?: Prisma.ProductoXVentaWhereInput | Prisma.ProductoXVentaWhereInput[]
  productoId?: Prisma.IntFilter<"ProductoXVenta"> | number
  ventaId?: Prisma.IntFilter<"ProductoXVenta"> | number
  cantidad?: Prisma.IntFilter<"ProductoXVenta"> | number
  producto?: Prisma.XOR<Prisma.ProductoScalarRelationFilter, Prisma.ProductoWhereInput>
  venta?: Prisma.XOR<Prisma.VentaScalarRelationFilter, Prisma.VentaWhereInput>
}, "id">

export type ProductoXVentaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
  _count?: Prisma.ProductoXVentaCountOrderByAggregateInput
  _avg?: Prisma.ProductoXVentaAvgOrderByAggregateInput
  _max?: Prisma.ProductoXVentaMaxOrderByAggregateInput
  _min?: Prisma.ProductoXVentaMinOrderByAggregateInput
  _sum?: Prisma.ProductoXVentaSumOrderByAggregateInput
}

export type ProductoXVentaScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductoXVentaScalarWhereWithAggregatesInput | Prisma.ProductoXVentaScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductoXVentaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductoXVentaScalarWhereWithAggregatesInput | Prisma.ProductoXVentaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProductoXVenta"> | number
  productoId?: Prisma.IntWithAggregatesFilter<"ProductoXVenta"> | number
  ventaId?: Prisma.IntWithAggregatesFilter<"ProductoXVenta"> | number
  cantidad?: Prisma.IntWithAggregatesFilter<"ProductoXVenta"> | number
}

export type ProductoXVentaCreateInput = {
  cantidad: number
  producto: Prisma.ProductoCreateNestedOneWithoutProductosXVentaInput
  venta: Prisma.VentaCreateNestedOneWithoutProductosXVentaInput
}

export type ProductoXVentaUncheckedCreateInput = {
  id?: number
  productoId: number
  ventaId: number
  cantidad: number
}

export type ProductoXVentaUpdateInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  producto?: Prisma.ProductoUpdateOneRequiredWithoutProductosXVentaNestedInput
  venta?: Prisma.VentaUpdateOneRequiredWithoutProductosXVentaNestedInput
}

export type ProductoXVentaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  ventaId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaCreateManyInput = {
  id?: number
  productoId: number
  ventaId: number
  cantidad: number
}

export type ProductoXVentaUpdateManyMutationInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  ventaId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaListRelationFilter = {
  every?: Prisma.ProductoXVentaWhereInput
  some?: Prisma.ProductoXVentaWhereInput
  none?: Prisma.ProductoXVentaWhereInput
}

export type ProductoXVentaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductoXVentaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXVentaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXVentaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXVentaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXVentaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXVentaCreateNestedManyWithoutProductoInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput> | Prisma.ProductoXVentaCreateWithoutProductoInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput | Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput[]
  createMany?: Prisma.ProductoXVentaCreateManyProductoInputEnvelope
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
}

export type ProductoXVentaUncheckedCreateNestedManyWithoutProductoInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput> | Prisma.ProductoXVentaCreateWithoutProductoInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput | Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput[]
  createMany?: Prisma.ProductoXVentaCreateManyProductoInputEnvelope
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
}

export type ProductoXVentaUpdateManyWithoutProductoNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput> | Prisma.ProductoXVentaCreateWithoutProductoInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput | Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput[]
  upsert?: Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutProductoInput | Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutProductoInput[]
  createMany?: Prisma.ProductoXVentaCreateManyProductoInputEnvelope
  set?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  disconnect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  delete?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  update?: Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutProductoInput | Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutProductoInput[]
  updateMany?: Prisma.ProductoXVentaUpdateManyWithWhereWithoutProductoInput | Prisma.ProductoXVentaUpdateManyWithWhereWithoutProductoInput[]
  deleteMany?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
}

export type ProductoXVentaUncheckedUpdateManyWithoutProductoNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput> | Prisma.ProductoXVentaCreateWithoutProductoInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput | Prisma.ProductoXVentaCreateOrConnectWithoutProductoInput[]
  upsert?: Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutProductoInput | Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutProductoInput[]
  createMany?: Prisma.ProductoXVentaCreateManyProductoInputEnvelope
  set?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  disconnect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  delete?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  update?: Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutProductoInput | Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutProductoInput[]
  updateMany?: Prisma.ProductoXVentaUpdateManyWithWhereWithoutProductoInput | Prisma.ProductoXVentaUpdateManyWithWhereWithoutProductoInput[]
  deleteMany?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
}

export type ProductoXVentaCreateNestedManyWithoutVentaInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput> | Prisma.ProductoXVentaCreateWithoutVentaInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput | Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput[]
  createMany?: Prisma.ProductoXVentaCreateManyVentaInputEnvelope
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
}

export type ProductoXVentaUncheckedCreateNestedManyWithoutVentaInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput> | Prisma.ProductoXVentaCreateWithoutVentaInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput | Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput[]
  createMany?: Prisma.ProductoXVentaCreateManyVentaInputEnvelope
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
}

export type ProductoXVentaUpdateManyWithoutVentaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput> | Prisma.ProductoXVentaCreateWithoutVentaInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput | Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput[]
  upsert?: Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutVentaInput | Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutVentaInput[]
  createMany?: Prisma.ProductoXVentaCreateManyVentaInputEnvelope
  set?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  disconnect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  delete?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  update?: Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutVentaInput | Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutVentaInput[]
  updateMany?: Prisma.ProductoXVentaUpdateManyWithWhereWithoutVentaInput | Prisma.ProductoXVentaUpdateManyWithWhereWithoutVentaInput[]
  deleteMany?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
}

export type ProductoXVentaUncheckedUpdateManyWithoutVentaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput> | Prisma.ProductoXVentaCreateWithoutVentaInput[] | Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput[]
  connectOrCreate?: Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput | Prisma.ProductoXVentaCreateOrConnectWithoutVentaInput[]
  upsert?: Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutVentaInput | Prisma.ProductoXVentaUpsertWithWhereUniqueWithoutVentaInput[]
  createMany?: Prisma.ProductoXVentaCreateManyVentaInputEnvelope
  set?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  disconnect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  delete?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  connect?: Prisma.ProductoXVentaWhereUniqueInput | Prisma.ProductoXVentaWhereUniqueInput[]
  update?: Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutVentaInput | Prisma.ProductoXVentaUpdateWithWhereUniqueWithoutVentaInput[]
  updateMany?: Prisma.ProductoXVentaUpdateManyWithWhereWithoutVentaInput | Prisma.ProductoXVentaUpdateManyWithWhereWithoutVentaInput[]
  deleteMany?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
}

export type ProductoXVentaCreateWithoutProductoInput = {
  cantidad: number
  venta: Prisma.VentaCreateNestedOneWithoutProductosXVentaInput
}

export type ProductoXVentaUncheckedCreateWithoutProductoInput = {
  id?: number
  ventaId: number
  cantidad: number
}

export type ProductoXVentaCreateOrConnectWithoutProductoInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput>
}

export type ProductoXVentaCreateManyProductoInputEnvelope = {
  data: Prisma.ProductoXVentaCreateManyProductoInput | Prisma.ProductoXVentaCreateManyProductoInput[]
}

export type ProductoXVentaUpsertWithWhereUniqueWithoutProductoInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoXVentaUpdateWithoutProductoInput, Prisma.ProductoXVentaUncheckedUpdateWithoutProductoInput>
  create: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutProductoInput, Prisma.ProductoXVentaUncheckedCreateWithoutProductoInput>
}

export type ProductoXVentaUpdateWithWhereUniqueWithoutProductoInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateWithoutProductoInput, Prisma.ProductoXVentaUncheckedUpdateWithoutProductoInput>
}

export type ProductoXVentaUpdateManyWithWhereWithoutProductoInput = {
  where: Prisma.ProductoXVentaScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateManyMutationInput, Prisma.ProductoXVentaUncheckedUpdateManyWithoutProductoInput>
}

export type ProductoXVentaScalarWhereInput = {
  AND?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
  OR?: Prisma.ProductoXVentaScalarWhereInput[]
  NOT?: Prisma.ProductoXVentaScalarWhereInput | Prisma.ProductoXVentaScalarWhereInput[]
  id?: Prisma.IntFilter<"ProductoXVenta"> | number
  productoId?: Prisma.IntFilter<"ProductoXVenta"> | number
  ventaId?: Prisma.IntFilter<"ProductoXVenta"> | number
  cantidad?: Prisma.IntFilter<"ProductoXVenta"> | number
}

export type ProductoXVentaCreateWithoutVentaInput = {
  cantidad: number
  producto: Prisma.ProductoCreateNestedOneWithoutProductosXVentaInput
}

export type ProductoXVentaUncheckedCreateWithoutVentaInput = {
  id?: number
  productoId: number
  cantidad: number
}

export type ProductoXVentaCreateOrConnectWithoutVentaInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput>
}

export type ProductoXVentaCreateManyVentaInputEnvelope = {
  data: Prisma.ProductoXVentaCreateManyVentaInput | Prisma.ProductoXVentaCreateManyVentaInput[]
}

export type ProductoXVentaUpsertWithWhereUniqueWithoutVentaInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoXVentaUpdateWithoutVentaInput, Prisma.ProductoXVentaUncheckedUpdateWithoutVentaInput>
  create: Prisma.XOR<Prisma.ProductoXVentaCreateWithoutVentaInput, Prisma.ProductoXVentaUncheckedCreateWithoutVentaInput>
}

export type ProductoXVentaUpdateWithWhereUniqueWithoutVentaInput = {
  where: Prisma.ProductoXVentaWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateWithoutVentaInput, Prisma.ProductoXVentaUncheckedUpdateWithoutVentaInput>
}

export type ProductoXVentaUpdateManyWithWhereWithoutVentaInput = {
  where: Prisma.ProductoXVentaScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateManyMutationInput, Prisma.ProductoXVentaUncheckedUpdateManyWithoutVentaInput>
}

export type ProductoXVentaCreateManyProductoInput = {
  id?: number
  ventaId: number
  cantidad: number
}

export type ProductoXVentaUpdateWithoutProductoInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  venta?: Prisma.VentaUpdateOneRequiredWithoutProductosXVentaNestedInput
}

export type ProductoXVentaUncheckedUpdateWithoutProductoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  ventaId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaUncheckedUpdateManyWithoutProductoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  ventaId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaCreateManyVentaInput = {
  id?: number
  productoId: number
  cantidad: number
}

export type ProductoXVentaUpdateWithoutVentaInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  producto?: Prisma.ProductoUpdateOneRequiredWithoutProductosXVentaNestedInput
}

export type ProductoXVentaUncheckedUpdateWithoutVentaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXVentaUncheckedUpdateManyWithoutVentaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}



export type ProductoXVentaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  ventaId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXVenta"]>

export type ProductoXVentaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  ventaId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXVenta"]>

export type ProductoXVentaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  ventaId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXVenta"]>

export type ProductoXVentaSelectScalar = {
  id?: boolean
  productoId?: boolean
  ventaId?: boolean
  cantidad?: boolean
}

export type ProductoXVentaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productoId" | "ventaId" | "cantidad", ExtArgs["result"]["productoXVenta"]>
export type ProductoXVentaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}
export type ProductoXVentaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}
export type ProductoXVentaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  venta?: boolean | Prisma.VentaDefaultArgs<ExtArgs>
}

export type $ProductoXVentaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductoXVenta"
  objects: {
    producto: Prisma.$ProductoPayload<ExtArgs>
    venta: Prisma.$VentaPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    productoId: number
    ventaId: number
    cantidad: number
  }, ExtArgs["result"]["productoXVenta"]>
  composites: {}
}

export type ProductoXVentaGetPayload<S extends boolean | null | undefined | ProductoXVentaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload, S>

export type ProductoXVentaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductoXVentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductoXVentaCountAggregateInputType | true
  }

export interface ProductoXVentaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductoXVenta'], meta: { name: 'ProductoXVenta' } }
  /**
   * Find zero or one ProductoXVenta that matches the filter.
   * @param {ProductoXVentaFindUniqueArgs} args - Arguments to find a ProductoXVenta
   * @example
   * // Get one ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductoXVentaFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductoXVentaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductoXVenta that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductoXVentaFindUniqueOrThrowArgs} args - Arguments to find a ProductoXVenta
   * @example
   * // Get one ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductoXVentaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductoXVentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductoXVenta that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaFindFirstArgs} args - Arguments to find a ProductoXVenta
   * @example
   * // Get one ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductoXVentaFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductoXVenta that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaFindFirstOrThrowArgs} args - Arguments to find a ProductoXVenta
   * @example
   * // Get one ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductoXVentaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductoXVentas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductoXVentas
   * const productoXVentas = await prisma.productoXVenta.findMany()
   * 
   * // Get first 10 ProductoXVentas
   * const productoXVentas = await prisma.productoXVenta.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productoXVentaWithIdOnly = await prisma.productoXVenta.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductoXVentaFindManyArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductoXVenta.
   * @param {ProductoXVentaCreateArgs} args - Arguments to create a ProductoXVenta.
   * @example
   * // Create one ProductoXVenta
   * const ProductoXVenta = await prisma.productoXVenta.create({
   *   data: {
   *     // ... data to create a ProductoXVenta
   *   }
   * })
   * 
   */
  create<T extends ProductoXVentaCreateArgs>(args: Prisma.SelectSubset<T, ProductoXVentaCreateArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductoXVentas.
   * @param {ProductoXVentaCreateManyArgs} args - Arguments to create many ProductoXVentas.
   * @example
   * // Create many ProductoXVentas
   * const productoXVenta = await prisma.productoXVenta.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductoXVentaCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductoXVentas and returns the data saved in the database.
   * @param {ProductoXVentaCreateManyAndReturnArgs} args - Arguments to create many ProductoXVentas.
   * @example
   * // Create many ProductoXVentas
   * const productoXVenta = await prisma.productoXVenta.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductoXVentas and only return the `id`
   * const productoXVentaWithIdOnly = await prisma.productoXVenta.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductoXVentaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductoXVenta.
   * @param {ProductoXVentaDeleteArgs} args - Arguments to delete one ProductoXVenta.
   * @example
   * // Delete one ProductoXVenta
   * const ProductoXVenta = await prisma.productoXVenta.delete({
   *   where: {
   *     // ... filter to delete one ProductoXVenta
   *   }
   * })
   * 
   */
  delete<T extends ProductoXVentaDeleteArgs>(args: Prisma.SelectSubset<T, ProductoXVentaDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductoXVenta.
   * @param {ProductoXVentaUpdateArgs} args - Arguments to update one ProductoXVenta.
   * @example
   * // Update one ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductoXVentaUpdateArgs>(args: Prisma.SelectSubset<T, ProductoXVentaUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductoXVentas.
   * @param {ProductoXVentaDeleteManyArgs} args - Arguments to filter ProductoXVentas to delete.
   * @example
   * // Delete a few ProductoXVentas
   * const { count } = await prisma.productoXVenta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductoXVentaDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductoXVentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductoXVentas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductoXVentas
   * const productoXVenta = await prisma.productoXVenta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductoXVentaUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductoXVentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductoXVentas and returns the data updated in the database.
   * @param {ProductoXVentaUpdateManyAndReturnArgs} args - Arguments to update many ProductoXVentas.
   * @example
   * // Update many ProductoXVentas
   * const productoXVenta = await prisma.productoXVenta.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductoXVentas and only return the `id`
   * const productoXVentaWithIdOnly = await prisma.productoXVenta.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductoXVentaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductoXVentaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductoXVenta.
   * @param {ProductoXVentaUpsertArgs} args - Arguments to update or create a ProductoXVenta.
   * @example
   * // Update or create a ProductoXVenta
   * const productoXVenta = await prisma.productoXVenta.upsert({
   *   create: {
   *     // ... data to create a ProductoXVenta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductoXVenta we want to update
   *   }
   * })
   */
  upsert<T extends ProductoXVentaUpsertArgs>(args: Prisma.SelectSubset<T, ProductoXVentaUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductoXVentaClient<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductoXVentas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaCountArgs} args - Arguments to filter ProductoXVentas to count.
   * @example
   * // Count the number of ProductoXVentas
   * const count = await prisma.productoXVenta.count({
   *   where: {
   *     // ... the filter for the ProductoXVentas we want to count
   *   }
   * })
  **/
  count<T extends ProductoXVentaCountArgs>(
    args?: Prisma.Subset<T, ProductoXVentaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductoXVentaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductoXVenta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductoXVentaAggregateArgs>(args: Prisma.Subset<T, ProductoXVentaAggregateArgs>): Prisma.PrismaPromise<GetProductoXVentaAggregateType<T>>

  /**
   * Group by ProductoXVenta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXVentaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductoXVentaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductoXVentaGroupByArgs['orderBy'] }
      : { orderBy?: ProductoXVentaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductoXVentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoXVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductoXVenta model
 */
readonly fields: ProductoXVentaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductoXVenta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductoXVentaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  producto<T extends Prisma.ProductoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductoDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  venta<T extends Prisma.VentaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.VentaDefaultArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductoXVenta model
 */
export interface ProductoXVentaFieldRefs {
  readonly id: Prisma.FieldRef<"ProductoXVenta", 'Int'>
  readonly productoId: Prisma.FieldRef<"ProductoXVenta", 'Int'>
  readonly ventaId: Prisma.FieldRef<"ProductoXVenta", 'Int'>
  readonly cantidad: Prisma.FieldRef<"ProductoXVenta", 'Int'>
}
    

// Custom InputTypes
/**
 * ProductoXVenta findUnique
 */
export type ProductoXVentaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXVenta to fetch.
   */
  where: Prisma.ProductoXVentaWhereUniqueInput
}

/**
 * ProductoXVenta findUniqueOrThrow
 */
export type ProductoXVentaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXVenta to fetch.
   */
  where: Prisma.ProductoXVentaWhereUniqueInput
}

/**
 * ProductoXVenta findFirst
 */
export type ProductoXVentaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXVenta to fetch.
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXVentas to fetch.
   */
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductoXVentas.
   */
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXVentas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXVentas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductoXVentas.
   */
  distinct?: Prisma.ProductoXVentaScalarFieldEnum | Prisma.ProductoXVentaScalarFieldEnum[]
}

/**
 * ProductoXVenta findFirstOrThrow
 */
export type ProductoXVentaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXVenta to fetch.
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXVentas to fetch.
   */
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductoXVentas.
   */
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXVentas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXVentas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductoXVentas.
   */
  distinct?: Prisma.ProductoXVentaScalarFieldEnum | Prisma.ProductoXVentaScalarFieldEnum[]
}

/**
 * ProductoXVenta findMany
 */
export type ProductoXVentaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXVentas to fetch.
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXVentas to fetch.
   */
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductoXVentas.
   */
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXVentas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXVentas.
   */
  skip?: number
  distinct?: Prisma.ProductoXVentaScalarFieldEnum | Prisma.ProductoXVentaScalarFieldEnum[]
}

/**
 * ProductoXVenta create
 */
export type ProductoXVentaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductoXVenta.
   */
  data: Prisma.XOR<Prisma.ProductoXVentaCreateInput, Prisma.ProductoXVentaUncheckedCreateInput>
}

/**
 * ProductoXVenta createMany
 */
export type ProductoXVentaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductoXVentas.
   */
  data: Prisma.ProductoXVentaCreateManyInput | Prisma.ProductoXVentaCreateManyInput[]
}

/**
 * ProductoXVenta createManyAndReturn
 */
export type ProductoXVentaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * The data used to create many ProductoXVentas.
   */
  data: Prisma.ProductoXVentaCreateManyInput | Prisma.ProductoXVentaCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductoXVenta update
 */
export type ProductoXVentaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductoXVenta.
   */
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateInput, Prisma.ProductoXVentaUncheckedUpdateInput>
  /**
   * Choose, which ProductoXVenta to update.
   */
  where: Prisma.ProductoXVentaWhereUniqueInput
}

/**
 * ProductoXVenta updateMany
 */
export type ProductoXVentaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductoXVentas.
   */
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateManyMutationInput, Prisma.ProductoXVentaUncheckedUpdateManyInput>
  /**
   * Filter which ProductoXVentas to update
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * Limit how many ProductoXVentas to update.
   */
  limit?: number
}

/**
 * ProductoXVenta updateManyAndReturn
 */
export type ProductoXVentaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * The data used to update ProductoXVentas.
   */
  data: Prisma.XOR<Prisma.ProductoXVentaUpdateManyMutationInput, Prisma.ProductoXVentaUncheckedUpdateManyInput>
  /**
   * Filter which ProductoXVentas to update
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * Limit how many ProductoXVentas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductoXVenta upsert
 */
export type ProductoXVentaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductoXVenta to update in case it exists.
   */
  where: Prisma.ProductoXVentaWhereUniqueInput
  /**
   * In case the ProductoXVenta found by the `where` argument doesn't exist, create a new ProductoXVenta with this data.
   */
  create: Prisma.XOR<Prisma.ProductoXVentaCreateInput, Prisma.ProductoXVentaUncheckedCreateInput>
  /**
   * In case the ProductoXVenta was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductoXVentaUpdateInput, Prisma.ProductoXVentaUncheckedUpdateInput>
}

/**
 * ProductoXVenta delete
 */
export type ProductoXVentaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  /**
   * Filter which ProductoXVenta to delete.
   */
  where: Prisma.ProductoXVentaWhereUniqueInput
}

/**
 * ProductoXVenta deleteMany
 */
export type ProductoXVentaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductoXVentas to delete
   */
  where?: Prisma.ProductoXVentaWhereInput
  /**
   * Limit how many ProductoXVentas to delete.
   */
  limit?: number
}

/**
 * ProductoXVenta without action
 */
export type ProductoXVentaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
}
