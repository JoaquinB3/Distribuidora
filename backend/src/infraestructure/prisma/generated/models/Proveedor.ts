
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Proveedor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Proveedor
 * 
 */
export type ProveedorModel = runtime.Types.Result.DefaultSelection<Prisma.$ProveedorPayload>

export type AggregateProveedor = {
  _count: ProveedorCountAggregateOutputType | null
  _avg: ProveedorAvgAggregateOutputType | null
  _sum: ProveedorSumAggregateOutputType | null
  _min: ProveedorMinAggregateOutputType | null
  _max: ProveedorMaxAggregateOutputType | null
}

export type ProveedorAvgAggregateOutputType = {
  id: number | null
}

export type ProveedorSumAggregateOutputType = {
  id: number | null
}

export type ProveedorMinAggregateOutputType = {
  id: number | null
  nombre: string | null
  apellido: string | null
  contacto: string | null
  razonSocial: string | null
  telefono: string | null
  email: string | null
}

export type ProveedorMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
  apellido: string | null
  contacto: string | null
  razonSocial: string | null
  telefono: string | null
  email: string | null
}

export type ProveedorCountAggregateOutputType = {
  id: number
  nombre: number
  apellido: number
  contacto: number
  razonSocial: number
  telefono: number
  email: number
  _all: number
}


export type ProveedorAvgAggregateInputType = {
  id?: true
}

export type ProveedorSumAggregateInputType = {
  id?: true
}

export type ProveedorMinAggregateInputType = {
  id?: true
  nombre?: true
  apellido?: true
  contacto?: true
  razonSocial?: true
  telefono?: true
  email?: true
}

export type ProveedorMaxAggregateInputType = {
  id?: true
  nombre?: true
  apellido?: true
  contacto?: true
  razonSocial?: true
  telefono?: true
  email?: true
}

export type ProveedorCountAggregateInputType = {
  id?: true
  nombre?: true
  apellido?: true
  contacto?: true
  razonSocial?: true
  telefono?: true
  email?: true
  _all?: true
}

export type ProveedorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proveedor to aggregate.
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proveedors to fetch.
   */
  orderBy?: Prisma.ProveedorOrderByWithRelationInput | Prisma.ProveedorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProveedorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proveedors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proveedors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Proveedors
  **/
  _count?: true | ProveedorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProveedorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProveedorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProveedorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProveedorMaxAggregateInputType
}

export type GetProveedorAggregateType<T extends ProveedorAggregateArgs> = {
      [P in keyof T & keyof AggregateProveedor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProveedor[P]>
    : Prisma.GetScalarType<T[P], AggregateProveedor[P]>
}




export type ProveedorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProveedorWhereInput
  orderBy?: Prisma.ProveedorOrderByWithAggregationInput | Prisma.ProveedorOrderByWithAggregationInput[]
  by: Prisma.ProveedorScalarFieldEnum[] | Prisma.ProveedorScalarFieldEnum
  having?: Prisma.ProveedorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProveedorCountAggregateInputType | true
  _avg?: ProveedorAvgAggregateInputType
  _sum?: ProveedorSumAggregateInputType
  _min?: ProveedorMinAggregateInputType
  _max?: ProveedorMaxAggregateInputType
}

export type ProveedorGroupByOutputType = {
  id: number
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono: string | null
  email: string
  _count: ProveedorCountAggregateOutputType | null
  _avg: ProveedorAvgAggregateOutputType | null
  _sum: ProveedorSumAggregateOutputType | null
  _min: ProveedorMinAggregateOutputType | null
  _max: ProveedorMaxAggregateOutputType | null
}

type GetProveedorGroupByPayload<T extends ProveedorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProveedorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProveedorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProveedorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProveedorGroupByOutputType[P]>
      }
    >
  > 



export type ProveedorWhereInput = {
  AND?: Prisma.ProveedorWhereInput | Prisma.ProveedorWhereInput[]
  OR?: Prisma.ProveedorWhereInput[]
  NOT?: Prisma.ProveedorWhereInput | Prisma.ProveedorWhereInput[]
  id?: Prisma.IntFilter<"Proveedor"> | number
  nombre?: Prisma.StringFilter<"Proveedor"> | string
  apellido?: Prisma.StringFilter<"Proveedor"> | string
  contacto?: Prisma.StringFilter<"Proveedor"> | string
  razonSocial?: Prisma.StringFilter<"Proveedor"> | string
  telefono?: Prisma.StringNullableFilter<"Proveedor"> | string | null
  email?: Prisma.StringFilter<"Proveedor"> | string
  compras?: Prisma.CompraListRelationFilter
}

export type ProveedorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  apellido?: Prisma.SortOrder
  contacto?: Prisma.SortOrder
  razonSocial?: Prisma.SortOrder
  telefono?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  compras?: Prisma.CompraOrderByRelationAggregateInput
}

export type ProveedorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ProveedorWhereInput | Prisma.ProveedorWhereInput[]
  OR?: Prisma.ProveedorWhereInput[]
  NOT?: Prisma.ProveedorWhereInput | Prisma.ProveedorWhereInput[]
  nombre?: Prisma.StringFilter<"Proveedor"> | string
  apellido?: Prisma.StringFilter<"Proveedor"> | string
  contacto?: Prisma.StringFilter<"Proveedor"> | string
  razonSocial?: Prisma.StringFilter<"Proveedor"> | string
  telefono?: Prisma.StringNullableFilter<"Proveedor"> | string | null
  email?: Prisma.StringFilter<"Proveedor"> | string
  compras?: Prisma.CompraListRelationFilter
}, "id">

export type ProveedorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  apellido?: Prisma.SortOrder
  contacto?: Prisma.SortOrder
  razonSocial?: Prisma.SortOrder
  telefono?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.ProveedorCountOrderByAggregateInput
  _avg?: Prisma.ProveedorAvgOrderByAggregateInput
  _max?: Prisma.ProveedorMaxOrderByAggregateInput
  _min?: Prisma.ProveedorMinOrderByAggregateInput
  _sum?: Prisma.ProveedorSumOrderByAggregateInput
}

export type ProveedorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProveedorScalarWhereWithAggregatesInput | Prisma.ProveedorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProveedorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProveedorScalarWhereWithAggregatesInput | Prisma.ProveedorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Proveedor"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Proveedor"> | string
  apellido?: Prisma.StringWithAggregatesFilter<"Proveedor"> | string
  contacto?: Prisma.StringWithAggregatesFilter<"Proveedor"> | string
  razonSocial?: Prisma.StringWithAggregatesFilter<"Proveedor"> | string
  telefono?: Prisma.StringNullableWithAggregatesFilter<"Proveedor"> | string | null
  email?: Prisma.StringWithAggregatesFilter<"Proveedor"> | string
}

export type ProveedorCreateInput = {
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono?: string | null
  email: string
  compras?: Prisma.CompraCreateNestedManyWithoutProveedorInput
}

export type ProveedorUncheckedCreateInput = {
  id?: number
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono?: string | null
  email: string
  compras?: Prisma.CompraUncheckedCreateNestedManyWithoutProveedorInput
}

export type ProveedorUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  compras?: Prisma.CompraUpdateManyWithoutProveedorNestedInput
}

export type ProveedorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  compras?: Prisma.CompraUncheckedUpdateManyWithoutProveedorNestedInput
}

export type ProveedorCreateManyInput = {
  id?: number
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono?: string | null
  email: string
}

export type ProveedorUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProveedorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProveedorScalarRelationFilter = {
  is?: Prisma.ProveedorWhereInput
  isNot?: Prisma.ProveedorWhereInput
}

export type ProveedorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  apellido?: Prisma.SortOrder
  contacto?: Prisma.SortOrder
  razonSocial?: Prisma.SortOrder
  telefono?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type ProveedorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProveedorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  apellido?: Prisma.SortOrder
  contacto?: Prisma.SortOrder
  razonSocial?: Prisma.SortOrder
  telefono?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type ProveedorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  apellido?: Prisma.SortOrder
  contacto?: Prisma.SortOrder
  razonSocial?: Prisma.SortOrder
  telefono?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type ProveedorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProveedorCreateNestedOneWithoutComprasInput = {
  create?: Prisma.XOR<Prisma.ProveedorCreateWithoutComprasInput, Prisma.ProveedorUncheckedCreateWithoutComprasInput>
  connectOrCreate?: Prisma.ProveedorCreateOrConnectWithoutComprasInput
  connect?: Prisma.ProveedorWhereUniqueInput
}

export type ProveedorUpdateOneRequiredWithoutComprasNestedInput = {
  create?: Prisma.XOR<Prisma.ProveedorCreateWithoutComprasInput, Prisma.ProveedorUncheckedCreateWithoutComprasInput>
  connectOrCreate?: Prisma.ProveedorCreateOrConnectWithoutComprasInput
  upsert?: Prisma.ProveedorUpsertWithoutComprasInput
  connect?: Prisma.ProveedorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProveedorUpdateToOneWithWhereWithoutComprasInput, Prisma.ProveedorUpdateWithoutComprasInput>, Prisma.ProveedorUncheckedUpdateWithoutComprasInput>
}

export type ProveedorCreateWithoutComprasInput = {
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono?: string | null
  email: string
}

export type ProveedorUncheckedCreateWithoutComprasInput = {
  id?: number
  nombre: string
  apellido: string
  contacto: string
  razonSocial: string
  telefono?: string | null
  email: string
}

export type ProveedorCreateOrConnectWithoutComprasInput = {
  where: Prisma.ProveedorWhereUniqueInput
  create: Prisma.XOR<Prisma.ProveedorCreateWithoutComprasInput, Prisma.ProveedorUncheckedCreateWithoutComprasInput>
}

export type ProveedorUpsertWithoutComprasInput = {
  update: Prisma.XOR<Prisma.ProveedorUpdateWithoutComprasInput, Prisma.ProveedorUncheckedUpdateWithoutComprasInput>
  create: Prisma.XOR<Prisma.ProveedorCreateWithoutComprasInput, Prisma.ProveedorUncheckedCreateWithoutComprasInput>
  where?: Prisma.ProveedorWhereInput
}

export type ProveedorUpdateToOneWithWhereWithoutComprasInput = {
  where?: Prisma.ProveedorWhereInput
  data: Prisma.XOR<Prisma.ProveedorUpdateWithoutComprasInput, Prisma.ProveedorUncheckedUpdateWithoutComprasInput>
}

export type ProveedorUpdateWithoutComprasInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProveedorUncheckedUpdateWithoutComprasInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  apellido?: Prisma.StringFieldUpdateOperationsInput | string
  contacto?: Prisma.StringFieldUpdateOperationsInput | string
  razonSocial?: Prisma.StringFieldUpdateOperationsInput | string
  telefono?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProveedorCountOutputType
 */

export type ProveedorCountOutputType = {
  compras: number
}

export type ProveedorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  compras?: boolean | ProveedorCountOutputTypeCountComprasArgs
}

/**
 * ProveedorCountOutputType without action
 */
export type ProveedorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProveedorCountOutputType
   */
  select?: Prisma.ProveedorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProveedorCountOutputType without action
 */
export type ProveedorCountOutputTypeCountComprasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompraWhereInput
}


export type ProveedorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  apellido?: boolean
  contacto?: boolean
  razonSocial?: boolean
  telefono?: boolean
  email?: boolean
  compras?: boolean | Prisma.Proveedor$comprasArgs<ExtArgs>
  _count?: boolean | Prisma.ProveedorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proveedor"]>

export type ProveedorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  apellido?: boolean
  contacto?: boolean
  razonSocial?: boolean
  telefono?: boolean
  email?: boolean
}, ExtArgs["result"]["proveedor"]>

export type ProveedorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  apellido?: boolean
  contacto?: boolean
  razonSocial?: boolean
  telefono?: boolean
  email?: boolean
}, ExtArgs["result"]["proveedor"]>

export type ProveedorSelectScalar = {
  id?: boolean
  nombre?: boolean
  apellido?: boolean
  contacto?: boolean
  razonSocial?: boolean
  telefono?: boolean
  email?: boolean
}

export type ProveedorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre" | "apellido" | "contacto" | "razonSocial" | "telefono" | "email", ExtArgs["result"]["proveedor"]>
export type ProveedorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  compras?: boolean | Prisma.Proveedor$comprasArgs<ExtArgs>
  _count?: boolean | Prisma.ProveedorCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProveedorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ProveedorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ProveedorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Proveedor"
  objects: {
    compras: Prisma.$CompraPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
    apellido: string
    contacto: string
    razonSocial: string
    telefono: string | null
    email: string
  }, ExtArgs["result"]["proveedor"]>
  composites: {}
}

export type ProveedorGetPayload<S extends boolean | null | undefined | ProveedorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProveedorPayload, S>

export type ProveedorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProveedorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProveedorCountAggregateInputType | true
  }

export interface ProveedorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proveedor'], meta: { name: 'Proveedor' } }
  /**
   * Find zero or one Proveedor that matches the filter.
   * @param {ProveedorFindUniqueArgs} args - Arguments to find a Proveedor
   * @example
   * // Get one Proveedor
   * const proveedor = await prisma.proveedor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProveedorFindUniqueArgs>(args: Prisma.SelectSubset<T, ProveedorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Proveedor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProveedorFindUniqueOrThrowArgs} args - Arguments to find a Proveedor
   * @example
   * // Get one Proveedor
   * const proveedor = await prisma.proveedor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProveedorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProveedorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proveedor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorFindFirstArgs} args - Arguments to find a Proveedor
   * @example
   * // Get one Proveedor
   * const proveedor = await prisma.proveedor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProveedorFindFirstArgs>(args?: Prisma.SelectSubset<T, ProveedorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proveedor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorFindFirstOrThrowArgs} args - Arguments to find a Proveedor
   * @example
   * // Get one Proveedor
   * const proveedor = await prisma.proveedor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProveedorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProveedorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Proveedors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Proveedors
   * const proveedors = await prisma.proveedor.findMany()
   * 
   * // Get first 10 Proveedors
   * const proveedors = await prisma.proveedor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const proveedorWithIdOnly = await prisma.proveedor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProveedorFindManyArgs>(args?: Prisma.SelectSubset<T, ProveedorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Proveedor.
   * @param {ProveedorCreateArgs} args - Arguments to create a Proveedor.
   * @example
   * // Create one Proveedor
   * const Proveedor = await prisma.proveedor.create({
   *   data: {
   *     // ... data to create a Proveedor
   *   }
   * })
   * 
   */
  create<T extends ProveedorCreateArgs>(args: Prisma.SelectSubset<T, ProveedorCreateArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Proveedors.
   * @param {ProveedorCreateManyArgs} args - Arguments to create many Proveedors.
   * @example
   * // Create many Proveedors
   * const proveedor = await prisma.proveedor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProveedorCreateManyArgs>(args?: Prisma.SelectSubset<T, ProveedorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Proveedors and returns the data saved in the database.
   * @param {ProveedorCreateManyAndReturnArgs} args - Arguments to create many Proveedors.
   * @example
   * // Create many Proveedors
   * const proveedor = await prisma.proveedor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Proveedors and only return the `id`
   * const proveedorWithIdOnly = await prisma.proveedor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProveedorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProveedorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Proveedor.
   * @param {ProveedorDeleteArgs} args - Arguments to delete one Proveedor.
   * @example
   * // Delete one Proveedor
   * const Proveedor = await prisma.proveedor.delete({
   *   where: {
   *     // ... filter to delete one Proveedor
   *   }
   * })
   * 
   */
  delete<T extends ProveedorDeleteArgs>(args: Prisma.SelectSubset<T, ProveedorDeleteArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Proveedor.
   * @param {ProveedorUpdateArgs} args - Arguments to update one Proveedor.
   * @example
   * // Update one Proveedor
   * const proveedor = await prisma.proveedor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProveedorUpdateArgs>(args: Prisma.SelectSubset<T, ProveedorUpdateArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Proveedors.
   * @param {ProveedorDeleteManyArgs} args - Arguments to filter Proveedors to delete.
   * @example
   * // Delete a few Proveedors
   * const { count } = await prisma.proveedor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProveedorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProveedorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proveedors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Proveedors
   * const proveedor = await prisma.proveedor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProveedorUpdateManyArgs>(args: Prisma.SelectSubset<T, ProveedorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proveedors and returns the data updated in the database.
   * @param {ProveedorUpdateManyAndReturnArgs} args - Arguments to update many Proveedors.
   * @example
   * // Update many Proveedors
   * const proveedor = await prisma.proveedor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Proveedors and only return the `id`
   * const proveedorWithIdOnly = await prisma.proveedor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProveedorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProveedorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Proveedor.
   * @param {ProveedorUpsertArgs} args - Arguments to update or create a Proveedor.
   * @example
   * // Update or create a Proveedor
   * const proveedor = await prisma.proveedor.upsert({
   *   create: {
   *     // ... data to create a Proveedor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Proveedor we want to update
   *   }
   * })
   */
  upsert<T extends ProveedorUpsertArgs>(args: Prisma.SelectSubset<T, ProveedorUpsertArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Proveedors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorCountArgs} args - Arguments to filter Proveedors to count.
   * @example
   * // Count the number of Proveedors
   * const count = await prisma.proveedor.count({
   *   where: {
   *     // ... the filter for the Proveedors we want to count
   *   }
   * })
  **/
  count<T extends ProveedorCountArgs>(
    args?: Prisma.Subset<T, ProveedorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProveedorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Proveedor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProveedorAggregateArgs>(args: Prisma.Subset<T, ProveedorAggregateArgs>): Prisma.PrismaPromise<GetProveedorAggregateType<T>>

  /**
   * Group by Proveedor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProveedorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProveedorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProveedorGroupByArgs['orderBy'] }
      : { orderBy?: ProveedorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProveedorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProveedorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Proveedor model
 */
readonly fields: ProveedorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Proveedor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProveedorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  compras<T extends Prisma.Proveedor$comprasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Proveedor$comprasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Proveedor model
 */
export interface ProveedorFieldRefs {
  readonly id: Prisma.FieldRef<"Proveedor", 'Int'>
  readonly nombre: Prisma.FieldRef<"Proveedor", 'String'>
  readonly apellido: Prisma.FieldRef<"Proveedor", 'String'>
  readonly contacto: Prisma.FieldRef<"Proveedor", 'String'>
  readonly razonSocial: Prisma.FieldRef<"Proveedor", 'String'>
  readonly telefono: Prisma.FieldRef<"Proveedor", 'String'>
  readonly email: Prisma.FieldRef<"Proveedor", 'String'>
}
    

// Custom InputTypes
/**
 * Proveedor findUnique
 */
export type ProveedorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter, which Proveedor to fetch.
   */
  where: Prisma.ProveedorWhereUniqueInput
}

/**
 * Proveedor findUniqueOrThrow
 */
export type ProveedorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter, which Proveedor to fetch.
   */
  where: Prisma.ProveedorWhereUniqueInput
}

/**
 * Proveedor findFirst
 */
export type ProveedorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter, which Proveedor to fetch.
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proveedors to fetch.
   */
  orderBy?: Prisma.ProveedorOrderByWithRelationInput | Prisma.ProveedorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proveedors.
   */
  cursor?: Prisma.ProveedorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proveedors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proveedors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proveedors.
   */
  distinct?: Prisma.ProveedorScalarFieldEnum | Prisma.ProveedorScalarFieldEnum[]
}

/**
 * Proveedor findFirstOrThrow
 */
export type ProveedorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter, which Proveedor to fetch.
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proveedors to fetch.
   */
  orderBy?: Prisma.ProveedorOrderByWithRelationInput | Prisma.ProveedorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proveedors.
   */
  cursor?: Prisma.ProveedorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proveedors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proveedors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proveedors.
   */
  distinct?: Prisma.ProveedorScalarFieldEnum | Prisma.ProveedorScalarFieldEnum[]
}

/**
 * Proveedor findMany
 */
export type ProveedorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter, which Proveedors to fetch.
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proveedors to fetch.
   */
  orderBy?: Prisma.ProveedorOrderByWithRelationInput | Prisma.ProveedorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Proveedors.
   */
  cursor?: Prisma.ProveedorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proveedors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proveedors.
   */
  skip?: number
  distinct?: Prisma.ProveedorScalarFieldEnum | Prisma.ProveedorScalarFieldEnum[]
}

/**
 * Proveedor create
 */
export type ProveedorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * The data needed to create a Proveedor.
   */
  data: Prisma.XOR<Prisma.ProveedorCreateInput, Prisma.ProveedorUncheckedCreateInput>
}

/**
 * Proveedor createMany
 */
export type ProveedorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Proveedors.
   */
  data: Prisma.ProveedorCreateManyInput | Prisma.ProveedorCreateManyInput[]
}

/**
 * Proveedor createManyAndReturn
 */
export type ProveedorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * The data used to create many Proveedors.
   */
  data: Prisma.ProveedorCreateManyInput | Prisma.ProveedorCreateManyInput[]
}

/**
 * Proveedor update
 */
export type ProveedorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * The data needed to update a Proveedor.
   */
  data: Prisma.XOR<Prisma.ProveedorUpdateInput, Prisma.ProveedorUncheckedUpdateInput>
  /**
   * Choose, which Proveedor to update.
   */
  where: Prisma.ProveedorWhereUniqueInput
}

/**
 * Proveedor updateMany
 */
export type ProveedorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Proveedors.
   */
  data: Prisma.XOR<Prisma.ProveedorUpdateManyMutationInput, Prisma.ProveedorUncheckedUpdateManyInput>
  /**
   * Filter which Proveedors to update
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * Limit how many Proveedors to update.
   */
  limit?: number
}

/**
 * Proveedor updateManyAndReturn
 */
export type ProveedorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * The data used to update Proveedors.
   */
  data: Prisma.XOR<Prisma.ProveedorUpdateManyMutationInput, Prisma.ProveedorUncheckedUpdateManyInput>
  /**
   * Filter which Proveedors to update
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * Limit how many Proveedors to update.
   */
  limit?: number
}

/**
 * Proveedor upsert
 */
export type ProveedorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * The filter to search for the Proveedor to update in case it exists.
   */
  where: Prisma.ProveedorWhereUniqueInput
  /**
   * In case the Proveedor found by the `where` argument doesn't exist, create a new Proveedor with this data.
   */
  create: Prisma.XOR<Prisma.ProveedorCreateInput, Prisma.ProveedorUncheckedCreateInput>
  /**
   * In case the Proveedor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProveedorUpdateInput, Prisma.ProveedorUncheckedUpdateInput>
}

/**
 * Proveedor delete
 */
export type ProveedorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
  /**
   * Filter which Proveedor to delete.
   */
  where: Prisma.ProveedorWhereUniqueInput
}

/**
 * Proveedor deleteMany
 */
export type ProveedorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proveedors to delete
   */
  where?: Prisma.ProveedorWhereInput
  /**
   * Limit how many Proveedors to delete.
   */
  limit?: number
}

/**
 * Proveedor.compras
 */
export type Proveedor$comprasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  where?: Prisma.CompraWhereInput
  orderBy?: Prisma.CompraOrderByWithRelationInput | Prisma.CompraOrderByWithRelationInput[]
  cursor?: Prisma.CompraWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CompraScalarFieldEnum | Prisma.CompraScalarFieldEnum[]
}

/**
 * Proveedor without action
 */
export type ProveedorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proveedor
   */
  select?: Prisma.ProveedorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proveedor
   */
  omit?: Prisma.ProveedorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProveedorInclude<ExtArgs> | null
}
