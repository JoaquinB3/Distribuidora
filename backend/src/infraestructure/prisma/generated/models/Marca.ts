
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Marca` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Marca
 * 
 */
export type MarcaModel = runtime.Types.Result.DefaultSelection<Prisma.$MarcaPayload>

export type AggregateMarca = {
  _count: MarcaCountAggregateOutputType | null
  _avg: MarcaAvgAggregateOutputType | null
  _sum: MarcaSumAggregateOutputType | null
  _min: MarcaMinAggregateOutputType | null
  _max: MarcaMaxAggregateOutputType | null
}

export type MarcaAvgAggregateOutputType = {
  id: number | null
}

export type MarcaSumAggregateOutputType = {
  id: number | null
}

export type MarcaMinAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type MarcaMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type MarcaCountAggregateOutputType = {
  id: number
  nombre: number
  _all: number
}


export type MarcaAvgAggregateInputType = {
  id?: true
}

export type MarcaSumAggregateInputType = {
  id?: true
}

export type MarcaMinAggregateInputType = {
  id?: true
  nombre?: true
}

export type MarcaMaxAggregateInputType = {
  id?: true
  nombre?: true
}

export type MarcaCountAggregateInputType = {
  id?: true
  nombre?: true
  _all?: true
}

export type MarcaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Marca to aggregate.
   */
  where?: Prisma.MarcaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Marcas to fetch.
   */
  orderBy?: Prisma.MarcaOrderByWithRelationInput | Prisma.MarcaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MarcaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Marcas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Marcas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Marcas
  **/
  _count?: true | MarcaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MarcaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MarcaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MarcaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MarcaMaxAggregateInputType
}

export type GetMarcaAggregateType<T extends MarcaAggregateArgs> = {
      [P in keyof T & keyof AggregateMarca]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMarca[P]>
    : Prisma.GetScalarType<T[P], AggregateMarca[P]>
}




export type MarcaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MarcaWhereInput
  orderBy?: Prisma.MarcaOrderByWithAggregationInput | Prisma.MarcaOrderByWithAggregationInput[]
  by: Prisma.MarcaScalarFieldEnum[] | Prisma.MarcaScalarFieldEnum
  having?: Prisma.MarcaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MarcaCountAggregateInputType | true
  _avg?: MarcaAvgAggregateInputType
  _sum?: MarcaSumAggregateInputType
  _min?: MarcaMinAggregateInputType
  _max?: MarcaMaxAggregateInputType
}

export type MarcaGroupByOutputType = {
  id: number
  nombre: string
  _count: MarcaCountAggregateOutputType | null
  _avg: MarcaAvgAggregateOutputType | null
  _sum: MarcaSumAggregateOutputType | null
  _min: MarcaMinAggregateOutputType | null
  _max: MarcaMaxAggregateOutputType | null
}

type GetMarcaGroupByPayload<T extends MarcaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MarcaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MarcaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MarcaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MarcaGroupByOutputType[P]>
      }
    >
  > 



export type MarcaWhereInput = {
  AND?: Prisma.MarcaWhereInput | Prisma.MarcaWhereInput[]
  OR?: Prisma.MarcaWhereInput[]
  NOT?: Prisma.MarcaWhereInput | Prisma.MarcaWhereInput[]
  id?: Prisma.IntFilter<"Marca"> | number
  nombre?: Prisma.StringFilter<"Marca"> | string
  productos?: Prisma.ProductoListRelationFilter
}

export type MarcaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  productos?: Prisma.ProductoOrderByRelationAggregateInput
}

export type MarcaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MarcaWhereInput | Prisma.MarcaWhereInput[]
  OR?: Prisma.MarcaWhereInput[]
  NOT?: Prisma.MarcaWhereInput | Prisma.MarcaWhereInput[]
  nombre?: Prisma.StringFilter<"Marca"> | string
  productos?: Prisma.ProductoListRelationFilter
}, "id">

export type MarcaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  _count?: Prisma.MarcaCountOrderByAggregateInput
  _avg?: Prisma.MarcaAvgOrderByAggregateInput
  _max?: Prisma.MarcaMaxOrderByAggregateInput
  _min?: Prisma.MarcaMinOrderByAggregateInput
  _sum?: Prisma.MarcaSumOrderByAggregateInput
}

export type MarcaScalarWhereWithAggregatesInput = {
  AND?: Prisma.MarcaScalarWhereWithAggregatesInput | Prisma.MarcaScalarWhereWithAggregatesInput[]
  OR?: Prisma.MarcaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MarcaScalarWhereWithAggregatesInput | Prisma.MarcaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Marca"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Marca"> | string
}

export type MarcaCreateInput = {
  nombre: string
  productos?: Prisma.ProductoCreateNestedManyWithoutMarcaInput
}

export type MarcaUncheckedCreateInput = {
  id?: number
  nombre: string
  productos?: Prisma.ProductoUncheckedCreateNestedManyWithoutMarcaInput
}

export type MarcaUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  productos?: Prisma.ProductoUpdateManyWithoutMarcaNestedInput
}

export type MarcaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  productos?: Prisma.ProductoUncheckedUpdateManyWithoutMarcaNestedInput
}

export type MarcaCreateManyInput = {
  id?: number
  nombre: string
}

export type MarcaUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarcaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarcaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MarcaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MarcaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MarcaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MarcaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MarcaScalarRelationFilter = {
  is?: Prisma.MarcaWhereInput
  isNot?: Prisma.MarcaWhereInput
}

export type MarcaCreateNestedOneWithoutProductosInput = {
  create?: Prisma.XOR<Prisma.MarcaCreateWithoutProductosInput, Prisma.MarcaUncheckedCreateWithoutProductosInput>
  connectOrCreate?: Prisma.MarcaCreateOrConnectWithoutProductosInput
  connect?: Prisma.MarcaWhereUniqueInput
}

export type MarcaUpdateOneRequiredWithoutProductosNestedInput = {
  create?: Prisma.XOR<Prisma.MarcaCreateWithoutProductosInput, Prisma.MarcaUncheckedCreateWithoutProductosInput>
  connectOrCreate?: Prisma.MarcaCreateOrConnectWithoutProductosInput
  upsert?: Prisma.MarcaUpsertWithoutProductosInput
  connect?: Prisma.MarcaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MarcaUpdateToOneWithWhereWithoutProductosInput, Prisma.MarcaUpdateWithoutProductosInput>, Prisma.MarcaUncheckedUpdateWithoutProductosInput>
}

export type MarcaCreateWithoutProductosInput = {
  nombre: string
}

export type MarcaUncheckedCreateWithoutProductosInput = {
  id?: number
  nombre: string
}

export type MarcaCreateOrConnectWithoutProductosInput = {
  where: Prisma.MarcaWhereUniqueInput
  create: Prisma.XOR<Prisma.MarcaCreateWithoutProductosInput, Prisma.MarcaUncheckedCreateWithoutProductosInput>
}

export type MarcaUpsertWithoutProductosInput = {
  update: Prisma.XOR<Prisma.MarcaUpdateWithoutProductosInput, Prisma.MarcaUncheckedUpdateWithoutProductosInput>
  create: Prisma.XOR<Prisma.MarcaCreateWithoutProductosInput, Prisma.MarcaUncheckedCreateWithoutProductosInput>
  where?: Prisma.MarcaWhereInput
}

export type MarcaUpdateToOneWithWhereWithoutProductosInput = {
  where?: Prisma.MarcaWhereInput
  data: Prisma.XOR<Prisma.MarcaUpdateWithoutProductosInput, Prisma.MarcaUncheckedUpdateWithoutProductosInput>
}

export type MarcaUpdateWithoutProductosInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MarcaUncheckedUpdateWithoutProductosInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type MarcaCountOutputType
 */

export type MarcaCountOutputType = {
  productos: number
}

export type MarcaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productos?: boolean | MarcaCountOutputTypeCountProductosArgs
}

/**
 * MarcaCountOutputType without action
 */
export type MarcaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MarcaCountOutputType
   */
  select?: Prisma.MarcaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MarcaCountOutputType without action
 */
export type MarcaCountOutputTypeCountProductosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoWhereInput
}


export type MarcaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  productos?: boolean | Prisma.Marca$productosArgs<ExtArgs>
  _count?: boolean | Prisma.MarcaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["marca"]>

export type MarcaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["marca"]>

export type MarcaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["marca"]>

export type MarcaSelectScalar = {
  id?: boolean
  nombre?: boolean
}

export type MarcaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["marca"]>
export type MarcaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productos?: boolean | Prisma.Marca$productosArgs<ExtArgs>
  _count?: boolean | Prisma.MarcaCountOutputTypeDefaultArgs<ExtArgs>
}
export type MarcaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MarcaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MarcaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Marca"
  objects: {
    productos: Prisma.$ProductoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
  }, ExtArgs["result"]["marca"]>
  composites: {}
}

export type MarcaGetPayload<S extends boolean | null | undefined | MarcaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MarcaPayload, S>

export type MarcaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MarcaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MarcaCountAggregateInputType | true
  }

export interface MarcaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Marca'], meta: { name: 'Marca' } }
  /**
   * Find zero or one Marca that matches the filter.
   * @param {MarcaFindUniqueArgs} args - Arguments to find a Marca
   * @example
   * // Get one Marca
   * const marca = await prisma.marca.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MarcaFindUniqueArgs>(args: Prisma.SelectSubset<T, MarcaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Marca that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MarcaFindUniqueOrThrowArgs} args - Arguments to find a Marca
   * @example
   * // Get one Marca
   * const marca = await prisma.marca.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MarcaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MarcaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Marca that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaFindFirstArgs} args - Arguments to find a Marca
   * @example
   * // Get one Marca
   * const marca = await prisma.marca.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MarcaFindFirstArgs>(args?: Prisma.SelectSubset<T, MarcaFindFirstArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Marca that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaFindFirstOrThrowArgs} args - Arguments to find a Marca
   * @example
   * // Get one Marca
   * const marca = await prisma.marca.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MarcaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MarcaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Marcas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Marcas
   * const marcas = await prisma.marca.findMany()
   * 
   * // Get first 10 Marcas
   * const marcas = await prisma.marca.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const marcaWithIdOnly = await prisma.marca.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MarcaFindManyArgs>(args?: Prisma.SelectSubset<T, MarcaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Marca.
   * @param {MarcaCreateArgs} args - Arguments to create a Marca.
   * @example
   * // Create one Marca
   * const Marca = await prisma.marca.create({
   *   data: {
   *     // ... data to create a Marca
   *   }
   * })
   * 
   */
  create<T extends MarcaCreateArgs>(args: Prisma.SelectSubset<T, MarcaCreateArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Marcas.
   * @param {MarcaCreateManyArgs} args - Arguments to create many Marcas.
   * @example
   * // Create many Marcas
   * const marca = await prisma.marca.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MarcaCreateManyArgs>(args?: Prisma.SelectSubset<T, MarcaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Marcas and returns the data saved in the database.
   * @param {MarcaCreateManyAndReturnArgs} args - Arguments to create many Marcas.
   * @example
   * // Create many Marcas
   * const marca = await prisma.marca.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Marcas and only return the `id`
   * const marcaWithIdOnly = await prisma.marca.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MarcaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MarcaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Marca.
   * @param {MarcaDeleteArgs} args - Arguments to delete one Marca.
   * @example
   * // Delete one Marca
   * const Marca = await prisma.marca.delete({
   *   where: {
   *     // ... filter to delete one Marca
   *   }
   * })
   * 
   */
  delete<T extends MarcaDeleteArgs>(args: Prisma.SelectSubset<T, MarcaDeleteArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Marca.
   * @param {MarcaUpdateArgs} args - Arguments to update one Marca.
   * @example
   * // Update one Marca
   * const marca = await prisma.marca.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MarcaUpdateArgs>(args: Prisma.SelectSubset<T, MarcaUpdateArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Marcas.
   * @param {MarcaDeleteManyArgs} args - Arguments to filter Marcas to delete.
   * @example
   * // Delete a few Marcas
   * const { count } = await prisma.marca.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MarcaDeleteManyArgs>(args?: Prisma.SelectSubset<T, MarcaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Marcas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Marcas
   * const marca = await prisma.marca.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MarcaUpdateManyArgs>(args: Prisma.SelectSubset<T, MarcaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Marcas and returns the data updated in the database.
   * @param {MarcaUpdateManyAndReturnArgs} args - Arguments to update many Marcas.
   * @example
   * // Update many Marcas
   * const marca = await prisma.marca.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Marcas and only return the `id`
   * const marcaWithIdOnly = await prisma.marca.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MarcaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MarcaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Marca.
   * @param {MarcaUpsertArgs} args - Arguments to update or create a Marca.
   * @example
   * // Update or create a Marca
   * const marca = await prisma.marca.upsert({
   *   create: {
   *     // ... data to create a Marca
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Marca we want to update
   *   }
   * })
   */
  upsert<T extends MarcaUpsertArgs>(args: Prisma.SelectSubset<T, MarcaUpsertArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Marcas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaCountArgs} args - Arguments to filter Marcas to count.
   * @example
   * // Count the number of Marcas
   * const count = await prisma.marca.count({
   *   where: {
   *     // ... the filter for the Marcas we want to count
   *   }
   * })
  **/
  count<T extends MarcaCountArgs>(
    args?: Prisma.Subset<T, MarcaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MarcaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Marca.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MarcaAggregateArgs>(args: Prisma.Subset<T, MarcaAggregateArgs>): Prisma.PrismaPromise<GetMarcaAggregateType<T>>

  /**
   * Group by Marca.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MarcaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MarcaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MarcaGroupByArgs['orderBy'] }
      : { orderBy?: MarcaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MarcaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Marca model
 */
readonly fields: MarcaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Marca.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MarcaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  productos<T extends Prisma.Marca$productosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Marca$productosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Marca model
 */
export interface MarcaFieldRefs {
  readonly id: Prisma.FieldRef<"Marca", 'Int'>
  readonly nombre: Prisma.FieldRef<"Marca", 'String'>
}
    

// Custom InputTypes
/**
 * Marca findUnique
 */
export type MarcaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter, which Marca to fetch.
   */
  where: Prisma.MarcaWhereUniqueInput
}

/**
 * Marca findUniqueOrThrow
 */
export type MarcaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter, which Marca to fetch.
   */
  where: Prisma.MarcaWhereUniqueInput
}

/**
 * Marca findFirst
 */
export type MarcaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter, which Marca to fetch.
   */
  where?: Prisma.MarcaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Marcas to fetch.
   */
  orderBy?: Prisma.MarcaOrderByWithRelationInput | Prisma.MarcaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Marcas.
   */
  cursor?: Prisma.MarcaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Marcas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Marcas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Marcas.
   */
  distinct?: Prisma.MarcaScalarFieldEnum | Prisma.MarcaScalarFieldEnum[]
}

/**
 * Marca findFirstOrThrow
 */
export type MarcaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter, which Marca to fetch.
   */
  where?: Prisma.MarcaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Marcas to fetch.
   */
  orderBy?: Prisma.MarcaOrderByWithRelationInput | Prisma.MarcaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Marcas.
   */
  cursor?: Prisma.MarcaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Marcas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Marcas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Marcas.
   */
  distinct?: Prisma.MarcaScalarFieldEnum | Prisma.MarcaScalarFieldEnum[]
}

/**
 * Marca findMany
 */
export type MarcaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter, which Marcas to fetch.
   */
  where?: Prisma.MarcaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Marcas to fetch.
   */
  orderBy?: Prisma.MarcaOrderByWithRelationInput | Prisma.MarcaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Marcas.
   */
  cursor?: Prisma.MarcaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Marcas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Marcas.
   */
  skip?: number
  distinct?: Prisma.MarcaScalarFieldEnum | Prisma.MarcaScalarFieldEnum[]
}

/**
 * Marca create
 */
export type MarcaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * The data needed to create a Marca.
   */
  data: Prisma.XOR<Prisma.MarcaCreateInput, Prisma.MarcaUncheckedCreateInput>
}

/**
 * Marca createMany
 */
export type MarcaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Marcas.
   */
  data: Prisma.MarcaCreateManyInput | Prisma.MarcaCreateManyInput[]
}

/**
 * Marca createManyAndReturn
 */
export type MarcaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * The data used to create many Marcas.
   */
  data: Prisma.MarcaCreateManyInput | Prisma.MarcaCreateManyInput[]
}

/**
 * Marca update
 */
export type MarcaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * The data needed to update a Marca.
   */
  data: Prisma.XOR<Prisma.MarcaUpdateInput, Prisma.MarcaUncheckedUpdateInput>
  /**
   * Choose, which Marca to update.
   */
  where: Prisma.MarcaWhereUniqueInput
}

/**
 * Marca updateMany
 */
export type MarcaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Marcas.
   */
  data: Prisma.XOR<Prisma.MarcaUpdateManyMutationInput, Prisma.MarcaUncheckedUpdateManyInput>
  /**
   * Filter which Marcas to update
   */
  where?: Prisma.MarcaWhereInput
  /**
   * Limit how many Marcas to update.
   */
  limit?: number
}

/**
 * Marca updateManyAndReturn
 */
export type MarcaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * The data used to update Marcas.
   */
  data: Prisma.XOR<Prisma.MarcaUpdateManyMutationInput, Prisma.MarcaUncheckedUpdateManyInput>
  /**
   * Filter which Marcas to update
   */
  where?: Prisma.MarcaWhereInput
  /**
   * Limit how many Marcas to update.
   */
  limit?: number
}

/**
 * Marca upsert
 */
export type MarcaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * The filter to search for the Marca to update in case it exists.
   */
  where: Prisma.MarcaWhereUniqueInput
  /**
   * In case the Marca found by the `where` argument doesn't exist, create a new Marca with this data.
   */
  create: Prisma.XOR<Prisma.MarcaCreateInput, Prisma.MarcaUncheckedCreateInput>
  /**
   * In case the Marca was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MarcaUpdateInput, Prisma.MarcaUncheckedUpdateInput>
}

/**
 * Marca delete
 */
export type MarcaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
  /**
   * Filter which Marca to delete.
   */
  where: Prisma.MarcaWhereUniqueInput
}

/**
 * Marca deleteMany
 */
export type MarcaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Marcas to delete
   */
  where?: Prisma.MarcaWhereInput
  /**
   * Limit how many Marcas to delete.
   */
  limit?: number
}

/**
 * Marca.productos
 */
export type Marca$productosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  where?: Prisma.ProductoWhereInput
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  cursor?: Prisma.ProductoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoScalarFieldEnum | Prisma.ProductoScalarFieldEnum[]
}

/**
 * Marca without action
 */
export type MarcaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Marca
   */
  select?: Prisma.MarcaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Marca
   */
  omit?: Prisma.MarcaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MarcaInclude<ExtArgs> | null
}
