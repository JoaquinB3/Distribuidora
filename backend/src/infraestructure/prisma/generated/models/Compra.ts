
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Compra` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Compra
 * 
 */
export type CompraModel = runtime.Types.Result.DefaultSelection<Prisma.$CompraPayload>

export type AggregateCompra = {
  _count: CompraCountAggregateOutputType | null
  _avg: CompraAvgAggregateOutputType | null
  _sum: CompraSumAggregateOutputType | null
  _min: CompraMinAggregateOutputType | null
  _max: CompraMaxAggregateOutputType | null
}

export type CompraAvgAggregateOutputType = {
  id: number | null
  monto: number | null
  proveedorId: number | null
}

export type CompraSumAggregateOutputType = {
  id: number | null
  monto: number | null
  proveedorId: number | null
}

export type CompraMinAggregateOutputType = {
  id: number | null
  monto: number | null
  fecha: Date | null
  metodoPago: string | null
  proveedorId: number | null
}

export type CompraMaxAggregateOutputType = {
  id: number | null
  monto: number | null
  fecha: Date | null
  metodoPago: string | null
  proveedorId: number | null
}

export type CompraCountAggregateOutputType = {
  id: number
  monto: number
  fecha: number
  metodoPago: number
  proveedorId: number
  _all: number
}


export type CompraAvgAggregateInputType = {
  id?: true
  monto?: true
  proveedorId?: true
}

export type CompraSumAggregateInputType = {
  id?: true
  monto?: true
  proveedorId?: true
}

export type CompraMinAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPago?: true
  proveedorId?: true
}

export type CompraMaxAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPago?: true
  proveedorId?: true
}

export type CompraCountAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPago?: true
  proveedorId?: true
  _all?: true
}

export type CompraAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Compra to aggregate.
   */
  where?: Prisma.CompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Compras to fetch.
   */
  orderBy?: Prisma.CompraOrderByWithRelationInput | Prisma.CompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Compras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Compras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Compras
  **/
  _count?: true | CompraCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CompraAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CompraSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CompraMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CompraMaxAggregateInputType
}

export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
      [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCompra[P]>
    : Prisma.GetScalarType<T[P], AggregateCompra[P]>
}




export type CompraGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CompraWhereInput
  orderBy?: Prisma.CompraOrderByWithAggregationInput | Prisma.CompraOrderByWithAggregationInput[]
  by: Prisma.CompraScalarFieldEnum[] | Prisma.CompraScalarFieldEnum
  having?: Prisma.CompraScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CompraCountAggregateInputType | true
  _avg?: CompraAvgAggregateInputType
  _sum?: CompraSumAggregateInputType
  _min?: CompraMinAggregateInputType
  _max?: CompraMaxAggregateInputType
}

export type CompraGroupByOutputType = {
  id: number
  monto: number
  fecha: Date
  metodoPago: string
  proveedorId: number
  _count: CompraCountAggregateOutputType | null
  _avg: CompraAvgAggregateOutputType | null
  _sum: CompraSumAggregateOutputType | null
  _min: CompraMinAggregateOutputType | null
  _max: CompraMaxAggregateOutputType | null
}

type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CompraGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CompraGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CompraGroupByOutputType[P]>
      }
    >
  > 



export type CompraWhereInput = {
  AND?: Prisma.CompraWhereInput | Prisma.CompraWhereInput[]
  OR?: Prisma.CompraWhereInput[]
  NOT?: Prisma.CompraWhereInput | Prisma.CompraWhereInput[]
  id?: Prisma.IntFilter<"Compra"> | number
  monto?: Prisma.FloatFilter<"Compra"> | number
  fecha?: Prisma.DateTimeFilter<"Compra"> | Date | string
  metodoPago?: Prisma.StringFilter<"Compra"> | string
  proveedorId?: Prisma.IntFilter<"Compra"> | number
  proveedor?: Prisma.XOR<Prisma.ProveedorScalarRelationFilter, Prisma.ProveedorWhereInput>
  productosXCompra?: Prisma.ProductoXCompraListRelationFilter
  factura?: Prisma.XOR<Prisma.FacturaNullableScalarRelationFilter, Prisma.FacturaWhereInput> | null
}

export type CompraOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPago?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
  proveedor?: Prisma.ProveedorOrderByWithRelationInput
  productosXCompra?: Prisma.ProductoXCompraOrderByRelationAggregateInput
  factura?: Prisma.FacturaOrderByWithRelationInput
}

export type CompraWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CompraWhereInput | Prisma.CompraWhereInput[]
  OR?: Prisma.CompraWhereInput[]
  NOT?: Prisma.CompraWhereInput | Prisma.CompraWhereInput[]
  monto?: Prisma.FloatFilter<"Compra"> | number
  fecha?: Prisma.DateTimeFilter<"Compra"> | Date | string
  metodoPago?: Prisma.StringFilter<"Compra"> | string
  proveedorId?: Prisma.IntFilter<"Compra"> | number
  proveedor?: Prisma.XOR<Prisma.ProveedorScalarRelationFilter, Prisma.ProveedorWhereInput>
  productosXCompra?: Prisma.ProductoXCompraListRelationFilter
  factura?: Prisma.XOR<Prisma.FacturaNullableScalarRelationFilter, Prisma.FacturaWhereInput> | null
}, "id">

export type CompraOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPago?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
  _count?: Prisma.CompraCountOrderByAggregateInput
  _avg?: Prisma.CompraAvgOrderByAggregateInput
  _max?: Prisma.CompraMaxOrderByAggregateInput
  _min?: Prisma.CompraMinOrderByAggregateInput
  _sum?: Prisma.CompraSumOrderByAggregateInput
}

export type CompraScalarWhereWithAggregatesInput = {
  AND?: Prisma.CompraScalarWhereWithAggregatesInput | Prisma.CompraScalarWhereWithAggregatesInput[]
  OR?: Prisma.CompraScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CompraScalarWhereWithAggregatesInput | Prisma.CompraScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Compra"> | number
  monto?: Prisma.FloatWithAggregatesFilter<"Compra"> | number
  fecha?: Prisma.DateTimeWithAggregatesFilter<"Compra"> | Date | string
  metodoPago?: Prisma.StringWithAggregatesFilter<"Compra"> | string
  proveedorId?: Prisma.IntWithAggregatesFilter<"Compra"> | number
}

export type CompraCreateInput = {
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedor: Prisma.ProveedorCreateNestedOneWithoutComprasInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutCompraInput
  factura?: Prisma.FacturaCreateNestedOneWithoutCompraInput
}

export type CompraUncheckedCreateInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedorId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutCompraInput
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutCompraInput
}

export type CompraUpdateInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedor?: Prisma.ProveedorUpdateOneRequiredWithoutComprasNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutCompraNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutCompraNestedInput
}

export type CompraUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedorId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutCompraNestedInput
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutCompraNestedInput
}

export type CompraCreateManyInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedorId: number
}

export type CompraUpdateManyMutationInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CompraUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type CompraCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPago?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
}

export type CompraAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
}

export type CompraMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPago?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
}

export type CompraMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPago?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
}

export type CompraSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  proveedorId?: Prisma.SortOrder
}

export type CompraNullableScalarRelationFilter = {
  is?: Prisma.CompraWhereInput | null
  isNot?: Prisma.CompraWhereInput | null
}

export type CompraScalarRelationFilter = {
  is?: Prisma.CompraWhereInput
  isNot?: Prisma.CompraWhereInput
}

export type CompraListRelationFilter = {
  every?: Prisma.CompraWhereInput
  some?: Prisma.CompraWhereInput
  none?: Prisma.CompraWhereInput
}

export type CompraOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type CompraCreateNestedOneWithoutFacturaInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutFacturaInput, Prisma.CompraUncheckedCreateWithoutFacturaInput>
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutFacturaInput
  connect?: Prisma.CompraWhereUniqueInput
}

export type CompraUpdateOneWithoutFacturaNestedInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutFacturaInput, Prisma.CompraUncheckedCreateWithoutFacturaInput>
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutFacturaInput
  upsert?: Prisma.CompraUpsertWithoutFacturaInput
  disconnect?: Prisma.CompraWhereInput | boolean
  delete?: Prisma.CompraWhereInput | boolean
  connect?: Prisma.CompraWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompraUpdateToOneWithWhereWithoutFacturaInput, Prisma.CompraUpdateWithoutFacturaInput>, Prisma.CompraUncheckedUpdateWithoutFacturaInput>
}

export type CompraCreateNestedOneWithoutProductosXCompraInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProductosXCompraInput, Prisma.CompraUncheckedCreateWithoutProductosXCompraInput>
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProductosXCompraInput
  connect?: Prisma.CompraWhereUniqueInput
}

export type CompraUpdateOneRequiredWithoutProductosXCompraNestedInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProductosXCompraInput, Prisma.CompraUncheckedCreateWithoutProductosXCompraInput>
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProductosXCompraInput
  upsert?: Prisma.CompraUpsertWithoutProductosXCompraInput
  connect?: Prisma.CompraWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CompraUpdateToOneWithWhereWithoutProductosXCompraInput, Prisma.CompraUpdateWithoutProductosXCompraInput>, Prisma.CompraUncheckedUpdateWithoutProductosXCompraInput>
}

export type CompraCreateNestedManyWithoutProveedorInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput> | Prisma.CompraCreateWithoutProveedorInput[] | Prisma.CompraUncheckedCreateWithoutProveedorInput[]
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProveedorInput | Prisma.CompraCreateOrConnectWithoutProveedorInput[]
  createMany?: Prisma.CompraCreateManyProveedorInputEnvelope
  connect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
}

export type CompraUncheckedCreateNestedManyWithoutProveedorInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput> | Prisma.CompraCreateWithoutProveedorInput[] | Prisma.CompraUncheckedCreateWithoutProveedorInput[]
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProveedorInput | Prisma.CompraCreateOrConnectWithoutProveedorInput[]
  createMany?: Prisma.CompraCreateManyProveedorInputEnvelope
  connect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
}

export type CompraUpdateManyWithoutProveedorNestedInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput> | Prisma.CompraCreateWithoutProveedorInput[] | Prisma.CompraUncheckedCreateWithoutProveedorInput[]
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProveedorInput | Prisma.CompraCreateOrConnectWithoutProveedorInput[]
  upsert?: Prisma.CompraUpsertWithWhereUniqueWithoutProveedorInput | Prisma.CompraUpsertWithWhereUniqueWithoutProveedorInput[]
  createMany?: Prisma.CompraCreateManyProveedorInputEnvelope
  set?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  disconnect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  delete?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  connect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  update?: Prisma.CompraUpdateWithWhereUniqueWithoutProveedorInput | Prisma.CompraUpdateWithWhereUniqueWithoutProveedorInput[]
  updateMany?: Prisma.CompraUpdateManyWithWhereWithoutProveedorInput | Prisma.CompraUpdateManyWithWhereWithoutProveedorInput[]
  deleteMany?: Prisma.CompraScalarWhereInput | Prisma.CompraScalarWhereInput[]
}

export type CompraUncheckedUpdateManyWithoutProveedorNestedInput = {
  create?: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput> | Prisma.CompraCreateWithoutProveedorInput[] | Prisma.CompraUncheckedCreateWithoutProveedorInput[]
  connectOrCreate?: Prisma.CompraCreateOrConnectWithoutProveedorInput | Prisma.CompraCreateOrConnectWithoutProveedorInput[]
  upsert?: Prisma.CompraUpsertWithWhereUniqueWithoutProveedorInput | Prisma.CompraUpsertWithWhereUniqueWithoutProveedorInput[]
  createMany?: Prisma.CompraCreateManyProveedorInputEnvelope
  set?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  disconnect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  delete?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  connect?: Prisma.CompraWhereUniqueInput | Prisma.CompraWhereUniqueInput[]
  update?: Prisma.CompraUpdateWithWhereUniqueWithoutProveedorInput | Prisma.CompraUpdateWithWhereUniqueWithoutProveedorInput[]
  updateMany?: Prisma.CompraUpdateManyWithWhereWithoutProveedorInput | Prisma.CompraUpdateManyWithWhereWithoutProveedorInput[]
  deleteMany?: Prisma.CompraScalarWhereInput | Prisma.CompraScalarWhereInput[]
}

export type CompraCreateWithoutFacturaInput = {
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedor: Prisma.ProveedorCreateNestedOneWithoutComprasInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutCompraInput
}

export type CompraUncheckedCreateWithoutFacturaInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedorId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutCompraInput
}

export type CompraCreateOrConnectWithoutFacturaInput = {
  where: Prisma.CompraWhereUniqueInput
  create: Prisma.XOR<Prisma.CompraCreateWithoutFacturaInput, Prisma.CompraUncheckedCreateWithoutFacturaInput>
}

export type CompraUpsertWithoutFacturaInput = {
  update: Prisma.XOR<Prisma.CompraUpdateWithoutFacturaInput, Prisma.CompraUncheckedUpdateWithoutFacturaInput>
  create: Prisma.XOR<Prisma.CompraCreateWithoutFacturaInput, Prisma.CompraUncheckedCreateWithoutFacturaInput>
  where?: Prisma.CompraWhereInput
}

export type CompraUpdateToOneWithWhereWithoutFacturaInput = {
  where?: Prisma.CompraWhereInput
  data: Prisma.XOR<Prisma.CompraUpdateWithoutFacturaInput, Prisma.CompraUncheckedUpdateWithoutFacturaInput>
}

export type CompraUpdateWithoutFacturaInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedor?: Prisma.ProveedorUpdateOneRequiredWithoutComprasNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutCompraNestedInput
}

export type CompraUncheckedUpdateWithoutFacturaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedorId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutCompraNestedInput
}

export type CompraCreateWithoutProductosXCompraInput = {
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedor: Prisma.ProveedorCreateNestedOneWithoutComprasInput
  factura?: Prisma.FacturaCreateNestedOneWithoutCompraInput
}

export type CompraUncheckedCreateWithoutProductosXCompraInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
  proveedorId: number
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutCompraInput
}

export type CompraCreateOrConnectWithoutProductosXCompraInput = {
  where: Prisma.CompraWhereUniqueInput
  create: Prisma.XOR<Prisma.CompraCreateWithoutProductosXCompraInput, Prisma.CompraUncheckedCreateWithoutProductosXCompraInput>
}

export type CompraUpsertWithoutProductosXCompraInput = {
  update: Prisma.XOR<Prisma.CompraUpdateWithoutProductosXCompraInput, Prisma.CompraUncheckedUpdateWithoutProductosXCompraInput>
  create: Prisma.XOR<Prisma.CompraCreateWithoutProductosXCompraInput, Prisma.CompraUncheckedCreateWithoutProductosXCompraInput>
  where?: Prisma.CompraWhereInput
}

export type CompraUpdateToOneWithWhereWithoutProductosXCompraInput = {
  where?: Prisma.CompraWhereInput
  data: Prisma.XOR<Prisma.CompraUpdateWithoutProductosXCompraInput, Prisma.CompraUncheckedUpdateWithoutProductosXCompraInput>
}

export type CompraUpdateWithoutProductosXCompraInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedor?: Prisma.ProveedorUpdateOneRequiredWithoutComprasNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutCompraNestedInput
}

export type CompraUncheckedUpdateWithoutProductosXCompraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  proveedorId?: Prisma.IntFieldUpdateOperationsInput | number
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutCompraNestedInput
}

export type CompraCreateWithoutProveedorInput = {
  monto: number
  fecha: Date | string
  metodoPago: string
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutCompraInput
  factura?: Prisma.FacturaCreateNestedOneWithoutCompraInput
}

export type CompraUncheckedCreateWithoutProveedorInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutCompraInput
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutCompraInput
}

export type CompraCreateOrConnectWithoutProveedorInput = {
  where: Prisma.CompraWhereUniqueInput
  create: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput>
}

export type CompraCreateManyProveedorInputEnvelope = {
  data: Prisma.CompraCreateManyProveedorInput | Prisma.CompraCreateManyProveedorInput[]
}

export type CompraUpsertWithWhereUniqueWithoutProveedorInput = {
  where: Prisma.CompraWhereUniqueInput
  update: Prisma.XOR<Prisma.CompraUpdateWithoutProveedorInput, Prisma.CompraUncheckedUpdateWithoutProveedorInput>
  create: Prisma.XOR<Prisma.CompraCreateWithoutProveedorInput, Prisma.CompraUncheckedCreateWithoutProveedorInput>
}

export type CompraUpdateWithWhereUniqueWithoutProveedorInput = {
  where: Prisma.CompraWhereUniqueInput
  data: Prisma.XOR<Prisma.CompraUpdateWithoutProveedorInput, Prisma.CompraUncheckedUpdateWithoutProveedorInput>
}

export type CompraUpdateManyWithWhereWithoutProveedorInput = {
  where: Prisma.CompraScalarWhereInput
  data: Prisma.XOR<Prisma.CompraUpdateManyMutationInput, Prisma.CompraUncheckedUpdateManyWithoutProveedorInput>
}

export type CompraScalarWhereInput = {
  AND?: Prisma.CompraScalarWhereInput | Prisma.CompraScalarWhereInput[]
  OR?: Prisma.CompraScalarWhereInput[]
  NOT?: Prisma.CompraScalarWhereInput | Prisma.CompraScalarWhereInput[]
  id?: Prisma.IntFilter<"Compra"> | number
  monto?: Prisma.FloatFilter<"Compra"> | number
  fecha?: Prisma.DateTimeFilter<"Compra"> | Date | string
  metodoPago?: Prisma.StringFilter<"Compra"> | string
  proveedorId?: Prisma.IntFilter<"Compra"> | number
}

export type CompraCreateManyProveedorInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPago: string
}

export type CompraUpdateWithoutProveedorInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutCompraNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutCompraNestedInput
}

export type CompraUncheckedUpdateWithoutProveedorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutCompraNestedInput
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutCompraNestedInput
}

export type CompraUncheckedUpdateManyWithoutProveedorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPago?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type CompraCountOutputType
 */

export type CompraCountOutputType = {
  productosXCompra: number
}

export type CompraCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productosXCompra?: boolean | CompraCountOutputTypeCountProductosXCompraArgs
}

/**
 * CompraCountOutputType without action
 */
export type CompraCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CompraCountOutputType
   */
  select?: Prisma.CompraCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CompraCountOutputType without action
 */
export type CompraCountOutputTypeCountProductosXCompraArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXCompraWhereInput
}


export type CompraSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPago?: boolean
  proveedorId?: boolean
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
  productosXCompra?: boolean | Prisma.Compra$productosXCompraArgs<ExtArgs>
  factura?: boolean | Prisma.Compra$facturaArgs<ExtArgs>
  _count?: boolean | Prisma.CompraCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["compra"]>

export type CompraSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPago?: boolean
  proveedorId?: boolean
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["compra"]>

export type CompraSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPago?: boolean
  proveedorId?: boolean
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["compra"]>

export type CompraSelectScalar = {
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPago?: boolean
  proveedorId?: boolean
}

export type CompraOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "monto" | "fecha" | "metodoPago" | "proveedorId", ExtArgs["result"]["compra"]>
export type CompraInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
  productosXCompra?: boolean | Prisma.Compra$productosXCompraArgs<ExtArgs>
  factura?: boolean | Prisma.Compra$facturaArgs<ExtArgs>
  _count?: boolean | Prisma.CompraCountOutputTypeDefaultArgs<ExtArgs>
}
export type CompraIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
}
export type CompraIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  proveedor?: boolean | Prisma.ProveedorDefaultArgs<ExtArgs>
}

export type $CompraPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Compra"
  objects: {
    proveedor: Prisma.$ProveedorPayload<ExtArgs>
    productosXCompra: Prisma.$ProductoXCompraPayload<ExtArgs>[]
    factura: Prisma.$FacturaPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    monto: number
    fecha: Date
    metodoPago: string
    proveedorId: number
  }, ExtArgs["result"]["compra"]>
  composites: {}
}

export type CompraGetPayload<S extends boolean | null | undefined | CompraDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CompraPayload, S>

export type CompraCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CompraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CompraCountAggregateInputType | true
  }

export interface CompraDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compra'], meta: { name: 'Compra' } }
  /**
   * Find zero or one Compra that matches the filter.
   * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
   * @example
   * // Get one Compra
   * const compra = await prisma.compra.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CompraFindUniqueArgs>(args: Prisma.SelectSubset<T, CompraFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Compra that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
   * @example
   * // Get one Compra
   * const compra = await prisma.compra.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CompraFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Compra that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraFindFirstArgs} args - Arguments to find a Compra
   * @example
   * // Get one Compra
   * const compra = await prisma.compra.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CompraFindFirstArgs>(args?: Prisma.SelectSubset<T, CompraFindFirstArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Compra that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
   * @example
   * // Get one Compra
   * const compra = await prisma.compra.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CompraFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Compras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Compras
   * const compras = await prisma.compra.findMany()
   * 
   * // Get first 10 Compras
   * const compras = await prisma.compra.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CompraFindManyArgs>(args?: Prisma.SelectSubset<T, CompraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Compra.
   * @param {CompraCreateArgs} args - Arguments to create a Compra.
   * @example
   * // Create one Compra
   * const Compra = await prisma.compra.create({
   *   data: {
   *     // ... data to create a Compra
   *   }
   * })
   * 
   */
  create<T extends CompraCreateArgs>(args: Prisma.SelectSubset<T, CompraCreateArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Compras.
   * @param {CompraCreateManyArgs} args - Arguments to create many Compras.
   * @example
   * // Create many Compras
   * const compra = await prisma.compra.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CompraCreateManyArgs>(args?: Prisma.SelectSubset<T, CompraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Compras and returns the data saved in the database.
   * @param {CompraCreateManyAndReturnArgs} args - Arguments to create many Compras.
   * @example
   * // Create many Compras
   * const compra = await prisma.compra.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Compras and only return the `id`
   * const compraWithIdOnly = await prisma.compra.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CompraCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CompraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Compra.
   * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
   * @example
   * // Delete one Compra
   * const Compra = await prisma.compra.delete({
   *   where: {
   *     // ... filter to delete one Compra
   *   }
   * })
   * 
   */
  delete<T extends CompraDeleteArgs>(args: Prisma.SelectSubset<T, CompraDeleteArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Compra.
   * @param {CompraUpdateArgs} args - Arguments to update one Compra.
   * @example
   * // Update one Compra
   * const compra = await prisma.compra.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CompraUpdateArgs>(args: Prisma.SelectSubset<T, CompraUpdateArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Compras.
   * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
   * @example
   * // Delete a few Compras
   * const { count } = await prisma.compra.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CompraDeleteManyArgs>(args?: Prisma.SelectSubset<T, CompraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Compras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Compras
   * const compra = await prisma.compra.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CompraUpdateManyArgs>(args: Prisma.SelectSubset<T, CompraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Compras and returns the data updated in the database.
   * @param {CompraUpdateManyAndReturnArgs} args - Arguments to update many Compras.
   * @example
   * // Update many Compras
   * const compra = await prisma.compra.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Compras and only return the `id`
   * const compraWithIdOnly = await prisma.compra.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CompraUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CompraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Compra.
   * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
   * @example
   * // Update or create a Compra
   * const compra = await prisma.compra.upsert({
   *   create: {
   *     // ... data to create a Compra
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Compra we want to update
   *   }
   * })
   */
  upsert<T extends CompraUpsertArgs>(args: Prisma.SelectSubset<T, CompraUpsertArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Compras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraCountArgs} args - Arguments to filter Compras to count.
   * @example
   * // Count the number of Compras
   * const count = await prisma.compra.count({
   *   where: {
   *     // ... the filter for the Compras we want to count
   *   }
   * })
  **/
  count<T extends CompraCountArgs>(
    args?: Prisma.Subset<T, CompraCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CompraCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Compra.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CompraAggregateArgs>(args: Prisma.Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

  /**
   * Group by Compra.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CompraGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CompraGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CompraGroupByArgs['orderBy'] }
      : { orderBy?: CompraGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Compra model
 */
readonly fields: CompraFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Compra.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CompraClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  proveedor<T extends Prisma.ProveedorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProveedorDefaultArgs<ExtArgs>>): Prisma.Prisma__ProveedorClient<runtime.Types.Result.GetResult<Prisma.$ProveedorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  productosXCompra<T extends Prisma.Compra$productosXCompraArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Compra$productosXCompraArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  factura<T extends Prisma.Compra$facturaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Compra$facturaArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Compra model
 */
export interface CompraFieldRefs {
  readonly id: Prisma.FieldRef<"Compra", 'Int'>
  readonly monto: Prisma.FieldRef<"Compra", 'Float'>
  readonly fecha: Prisma.FieldRef<"Compra", 'DateTime'>
  readonly metodoPago: Prisma.FieldRef<"Compra", 'String'>
  readonly proveedorId: Prisma.FieldRef<"Compra", 'Int'>
}
    

// Custom InputTypes
/**
 * Compra findUnique
 */
export type CompraFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter, which Compra to fetch.
   */
  where: Prisma.CompraWhereUniqueInput
}

/**
 * Compra findUniqueOrThrow
 */
export type CompraFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter, which Compra to fetch.
   */
  where: Prisma.CompraWhereUniqueInput
}

/**
 * Compra findFirst
 */
export type CompraFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter, which Compra to fetch.
   */
  where?: Prisma.CompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Compras to fetch.
   */
  orderBy?: Prisma.CompraOrderByWithRelationInput | Prisma.CompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Compras.
   */
  cursor?: Prisma.CompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Compras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Compras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Compras.
   */
  distinct?: Prisma.CompraScalarFieldEnum | Prisma.CompraScalarFieldEnum[]
}

/**
 * Compra findFirstOrThrow
 */
export type CompraFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter, which Compra to fetch.
   */
  where?: Prisma.CompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Compras to fetch.
   */
  orderBy?: Prisma.CompraOrderByWithRelationInput | Prisma.CompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Compras.
   */
  cursor?: Prisma.CompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Compras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Compras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Compras.
   */
  distinct?: Prisma.CompraScalarFieldEnum | Prisma.CompraScalarFieldEnum[]
}

/**
 * Compra findMany
 */
export type CompraFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter, which Compras to fetch.
   */
  where?: Prisma.CompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Compras to fetch.
   */
  orderBy?: Prisma.CompraOrderByWithRelationInput | Prisma.CompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Compras.
   */
  cursor?: Prisma.CompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Compras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Compras.
   */
  skip?: number
  distinct?: Prisma.CompraScalarFieldEnum | Prisma.CompraScalarFieldEnum[]
}

/**
 * Compra create
 */
export type CompraCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * The data needed to create a Compra.
   */
  data: Prisma.XOR<Prisma.CompraCreateInput, Prisma.CompraUncheckedCreateInput>
}

/**
 * Compra createMany
 */
export type CompraCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Compras.
   */
  data: Prisma.CompraCreateManyInput | Prisma.CompraCreateManyInput[]
}

/**
 * Compra createManyAndReturn
 */
export type CompraCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * The data used to create many Compras.
   */
  data: Prisma.CompraCreateManyInput | Prisma.CompraCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Compra update
 */
export type CompraUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * The data needed to update a Compra.
   */
  data: Prisma.XOR<Prisma.CompraUpdateInput, Prisma.CompraUncheckedUpdateInput>
  /**
   * Choose, which Compra to update.
   */
  where: Prisma.CompraWhereUniqueInput
}

/**
 * Compra updateMany
 */
export type CompraUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Compras.
   */
  data: Prisma.XOR<Prisma.CompraUpdateManyMutationInput, Prisma.CompraUncheckedUpdateManyInput>
  /**
   * Filter which Compras to update
   */
  where?: Prisma.CompraWhereInput
  /**
   * Limit how many Compras to update.
   */
  limit?: number
}

/**
 * Compra updateManyAndReturn
 */
export type CompraUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * The data used to update Compras.
   */
  data: Prisma.XOR<Prisma.CompraUpdateManyMutationInput, Prisma.CompraUncheckedUpdateManyInput>
  /**
   * Filter which Compras to update
   */
  where?: Prisma.CompraWhereInput
  /**
   * Limit how many Compras to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Compra upsert
 */
export type CompraUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * The filter to search for the Compra to update in case it exists.
   */
  where: Prisma.CompraWhereUniqueInput
  /**
   * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
   */
  create: Prisma.XOR<Prisma.CompraCreateInput, Prisma.CompraUncheckedCreateInput>
  /**
   * In case the Compra was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CompraUpdateInput, Prisma.CompraUncheckedUpdateInput>
}

/**
 * Compra delete
 */
export type CompraDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  /**
   * Filter which Compra to delete.
   */
  where: Prisma.CompraWhereUniqueInput
}

/**
 * Compra deleteMany
 */
export type CompraDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Compras to delete
   */
  where?: Prisma.CompraWhereInput
  /**
   * Limit how many Compras to delete.
   */
  limit?: number
}

/**
 * Compra.productosXCompra
 */
export type Compra$productosXCompraArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  where?: Prisma.ProductoXCompraWhereInput
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoXCompraScalarFieldEnum | Prisma.ProductoXCompraScalarFieldEnum[]
}

/**
 * Compra.factura
 */
export type Compra$facturaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  where?: Prisma.FacturaWhereInput
}

/**
 * Compra without action
 */
export type CompraDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
}
