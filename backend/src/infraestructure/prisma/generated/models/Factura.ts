
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Factura` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Factura
 * 
 */
export type FacturaModel = runtime.Types.Result.DefaultSelection<Prisma.$FacturaPayload>

export type AggregateFactura = {
  _count: FacturaCountAggregateOutputType | null
  _avg: FacturaAvgAggregateOutputType | null
  _sum: FacturaSumAggregateOutputType | null
  _min: FacturaMinAggregateOutputType | null
  _max: FacturaMaxAggregateOutputType | null
}

export type FacturaAvgAggregateOutputType = {
  id: number | null
  precioFinal: number | null
  ventaId: number | null
  compraId: number | null
}

export type FacturaSumAggregateOutputType = {
  id: number | null
  precioFinal: number | null
  ventaId: number | null
  compraId: number | null
}

export type FacturaMinAggregateOutputType = {
  id: number | null
  fecha: Date | null
  precioFinal: number | null
  ventaId: number | null
  compraId: number | null
}

export type FacturaMaxAggregateOutputType = {
  id: number | null
  fecha: Date | null
  precioFinal: number | null
  ventaId: number | null
  compraId: number | null
}

export type FacturaCountAggregateOutputType = {
  id: number
  fecha: number
  precioFinal: number
  ventaId: number
  compraId: number
  _all: number
}


export type FacturaAvgAggregateInputType = {
  id?: true
  precioFinal?: true
  ventaId?: true
  compraId?: true
}

export type FacturaSumAggregateInputType = {
  id?: true
  precioFinal?: true
  ventaId?: true
  compraId?: true
}

export type FacturaMinAggregateInputType = {
  id?: true
  fecha?: true
  precioFinal?: true
  ventaId?: true
  compraId?: true
}

export type FacturaMaxAggregateInputType = {
  id?: true
  fecha?: true
  precioFinal?: true
  ventaId?: true
  compraId?: true
}

export type FacturaCountAggregateInputType = {
  id?: true
  fecha?: true
  precioFinal?: true
  ventaId?: true
  compraId?: true
  _all?: true
}

export type FacturaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Factura to aggregate.
   */
  where?: Prisma.FacturaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Facturas to fetch.
   */
  orderBy?: Prisma.FacturaOrderByWithRelationInput | Prisma.FacturaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FacturaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Facturas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Facturas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Facturas
  **/
  _count?: true | FacturaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FacturaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FacturaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FacturaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FacturaMaxAggregateInputType
}

export type GetFacturaAggregateType<T extends FacturaAggregateArgs> = {
      [P in keyof T & keyof AggregateFactura]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFactura[P]>
    : Prisma.GetScalarType<T[P], AggregateFactura[P]>
}




export type FacturaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FacturaWhereInput
  orderBy?: Prisma.FacturaOrderByWithAggregationInput | Prisma.FacturaOrderByWithAggregationInput[]
  by: Prisma.FacturaScalarFieldEnum[] | Prisma.FacturaScalarFieldEnum
  having?: Prisma.FacturaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FacturaCountAggregateInputType | true
  _avg?: FacturaAvgAggregateInputType
  _sum?: FacturaSumAggregateInputType
  _min?: FacturaMinAggregateInputType
  _max?: FacturaMaxAggregateInputType
}

export type FacturaGroupByOutputType = {
  id: number
  fecha: Date
  precioFinal: number
  ventaId: number | null
  compraId: number | null
  _count: FacturaCountAggregateOutputType | null
  _avg: FacturaAvgAggregateOutputType | null
  _sum: FacturaSumAggregateOutputType | null
  _min: FacturaMinAggregateOutputType | null
  _max: FacturaMaxAggregateOutputType | null
}

type GetFacturaGroupByPayload<T extends FacturaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FacturaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FacturaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FacturaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FacturaGroupByOutputType[P]>
      }
    >
  > 



export type FacturaWhereInput = {
  AND?: Prisma.FacturaWhereInput | Prisma.FacturaWhereInput[]
  OR?: Prisma.FacturaWhereInput[]
  NOT?: Prisma.FacturaWhereInput | Prisma.FacturaWhereInput[]
  id?: Prisma.IntFilter<"Factura"> | number
  fecha?: Prisma.DateTimeFilter<"Factura"> | Date | string
  precioFinal?: Prisma.FloatFilter<"Factura"> | number
  ventaId?: Prisma.IntNullableFilter<"Factura"> | number | null
  compraId?: Prisma.IntNullableFilter<"Factura"> | number | null
  venta?: Prisma.XOR<Prisma.VentaNullableScalarRelationFilter, Prisma.VentaWhereInput> | null
  compra?: Prisma.XOR<Prisma.CompraNullableScalarRelationFilter, Prisma.CompraWhereInput> | null
}

export type FacturaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrderInput | Prisma.SortOrder
  compraId?: Prisma.SortOrderInput | Prisma.SortOrder
  venta?: Prisma.VentaOrderByWithRelationInput
  compra?: Prisma.CompraOrderByWithRelationInput
}

export type FacturaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  ventaId?: number
  compraId?: number
  AND?: Prisma.FacturaWhereInput | Prisma.FacturaWhereInput[]
  OR?: Prisma.FacturaWhereInput[]
  NOT?: Prisma.FacturaWhereInput | Prisma.FacturaWhereInput[]
  fecha?: Prisma.DateTimeFilter<"Factura"> | Date | string
  precioFinal?: Prisma.FloatFilter<"Factura"> | number
  venta?: Prisma.XOR<Prisma.VentaNullableScalarRelationFilter, Prisma.VentaWhereInput> | null
  compra?: Prisma.XOR<Prisma.CompraNullableScalarRelationFilter, Prisma.CompraWhereInput> | null
}, "id" | "ventaId" | "compraId">

export type FacturaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrderInput | Prisma.SortOrder
  compraId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.FacturaCountOrderByAggregateInput
  _avg?: Prisma.FacturaAvgOrderByAggregateInput
  _max?: Prisma.FacturaMaxOrderByAggregateInput
  _min?: Prisma.FacturaMinOrderByAggregateInput
  _sum?: Prisma.FacturaSumOrderByAggregateInput
}

export type FacturaScalarWhereWithAggregatesInput = {
  AND?: Prisma.FacturaScalarWhereWithAggregatesInput | Prisma.FacturaScalarWhereWithAggregatesInput[]
  OR?: Prisma.FacturaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FacturaScalarWhereWithAggregatesInput | Prisma.FacturaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Factura"> | number
  fecha?: Prisma.DateTimeWithAggregatesFilter<"Factura"> | Date | string
  precioFinal?: Prisma.FloatWithAggregatesFilter<"Factura"> | number
  ventaId?: Prisma.IntNullableWithAggregatesFilter<"Factura"> | number | null
  compraId?: Prisma.IntNullableWithAggregatesFilter<"Factura"> | number | null
}

export type FacturaCreateInput = {
  fecha: Date | string
  precioFinal: number
  venta?: Prisma.VentaCreateNestedOneWithoutFacturaInput
  compra?: Prisma.CompraCreateNestedOneWithoutFacturaInput
}

export type FacturaUncheckedCreateInput = {
  id?: number
  fecha: Date | string
  precioFinal: number
  ventaId?: number | null
  compraId?: number | null
}

export type FacturaUpdateInput = {
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  venta?: Prisma.VentaUpdateOneWithoutFacturaNestedInput
  compra?: Prisma.CompraUpdateOneWithoutFacturaNestedInput
}

export type FacturaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  ventaId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  compraId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type FacturaCreateManyInput = {
  id?: number
  fecha: Date | string
  precioFinal: number
  ventaId?: number | null
  compraId?: number | null
}

export type FacturaUpdateManyMutationInput = {
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type FacturaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  ventaId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  compraId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type FacturaNullableScalarRelationFilter = {
  is?: Prisma.FacturaWhereInput | null
  isNot?: Prisma.FacturaWhereInput | null
}

export type FacturaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
}

export type FacturaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
}

export type FacturaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
}

export type FacturaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
}

export type FacturaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  precioFinal?: Prisma.SortOrder
  ventaId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
}

export type FacturaCreateNestedOneWithoutCompraInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutCompraInput
  connect?: Prisma.FacturaWhereUniqueInput
}

export type FacturaUncheckedCreateNestedOneWithoutCompraInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutCompraInput
  connect?: Prisma.FacturaWhereUniqueInput
}

export type FacturaUpdateOneWithoutCompraNestedInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutCompraInput
  upsert?: Prisma.FacturaUpsertWithoutCompraInput
  disconnect?: Prisma.FacturaWhereInput | boolean
  delete?: Prisma.FacturaWhereInput | boolean
  connect?: Prisma.FacturaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FacturaUpdateToOneWithWhereWithoutCompraInput, Prisma.FacturaUpdateWithoutCompraInput>, Prisma.FacturaUncheckedUpdateWithoutCompraInput>
}

export type FacturaUncheckedUpdateOneWithoutCompraNestedInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutCompraInput
  upsert?: Prisma.FacturaUpsertWithoutCompraInput
  disconnect?: Prisma.FacturaWhereInput | boolean
  delete?: Prisma.FacturaWhereInput | boolean
  connect?: Prisma.FacturaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FacturaUpdateToOneWithWhereWithoutCompraInput, Prisma.FacturaUpdateWithoutCompraInput>, Prisma.FacturaUncheckedUpdateWithoutCompraInput>
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FacturaCreateNestedOneWithoutVentaInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutVentaInput
  connect?: Prisma.FacturaWhereUniqueInput
}

export type FacturaUncheckedCreateNestedOneWithoutVentaInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutVentaInput
  connect?: Prisma.FacturaWhereUniqueInput
}

export type FacturaUpdateOneWithoutVentaNestedInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutVentaInput
  upsert?: Prisma.FacturaUpsertWithoutVentaInput
  disconnect?: Prisma.FacturaWhereInput | boolean
  delete?: Prisma.FacturaWhereInput | boolean
  connect?: Prisma.FacturaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FacturaUpdateToOneWithWhereWithoutVentaInput, Prisma.FacturaUpdateWithoutVentaInput>, Prisma.FacturaUncheckedUpdateWithoutVentaInput>
}

export type FacturaUncheckedUpdateOneWithoutVentaNestedInput = {
  create?: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
  connectOrCreate?: Prisma.FacturaCreateOrConnectWithoutVentaInput
  upsert?: Prisma.FacturaUpsertWithoutVentaInput
  disconnect?: Prisma.FacturaWhereInput | boolean
  delete?: Prisma.FacturaWhereInput | boolean
  connect?: Prisma.FacturaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.FacturaUpdateToOneWithWhereWithoutVentaInput, Prisma.FacturaUpdateWithoutVentaInput>, Prisma.FacturaUncheckedUpdateWithoutVentaInput>
}

export type FacturaCreateWithoutCompraInput = {
  fecha: Date | string
  precioFinal: number
  venta?: Prisma.VentaCreateNestedOneWithoutFacturaInput
}

export type FacturaUncheckedCreateWithoutCompraInput = {
  id?: number
  fecha: Date | string
  precioFinal: number
  ventaId?: number | null
}

export type FacturaCreateOrConnectWithoutCompraInput = {
  where: Prisma.FacturaWhereUniqueInput
  create: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
}

export type FacturaUpsertWithoutCompraInput = {
  update: Prisma.XOR<Prisma.FacturaUpdateWithoutCompraInput, Prisma.FacturaUncheckedUpdateWithoutCompraInput>
  create: Prisma.XOR<Prisma.FacturaCreateWithoutCompraInput, Prisma.FacturaUncheckedCreateWithoutCompraInput>
  where?: Prisma.FacturaWhereInput
}

export type FacturaUpdateToOneWithWhereWithoutCompraInput = {
  where?: Prisma.FacturaWhereInput
  data: Prisma.XOR<Prisma.FacturaUpdateWithoutCompraInput, Prisma.FacturaUncheckedUpdateWithoutCompraInput>
}

export type FacturaUpdateWithoutCompraInput = {
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  venta?: Prisma.VentaUpdateOneWithoutFacturaNestedInput
}

export type FacturaUncheckedUpdateWithoutCompraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  ventaId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type FacturaCreateWithoutVentaInput = {
  fecha: Date | string
  precioFinal: number
  compra?: Prisma.CompraCreateNestedOneWithoutFacturaInput
}

export type FacturaUncheckedCreateWithoutVentaInput = {
  id?: number
  fecha: Date | string
  precioFinal: number
  compraId?: number | null
}

export type FacturaCreateOrConnectWithoutVentaInput = {
  where: Prisma.FacturaWhereUniqueInput
  create: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
}

export type FacturaUpsertWithoutVentaInput = {
  update: Prisma.XOR<Prisma.FacturaUpdateWithoutVentaInput, Prisma.FacturaUncheckedUpdateWithoutVentaInput>
  create: Prisma.XOR<Prisma.FacturaCreateWithoutVentaInput, Prisma.FacturaUncheckedCreateWithoutVentaInput>
  where?: Prisma.FacturaWhereInput
}

export type FacturaUpdateToOneWithWhereWithoutVentaInput = {
  where?: Prisma.FacturaWhereInput
  data: Prisma.XOR<Prisma.FacturaUpdateWithoutVentaInput, Prisma.FacturaUncheckedUpdateWithoutVentaInput>
}

export type FacturaUpdateWithoutVentaInput = {
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  compra?: Prisma.CompraUpdateOneWithoutFacturaNestedInput
}

export type FacturaUncheckedUpdateWithoutVentaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  precioFinal?: Prisma.FloatFieldUpdateOperationsInput | number
  compraId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type FacturaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fecha?: boolean
  precioFinal?: boolean
  ventaId?: boolean
  compraId?: boolean
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}, ExtArgs["result"]["factura"]>

export type FacturaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fecha?: boolean
  precioFinal?: boolean
  ventaId?: boolean
  compraId?: boolean
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}, ExtArgs["result"]["factura"]>

export type FacturaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fecha?: boolean
  precioFinal?: boolean
  ventaId?: boolean
  compraId?: boolean
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}, ExtArgs["result"]["factura"]>

export type FacturaSelectScalar = {
  id?: boolean
  fecha?: boolean
  precioFinal?: boolean
  ventaId?: boolean
  compraId?: boolean
}

export type FacturaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fecha" | "precioFinal" | "ventaId" | "compraId", ExtArgs["result"]["factura"]>
export type FacturaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}
export type FacturaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}
export type FacturaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  venta?: boolean | Prisma.Factura$ventaArgs<ExtArgs>
  compra?: boolean | Prisma.Factura$compraArgs<ExtArgs>
}

export type $FacturaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Factura"
  objects: {
    venta: Prisma.$VentaPayload<ExtArgs> | null
    compra: Prisma.$CompraPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    fecha: Date
    precioFinal: number
    ventaId: number | null
    compraId: number | null
  }, ExtArgs["result"]["factura"]>
  composites: {}
}

export type FacturaGetPayload<S extends boolean | null | undefined | FacturaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FacturaPayload, S>

export type FacturaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FacturaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FacturaCountAggregateInputType | true
  }

export interface FacturaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Factura'], meta: { name: 'Factura' } }
  /**
   * Find zero or one Factura that matches the filter.
   * @param {FacturaFindUniqueArgs} args - Arguments to find a Factura
   * @example
   * // Get one Factura
   * const factura = await prisma.factura.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FacturaFindUniqueArgs>(args: Prisma.SelectSubset<T, FacturaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Factura that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FacturaFindUniqueOrThrowArgs} args - Arguments to find a Factura
   * @example
   * // Get one Factura
   * const factura = await prisma.factura.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FacturaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FacturaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Factura that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaFindFirstArgs} args - Arguments to find a Factura
   * @example
   * // Get one Factura
   * const factura = await prisma.factura.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FacturaFindFirstArgs>(args?: Prisma.SelectSubset<T, FacturaFindFirstArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Factura that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaFindFirstOrThrowArgs} args - Arguments to find a Factura
   * @example
   * // Get one Factura
   * const factura = await prisma.factura.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FacturaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FacturaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Facturas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Facturas
   * const facturas = await prisma.factura.findMany()
   * 
   * // Get first 10 Facturas
   * const facturas = await prisma.factura.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const facturaWithIdOnly = await prisma.factura.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FacturaFindManyArgs>(args?: Prisma.SelectSubset<T, FacturaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Factura.
   * @param {FacturaCreateArgs} args - Arguments to create a Factura.
   * @example
   * // Create one Factura
   * const Factura = await prisma.factura.create({
   *   data: {
   *     // ... data to create a Factura
   *   }
   * })
   * 
   */
  create<T extends FacturaCreateArgs>(args: Prisma.SelectSubset<T, FacturaCreateArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Facturas.
   * @param {FacturaCreateManyArgs} args - Arguments to create many Facturas.
   * @example
   * // Create many Facturas
   * const factura = await prisma.factura.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FacturaCreateManyArgs>(args?: Prisma.SelectSubset<T, FacturaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Facturas and returns the data saved in the database.
   * @param {FacturaCreateManyAndReturnArgs} args - Arguments to create many Facturas.
   * @example
   * // Create many Facturas
   * const factura = await prisma.factura.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Facturas and only return the `id`
   * const facturaWithIdOnly = await prisma.factura.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FacturaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FacturaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Factura.
   * @param {FacturaDeleteArgs} args - Arguments to delete one Factura.
   * @example
   * // Delete one Factura
   * const Factura = await prisma.factura.delete({
   *   where: {
   *     // ... filter to delete one Factura
   *   }
   * })
   * 
   */
  delete<T extends FacturaDeleteArgs>(args: Prisma.SelectSubset<T, FacturaDeleteArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Factura.
   * @param {FacturaUpdateArgs} args - Arguments to update one Factura.
   * @example
   * // Update one Factura
   * const factura = await prisma.factura.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FacturaUpdateArgs>(args: Prisma.SelectSubset<T, FacturaUpdateArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Facturas.
   * @param {FacturaDeleteManyArgs} args - Arguments to filter Facturas to delete.
   * @example
   * // Delete a few Facturas
   * const { count } = await prisma.factura.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FacturaDeleteManyArgs>(args?: Prisma.SelectSubset<T, FacturaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Facturas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Facturas
   * const factura = await prisma.factura.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FacturaUpdateManyArgs>(args: Prisma.SelectSubset<T, FacturaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Facturas and returns the data updated in the database.
   * @param {FacturaUpdateManyAndReturnArgs} args - Arguments to update many Facturas.
   * @example
   * // Update many Facturas
   * const factura = await prisma.factura.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Facturas and only return the `id`
   * const facturaWithIdOnly = await prisma.factura.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FacturaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FacturaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Factura.
   * @param {FacturaUpsertArgs} args - Arguments to update or create a Factura.
   * @example
   * // Update or create a Factura
   * const factura = await prisma.factura.upsert({
   *   create: {
   *     // ... data to create a Factura
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Factura we want to update
   *   }
   * })
   */
  upsert<T extends FacturaUpsertArgs>(args: Prisma.SelectSubset<T, FacturaUpsertArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Facturas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaCountArgs} args - Arguments to filter Facturas to count.
   * @example
   * // Count the number of Facturas
   * const count = await prisma.factura.count({
   *   where: {
   *     // ... the filter for the Facturas we want to count
   *   }
   * })
  **/
  count<T extends FacturaCountArgs>(
    args?: Prisma.Subset<T, FacturaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FacturaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Factura.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FacturaAggregateArgs>(args: Prisma.Subset<T, FacturaAggregateArgs>): Prisma.PrismaPromise<GetFacturaAggregateType<T>>

  /**
   * Group by Factura.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FacturaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FacturaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FacturaGroupByArgs['orderBy'] }
      : { orderBy?: FacturaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FacturaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacturaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Factura model
 */
readonly fields: FacturaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Factura.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FacturaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  venta<T extends Prisma.Factura$ventaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Factura$ventaArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  compra<T extends Prisma.Factura$compraArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Factura$compraArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Factura model
 */
export interface FacturaFieldRefs {
  readonly id: Prisma.FieldRef<"Factura", 'Int'>
  readonly fecha: Prisma.FieldRef<"Factura", 'DateTime'>
  readonly precioFinal: Prisma.FieldRef<"Factura", 'Float'>
  readonly ventaId: Prisma.FieldRef<"Factura", 'Int'>
  readonly compraId: Prisma.FieldRef<"Factura", 'Int'>
}
    

// Custom InputTypes
/**
 * Factura findUnique
 */
export type FacturaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter, which Factura to fetch.
   */
  where: Prisma.FacturaWhereUniqueInput
}

/**
 * Factura findUniqueOrThrow
 */
export type FacturaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter, which Factura to fetch.
   */
  where: Prisma.FacturaWhereUniqueInput
}

/**
 * Factura findFirst
 */
export type FacturaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter, which Factura to fetch.
   */
  where?: Prisma.FacturaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Facturas to fetch.
   */
  orderBy?: Prisma.FacturaOrderByWithRelationInput | Prisma.FacturaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Facturas.
   */
  cursor?: Prisma.FacturaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Facturas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Facturas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Facturas.
   */
  distinct?: Prisma.FacturaScalarFieldEnum | Prisma.FacturaScalarFieldEnum[]
}

/**
 * Factura findFirstOrThrow
 */
export type FacturaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter, which Factura to fetch.
   */
  where?: Prisma.FacturaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Facturas to fetch.
   */
  orderBy?: Prisma.FacturaOrderByWithRelationInput | Prisma.FacturaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Facturas.
   */
  cursor?: Prisma.FacturaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Facturas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Facturas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Facturas.
   */
  distinct?: Prisma.FacturaScalarFieldEnum | Prisma.FacturaScalarFieldEnum[]
}

/**
 * Factura findMany
 */
export type FacturaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter, which Facturas to fetch.
   */
  where?: Prisma.FacturaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Facturas to fetch.
   */
  orderBy?: Prisma.FacturaOrderByWithRelationInput | Prisma.FacturaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Facturas.
   */
  cursor?: Prisma.FacturaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Facturas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Facturas.
   */
  skip?: number
  distinct?: Prisma.FacturaScalarFieldEnum | Prisma.FacturaScalarFieldEnum[]
}

/**
 * Factura create
 */
export type FacturaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * The data needed to create a Factura.
   */
  data: Prisma.XOR<Prisma.FacturaCreateInput, Prisma.FacturaUncheckedCreateInput>
}

/**
 * Factura createMany
 */
export type FacturaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Facturas.
   */
  data: Prisma.FacturaCreateManyInput | Prisma.FacturaCreateManyInput[]
}

/**
 * Factura createManyAndReturn
 */
export type FacturaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * The data used to create many Facturas.
   */
  data: Prisma.FacturaCreateManyInput | Prisma.FacturaCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Factura update
 */
export type FacturaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * The data needed to update a Factura.
   */
  data: Prisma.XOR<Prisma.FacturaUpdateInput, Prisma.FacturaUncheckedUpdateInput>
  /**
   * Choose, which Factura to update.
   */
  where: Prisma.FacturaWhereUniqueInput
}

/**
 * Factura updateMany
 */
export type FacturaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Facturas.
   */
  data: Prisma.XOR<Prisma.FacturaUpdateManyMutationInput, Prisma.FacturaUncheckedUpdateManyInput>
  /**
   * Filter which Facturas to update
   */
  where?: Prisma.FacturaWhereInput
  /**
   * Limit how many Facturas to update.
   */
  limit?: number
}

/**
 * Factura updateManyAndReturn
 */
export type FacturaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * The data used to update Facturas.
   */
  data: Prisma.XOR<Prisma.FacturaUpdateManyMutationInput, Prisma.FacturaUncheckedUpdateManyInput>
  /**
   * Filter which Facturas to update
   */
  where?: Prisma.FacturaWhereInput
  /**
   * Limit how many Facturas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Factura upsert
 */
export type FacturaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * The filter to search for the Factura to update in case it exists.
   */
  where: Prisma.FacturaWhereUniqueInput
  /**
   * In case the Factura found by the `where` argument doesn't exist, create a new Factura with this data.
   */
  create: Prisma.XOR<Prisma.FacturaCreateInput, Prisma.FacturaUncheckedCreateInput>
  /**
   * In case the Factura was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FacturaUpdateInput, Prisma.FacturaUncheckedUpdateInput>
}

/**
 * Factura delete
 */
export type FacturaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  /**
   * Filter which Factura to delete.
   */
  where: Prisma.FacturaWhereUniqueInput
}

/**
 * Factura deleteMany
 */
export type FacturaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Facturas to delete
   */
  where?: Prisma.FacturaWhereInput
  /**
   * Limit how many Facturas to delete.
   */
  limit?: number
}

/**
 * Factura.venta
 */
export type Factura$ventaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  where?: Prisma.VentaWhereInput
}

/**
 * Factura.compra
 */
export type Factura$compraArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Compra
   */
  select?: Prisma.CompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Compra
   */
  omit?: Prisma.CompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompraInclude<ExtArgs> | null
  where?: Prisma.CompraWhereInput
}

/**
 * Factura without action
 */
export type FacturaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
}
