
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProductoXCompra` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProductoXCompra
 * 
 */
export type ProductoXCompraModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductoXCompraPayload>

export type AggregateProductoXCompra = {
  _count: ProductoXCompraCountAggregateOutputType | null
  _avg: ProductoXCompraAvgAggregateOutputType | null
  _sum: ProductoXCompraSumAggregateOutputType | null
  _min: ProductoXCompraMinAggregateOutputType | null
  _max: ProductoXCompraMaxAggregateOutputType | null
}

export type ProductoXCompraAvgAggregateOutputType = {
  id: number | null
  productoId: number | null
  compraId: number | null
  cantidad: number | null
}

export type ProductoXCompraSumAggregateOutputType = {
  id: number | null
  productoId: number | null
  compraId: number | null
  cantidad: number | null
}

export type ProductoXCompraMinAggregateOutputType = {
  id: number | null
  productoId: number | null
  compraId: number | null
  cantidad: number | null
}

export type ProductoXCompraMaxAggregateOutputType = {
  id: number | null
  productoId: number | null
  compraId: number | null
  cantidad: number | null
}

export type ProductoXCompraCountAggregateOutputType = {
  id: number
  productoId: number
  compraId: number
  cantidad: number
  _all: number
}


export type ProductoXCompraAvgAggregateInputType = {
  id?: true
  productoId?: true
  compraId?: true
  cantidad?: true
}

export type ProductoXCompraSumAggregateInputType = {
  id?: true
  productoId?: true
  compraId?: true
  cantidad?: true
}

export type ProductoXCompraMinAggregateInputType = {
  id?: true
  productoId?: true
  compraId?: true
  cantidad?: true
}

export type ProductoXCompraMaxAggregateInputType = {
  id?: true
  productoId?: true
  compraId?: true
  cantidad?: true
}

export type ProductoXCompraCountAggregateInputType = {
  id?: true
  productoId?: true
  compraId?: true
  cantidad?: true
  _all?: true
}

export type ProductoXCompraAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductoXCompra to aggregate.
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXCompras to fetch.
   */
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXCompras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXCompras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductoXCompras
  **/
  _count?: true | ProductoXCompraCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductoXCompraAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductoXCompraSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductoXCompraMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductoXCompraMaxAggregateInputType
}

export type GetProductoXCompraAggregateType<T extends ProductoXCompraAggregateArgs> = {
      [P in keyof T & keyof AggregateProductoXCompra]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductoXCompra[P]>
    : Prisma.GetScalarType<T[P], AggregateProductoXCompra[P]>
}




export type ProductoXCompraGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXCompraWhereInput
  orderBy?: Prisma.ProductoXCompraOrderByWithAggregationInput | Prisma.ProductoXCompraOrderByWithAggregationInput[]
  by: Prisma.ProductoXCompraScalarFieldEnum[] | Prisma.ProductoXCompraScalarFieldEnum
  having?: Prisma.ProductoXCompraScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductoXCompraCountAggregateInputType | true
  _avg?: ProductoXCompraAvgAggregateInputType
  _sum?: ProductoXCompraSumAggregateInputType
  _min?: ProductoXCompraMinAggregateInputType
  _max?: ProductoXCompraMaxAggregateInputType
}

export type ProductoXCompraGroupByOutputType = {
  id: number
  productoId: number
  compraId: number
  cantidad: number
  _count: ProductoXCompraCountAggregateOutputType | null
  _avg: ProductoXCompraAvgAggregateOutputType | null
  _sum: ProductoXCompraSumAggregateOutputType | null
  _min: ProductoXCompraMinAggregateOutputType | null
  _max: ProductoXCompraMaxAggregateOutputType | null
}

type GetProductoXCompraGroupByPayload<T extends ProductoXCompraGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductoXCompraGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductoXCompraGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductoXCompraGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductoXCompraGroupByOutputType[P]>
      }
    >
  > 



export type ProductoXCompraWhereInput = {
  AND?: Prisma.ProductoXCompraWhereInput | Prisma.ProductoXCompraWhereInput[]
  OR?: Prisma.ProductoXCompraWhereInput[]
  NOT?: Prisma.ProductoXCompraWhereInput | Prisma.ProductoXCompraWhereInput[]
  id?: Prisma.IntFilter<"ProductoXCompra"> | number
  productoId?: Prisma.IntFilter<"ProductoXCompra"> | number
  compraId?: Prisma.IntFilter<"ProductoXCompra"> | number
  cantidad?: Prisma.IntFilter<"ProductoXCompra"> | number
  producto?: Prisma.XOR<Prisma.ProductoScalarRelationFilter, Prisma.ProductoWhereInput>
  compra?: Prisma.XOR<Prisma.CompraScalarRelationFilter, Prisma.CompraWhereInput>
}

export type ProductoXCompraOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
  producto?: Prisma.ProductoOrderByWithRelationInput
  compra?: Prisma.CompraOrderByWithRelationInput
}

export type ProductoXCompraWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ProductoXCompraWhereInput | Prisma.ProductoXCompraWhereInput[]
  OR?: Prisma.ProductoXCompraWhereInput[]
  NOT?: Prisma.ProductoXCompraWhereInput | Prisma.ProductoXCompraWhereInput[]
  productoId?: Prisma.IntFilter<"ProductoXCompra"> | number
  compraId?: Prisma.IntFilter<"ProductoXCompra"> | number
  cantidad?: Prisma.IntFilter<"ProductoXCompra"> | number
  producto?: Prisma.XOR<Prisma.ProductoScalarRelationFilter, Prisma.ProductoWhereInput>
  compra?: Prisma.XOR<Prisma.CompraScalarRelationFilter, Prisma.CompraWhereInput>
}, "id">

export type ProductoXCompraOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
  _count?: Prisma.ProductoXCompraCountOrderByAggregateInput
  _avg?: Prisma.ProductoXCompraAvgOrderByAggregateInput
  _max?: Prisma.ProductoXCompraMaxOrderByAggregateInput
  _min?: Prisma.ProductoXCompraMinOrderByAggregateInput
  _sum?: Prisma.ProductoXCompraSumOrderByAggregateInput
}

export type ProductoXCompraScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductoXCompraScalarWhereWithAggregatesInput | Prisma.ProductoXCompraScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductoXCompraScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductoXCompraScalarWhereWithAggregatesInput | Prisma.ProductoXCompraScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ProductoXCompra"> | number
  productoId?: Prisma.IntWithAggregatesFilter<"ProductoXCompra"> | number
  compraId?: Prisma.IntWithAggregatesFilter<"ProductoXCompra"> | number
  cantidad?: Prisma.IntWithAggregatesFilter<"ProductoXCompra"> | number
}

export type ProductoXCompraCreateInput = {
  cantidad: number
  producto: Prisma.ProductoCreateNestedOneWithoutProductosXCompraInput
  compra: Prisma.CompraCreateNestedOneWithoutProductosXCompraInput
}

export type ProductoXCompraUncheckedCreateInput = {
  id?: number
  productoId: number
  compraId: number
  cantidad: number
}

export type ProductoXCompraUpdateInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  producto?: Prisma.ProductoUpdateOneRequiredWithoutProductosXCompraNestedInput
  compra?: Prisma.CompraUpdateOneRequiredWithoutProductosXCompraNestedInput
}

export type ProductoXCompraUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  compraId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraCreateManyInput = {
  id?: number
  productoId: number
  compraId: number
  cantidad: number
}

export type ProductoXCompraUpdateManyMutationInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  compraId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraListRelationFilter = {
  every?: Prisma.ProductoXCompraWhereInput
  some?: Prisma.ProductoXCompraWhereInput
  none?: Prisma.ProductoXCompraWhereInput
}

export type ProductoXCompraOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductoXCompraCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXCompraAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXCompraMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXCompraMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXCompraSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productoId?: Prisma.SortOrder
  compraId?: Prisma.SortOrder
  cantidad?: Prisma.SortOrder
}

export type ProductoXCompraCreateNestedManyWithoutCompraInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput> | Prisma.ProductoXCompraCreateWithoutCompraInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput | Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput[]
  createMany?: Prisma.ProductoXCompraCreateManyCompraInputEnvelope
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
}

export type ProductoXCompraUncheckedCreateNestedManyWithoutCompraInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput> | Prisma.ProductoXCompraCreateWithoutCompraInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput | Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput[]
  createMany?: Prisma.ProductoXCompraCreateManyCompraInputEnvelope
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
}

export type ProductoXCompraUpdateManyWithoutCompraNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput> | Prisma.ProductoXCompraCreateWithoutCompraInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput | Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput[]
  upsert?: Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutCompraInput | Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutCompraInput[]
  createMany?: Prisma.ProductoXCompraCreateManyCompraInputEnvelope
  set?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  disconnect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  delete?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  update?: Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutCompraInput | Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutCompraInput[]
  updateMany?: Prisma.ProductoXCompraUpdateManyWithWhereWithoutCompraInput | Prisma.ProductoXCompraUpdateManyWithWhereWithoutCompraInput[]
  deleteMany?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
}

export type ProductoXCompraUncheckedUpdateManyWithoutCompraNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput> | Prisma.ProductoXCompraCreateWithoutCompraInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput | Prisma.ProductoXCompraCreateOrConnectWithoutCompraInput[]
  upsert?: Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutCompraInput | Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutCompraInput[]
  createMany?: Prisma.ProductoXCompraCreateManyCompraInputEnvelope
  set?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  disconnect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  delete?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  update?: Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutCompraInput | Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutCompraInput[]
  updateMany?: Prisma.ProductoXCompraUpdateManyWithWhereWithoutCompraInput | Prisma.ProductoXCompraUpdateManyWithWhereWithoutCompraInput[]
  deleteMany?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
}

export type ProductoXCompraCreateNestedManyWithoutProductoInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput> | Prisma.ProductoXCompraCreateWithoutProductoInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput | Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput[]
  createMany?: Prisma.ProductoXCompraCreateManyProductoInputEnvelope
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
}

export type ProductoXCompraUncheckedCreateNestedManyWithoutProductoInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput> | Prisma.ProductoXCompraCreateWithoutProductoInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput | Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput[]
  createMany?: Prisma.ProductoXCompraCreateManyProductoInputEnvelope
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
}

export type ProductoXCompraUpdateManyWithoutProductoNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput> | Prisma.ProductoXCompraCreateWithoutProductoInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput | Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput[]
  upsert?: Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutProductoInput | Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutProductoInput[]
  createMany?: Prisma.ProductoXCompraCreateManyProductoInputEnvelope
  set?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  disconnect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  delete?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  update?: Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutProductoInput | Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutProductoInput[]
  updateMany?: Prisma.ProductoXCompraUpdateManyWithWhereWithoutProductoInput | Prisma.ProductoXCompraUpdateManyWithWhereWithoutProductoInput[]
  deleteMany?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
}

export type ProductoXCompraUncheckedUpdateManyWithoutProductoNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput> | Prisma.ProductoXCompraCreateWithoutProductoInput[] | Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput[]
  connectOrCreate?: Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput | Prisma.ProductoXCompraCreateOrConnectWithoutProductoInput[]
  upsert?: Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutProductoInput | Prisma.ProductoXCompraUpsertWithWhereUniqueWithoutProductoInput[]
  createMany?: Prisma.ProductoXCompraCreateManyProductoInputEnvelope
  set?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  disconnect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  delete?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  connect?: Prisma.ProductoXCompraWhereUniqueInput | Prisma.ProductoXCompraWhereUniqueInput[]
  update?: Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutProductoInput | Prisma.ProductoXCompraUpdateWithWhereUniqueWithoutProductoInput[]
  updateMany?: Prisma.ProductoXCompraUpdateManyWithWhereWithoutProductoInput | Prisma.ProductoXCompraUpdateManyWithWhereWithoutProductoInput[]
  deleteMany?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
}

export type ProductoXCompraCreateWithoutCompraInput = {
  cantidad: number
  producto: Prisma.ProductoCreateNestedOneWithoutProductosXCompraInput
}

export type ProductoXCompraUncheckedCreateWithoutCompraInput = {
  id?: number
  productoId: number
  cantidad: number
}

export type ProductoXCompraCreateOrConnectWithoutCompraInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput>
}

export type ProductoXCompraCreateManyCompraInputEnvelope = {
  data: Prisma.ProductoXCompraCreateManyCompraInput | Prisma.ProductoXCompraCreateManyCompraInput[]
}

export type ProductoXCompraUpsertWithWhereUniqueWithoutCompraInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoXCompraUpdateWithoutCompraInput, Prisma.ProductoXCompraUncheckedUpdateWithoutCompraInput>
  create: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutCompraInput, Prisma.ProductoXCompraUncheckedCreateWithoutCompraInput>
}

export type ProductoXCompraUpdateWithWhereUniqueWithoutCompraInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateWithoutCompraInput, Prisma.ProductoXCompraUncheckedUpdateWithoutCompraInput>
}

export type ProductoXCompraUpdateManyWithWhereWithoutCompraInput = {
  where: Prisma.ProductoXCompraScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateManyMutationInput, Prisma.ProductoXCompraUncheckedUpdateManyWithoutCompraInput>
}

export type ProductoXCompraScalarWhereInput = {
  AND?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
  OR?: Prisma.ProductoXCompraScalarWhereInput[]
  NOT?: Prisma.ProductoXCompraScalarWhereInput | Prisma.ProductoXCompraScalarWhereInput[]
  id?: Prisma.IntFilter<"ProductoXCompra"> | number
  productoId?: Prisma.IntFilter<"ProductoXCompra"> | number
  compraId?: Prisma.IntFilter<"ProductoXCompra"> | number
  cantidad?: Prisma.IntFilter<"ProductoXCompra"> | number
}

export type ProductoXCompraCreateWithoutProductoInput = {
  cantidad: number
  compra: Prisma.CompraCreateNestedOneWithoutProductosXCompraInput
}

export type ProductoXCompraUncheckedCreateWithoutProductoInput = {
  id?: number
  compraId: number
  cantidad: number
}

export type ProductoXCompraCreateOrConnectWithoutProductoInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput>
}

export type ProductoXCompraCreateManyProductoInputEnvelope = {
  data: Prisma.ProductoXCompraCreateManyProductoInput | Prisma.ProductoXCompraCreateManyProductoInput[]
}

export type ProductoXCompraUpsertWithWhereUniqueWithoutProductoInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoXCompraUpdateWithoutProductoInput, Prisma.ProductoXCompraUncheckedUpdateWithoutProductoInput>
  create: Prisma.XOR<Prisma.ProductoXCompraCreateWithoutProductoInput, Prisma.ProductoXCompraUncheckedCreateWithoutProductoInput>
}

export type ProductoXCompraUpdateWithWhereUniqueWithoutProductoInput = {
  where: Prisma.ProductoXCompraWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateWithoutProductoInput, Prisma.ProductoXCompraUncheckedUpdateWithoutProductoInput>
}

export type ProductoXCompraUpdateManyWithWhereWithoutProductoInput = {
  where: Prisma.ProductoXCompraScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateManyMutationInput, Prisma.ProductoXCompraUncheckedUpdateManyWithoutProductoInput>
}

export type ProductoXCompraCreateManyCompraInput = {
  id?: number
  productoId: number
  cantidad: number
}

export type ProductoXCompraUpdateWithoutCompraInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  producto?: Prisma.ProductoUpdateOneRequiredWithoutProductosXCompraNestedInput
}

export type ProductoXCompraUncheckedUpdateWithoutCompraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraUncheckedUpdateManyWithoutCompraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productoId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraCreateManyProductoInput = {
  id?: number
  compraId: number
  cantidad: number
}

export type ProductoXCompraUpdateWithoutProductoInput = {
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
  compra?: Prisma.CompraUpdateOneRequiredWithoutProductosXCompraNestedInput
}

export type ProductoXCompraUncheckedUpdateWithoutProductoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  compraId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoXCompraUncheckedUpdateManyWithoutProductoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  compraId?: Prisma.IntFieldUpdateOperationsInput | number
  cantidad?: Prisma.IntFieldUpdateOperationsInput | number
}



export type ProductoXCompraSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  compraId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXCompra"]>

export type ProductoXCompraSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  compraId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXCompra"]>

export type ProductoXCompraSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productoId?: boolean
  compraId?: boolean
  cantidad?: boolean
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productoXCompra"]>

export type ProductoXCompraSelectScalar = {
  id?: boolean
  productoId?: boolean
  compraId?: boolean
  cantidad?: boolean
}

export type ProductoXCompraOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productoId" | "compraId" | "cantidad", ExtArgs["result"]["productoXCompra"]>
export type ProductoXCompraInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}
export type ProductoXCompraIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}
export type ProductoXCompraIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  producto?: boolean | Prisma.ProductoDefaultArgs<ExtArgs>
  compra?: boolean | Prisma.CompraDefaultArgs<ExtArgs>
}

export type $ProductoXCompraPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductoXCompra"
  objects: {
    producto: Prisma.$ProductoPayload<ExtArgs>
    compra: Prisma.$CompraPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    productoId: number
    compraId: number
    cantidad: number
  }, ExtArgs["result"]["productoXCompra"]>
  composites: {}
}

export type ProductoXCompraGetPayload<S extends boolean | null | undefined | ProductoXCompraDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload, S>

export type ProductoXCompraCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductoXCompraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductoXCompraCountAggregateInputType | true
  }

export interface ProductoXCompraDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductoXCompra'], meta: { name: 'ProductoXCompra' } }
  /**
   * Find zero or one ProductoXCompra that matches the filter.
   * @param {ProductoXCompraFindUniqueArgs} args - Arguments to find a ProductoXCompra
   * @example
   * // Get one ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductoXCompraFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductoXCompraFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductoXCompra that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductoXCompraFindUniqueOrThrowArgs} args - Arguments to find a ProductoXCompra
   * @example
   * // Get one ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductoXCompraFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductoXCompraFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductoXCompra that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraFindFirstArgs} args - Arguments to find a ProductoXCompra
   * @example
   * // Get one ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductoXCompraFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductoXCompra that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraFindFirstOrThrowArgs} args - Arguments to find a ProductoXCompra
   * @example
   * // Get one ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductoXCompraFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductoXCompras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductoXCompras
   * const productoXCompras = await prisma.productoXCompra.findMany()
   * 
   * // Get first 10 ProductoXCompras
   * const productoXCompras = await prisma.productoXCompra.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productoXCompraWithIdOnly = await prisma.productoXCompra.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductoXCompraFindManyArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductoXCompra.
   * @param {ProductoXCompraCreateArgs} args - Arguments to create a ProductoXCompra.
   * @example
   * // Create one ProductoXCompra
   * const ProductoXCompra = await prisma.productoXCompra.create({
   *   data: {
   *     // ... data to create a ProductoXCompra
   *   }
   * })
   * 
   */
  create<T extends ProductoXCompraCreateArgs>(args: Prisma.SelectSubset<T, ProductoXCompraCreateArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductoXCompras.
   * @param {ProductoXCompraCreateManyArgs} args - Arguments to create many ProductoXCompras.
   * @example
   * // Create many ProductoXCompras
   * const productoXCompra = await prisma.productoXCompra.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductoXCompraCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductoXCompras and returns the data saved in the database.
   * @param {ProductoXCompraCreateManyAndReturnArgs} args - Arguments to create many ProductoXCompras.
   * @example
   * // Create many ProductoXCompras
   * const productoXCompra = await prisma.productoXCompra.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductoXCompras and only return the `id`
   * const productoXCompraWithIdOnly = await prisma.productoXCompra.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductoXCompraCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductoXCompra.
   * @param {ProductoXCompraDeleteArgs} args - Arguments to delete one ProductoXCompra.
   * @example
   * // Delete one ProductoXCompra
   * const ProductoXCompra = await prisma.productoXCompra.delete({
   *   where: {
   *     // ... filter to delete one ProductoXCompra
   *   }
   * })
   * 
   */
  delete<T extends ProductoXCompraDeleteArgs>(args: Prisma.SelectSubset<T, ProductoXCompraDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductoXCompra.
   * @param {ProductoXCompraUpdateArgs} args - Arguments to update one ProductoXCompra.
   * @example
   * // Update one ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductoXCompraUpdateArgs>(args: Prisma.SelectSubset<T, ProductoXCompraUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductoXCompras.
   * @param {ProductoXCompraDeleteManyArgs} args - Arguments to filter ProductoXCompras to delete.
   * @example
   * // Delete a few ProductoXCompras
   * const { count } = await prisma.productoXCompra.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductoXCompraDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductoXCompraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductoXCompras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductoXCompras
   * const productoXCompra = await prisma.productoXCompra.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductoXCompraUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductoXCompraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductoXCompras and returns the data updated in the database.
   * @param {ProductoXCompraUpdateManyAndReturnArgs} args - Arguments to update many ProductoXCompras.
   * @example
   * // Update many ProductoXCompras
   * const productoXCompra = await prisma.productoXCompra.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductoXCompras and only return the `id`
   * const productoXCompraWithIdOnly = await prisma.productoXCompra.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductoXCompraUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductoXCompraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductoXCompra.
   * @param {ProductoXCompraUpsertArgs} args - Arguments to update or create a ProductoXCompra.
   * @example
   * // Update or create a ProductoXCompra
   * const productoXCompra = await prisma.productoXCompra.upsert({
   *   create: {
   *     // ... data to create a ProductoXCompra
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductoXCompra we want to update
   *   }
   * })
   */
  upsert<T extends ProductoXCompraUpsertArgs>(args: Prisma.SelectSubset<T, ProductoXCompraUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductoXCompraClient<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductoXCompras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraCountArgs} args - Arguments to filter ProductoXCompras to count.
   * @example
   * // Count the number of ProductoXCompras
   * const count = await prisma.productoXCompra.count({
   *   where: {
   *     // ... the filter for the ProductoXCompras we want to count
   *   }
   * })
  **/
  count<T extends ProductoXCompraCountArgs>(
    args?: Prisma.Subset<T, ProductoXCompraCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductoXCompraCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductoXCompra.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductoXCompraAggregateArgs>(args: Prisma.Subset<T, ProductoXCompraAggregateArgs>): Prisma.PrismaPromise<GetProductoXCompraAggregateType<T>>

  /**
   * Group by ProductoXCompra.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoXCompraGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductoXCompraGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductoXCompraGroupByArgs['orderBy'] }
      : { orderBy?: ProductoXCompraGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductoXCompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoXCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductoXCompra model
 */
readonly fields: ProductoXCompraFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductoXCompra.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductoXCompraClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  producto<T extends Prisma.ProductoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductoDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  compra<T extends Prisma.CompraDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CompraDefaultArgs<ExtArgs>>): Prisma.Prisma__CompraClient<runtime.Types.Result.GetResult<Prisma.$CompraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductoXCompra model
 */
export interface ProductoXCompraFieldRefs {
  readonly id: Prisma.FieldRef<"ProductoXCompra", 'Int'>
  readonly productoId: Prisma.FieldRef<"ProductoXCompra", 'Int'>
  readonly compraId: Prisma.FieldRef<"ProductoXCompra", 'Int'>
  readonly cantidad: Prisma.FieldRef<"ProductoXCompra", 'Int'>
}
    

// Custom InputTypes
/**
 * ProductoXCompra findUnique
 */
export type ProductoXCompraFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXCompra to fetch.
   */
  where: Prisma.ProductoXCompraWhereUniqueInput
}

/**
 * ProductoXCompra findUniqueOrThrow
 */
export type ProductoXCompraFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXCompra to fetch.
   */
  where: Prisma.ProductoXCompraWhereUniqueInput
}

/**
 * ProductoXCompra findFirst
 */
export type ProductoXCompraFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXCompra to fetch.
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXCompras to fetch.
   */
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductoXCompras.
   */
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXCompras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXCompras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductoXCompras.
   */
  distinct?: Prisma.ProductoXCompraScalarFieldEnum | Prisma.ProductoXCompraScalarFieldEnum[]
}

/**
 * ProductoXCompra findFirstOrThrow
 */
export type ProductoXCompraFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXCompra to fetch.
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXCompras to fetch.
   */
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductoXCompras.
   */
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXCompras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXCompras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductoXCompras.
   */
  distinct?: Prisma.ProductoXCompraScalarFieldEnum | Prisma.ProductoXCompraScalarFieldEnum[]
}

/**
 * ProductoXCompra findMany
 */
export type ProductoXCompraFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter, which ProductoXCompras to fetch.
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductoXCompras to fetch.
   */
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductoXCompras.
   */
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductoXCompras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductoXCompras.
   */
  skip?: number
  distinct?: Prisma.ProductoXCompraScalarFieldEnum | Prisma.ProductoXCompraScalarFieldEnum[]
}

/**
 * ProductoXCompra create
 */
export type ProductoXCompraCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductoXCompra.
   */
  data: Prisma.XOR<Prisma.ProductoXCompraCreateInput, Prisma.ProductoXCompraUncheckedCreateInput>
}

/**
 * ProductoXCompra createMany
 */
export type ProductoXCompraCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductoXCompras.
   */
  data: Prisma.ProductoXCompraCreateManyInput | Prisma.ProductoXCompraCreateManyInput[]
}

/**
 * ProductoXCompra createManyAndReturn
 */
export type ProductoXCompraCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * The data used to create many ProductoXCompras.
   */
  data: Prisma.ProductoXCompraCreateManyInput | Prisma.ProductoXCompraCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductoXCompra update
 */
export type ProductoXCompraUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductoXCompra.
   */
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateInput, Prisma.ProductoXCompraUncheckedUpdateInput>
  /**
   * Choose, which ProductoXCompra to update.
   */
  where: Prisma.ProductoXCompraWhereUniqueInput
}

/**
 * ProductoXCompra updateMany
 */
export type ProductoXCompraUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductoXCompras.
   */
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateManyMutationInput, Prisma.ProductoXCompraUncheckedUpdateManyInput>
  /**
   * Filter which ProductoXCompras to update
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * Limit how many ProductoXCompras to update.
   */
  limit?: number
}

/**
 * ProductoXCompra updateManyAndReturn
 */
export type ProductoXCompraUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * The data used to update ProductoXCompras.
   */
  data: Prisma.XOR<Prisma.ProductoXCompraUpdateManyMutationInput, Prisma.ProductoXCompraUncheckedUpdateManyInput>
  /**
   * Filter which ProductoXCompras to update
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * Limit how many ProductoXCompras to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductoXCompra upsert
 */
export type ProductoXCompraUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductoXCompra to update in case it exists.
   */
  where: Prisma.ProductoXCompraWhereUniqueInput
  /**
   * In case the ProductoXCompra found by the `where` argument doesn't exist, create a new ProductoXCompra with this data.
   */
  create: Prisma.XOR<Prisma.ProductoXCompraCreateInput, Prisma.ProductoXCompraUncheckedCreateInput>
  /**
   * In case the ProductoXCompra was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductoXCompraUpdateInput, Prisma.ProductoXCompraUncheckedUpdateInput>
}

/**
 * ProductoXCompra delete
 */
export type ProductoXCompraDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  /**
   * Filter which ProductoXCompra to delete.
   */
  where: Prisma.ProductoXCompraWhereUniqueInput
}

/**
 * ProductoXCompra deleteMany
 */
export type ProductoXCompraDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductoXCompras to delete
   */
  where?: Prisma.ProductoXCompraWhereInput
  /**
   * Limit how many ProductoXCompras to delete.
   */
  limit?: number
}

/**
 * ProductoXCompra without action
 */
export type ProductoXCompraDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
}
