
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Producto` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Producto
 * 
 */
export type ProductoModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductoPayload>

export type AggregateProducto = {
  _count: ProductoCountAggregateOutputType | null
  _avg: ProductoAvgAggregateOutputType | null
  _sum: ProductoSumAggregateOutputType | null
  _min: ProductoMinAggregateOutputType | null
  _max: ProductoMaxAggregateOutputType | null
}

export type ProductoAvgAggregateOutputType = {
  id: number | null
  codigo: number | null
  precio: number | null
  stock: number | null
  categoriaId: number | null
  marcaId: number | null
}

export type ProductoSumAggregateOutputType = {
  id: number | null
  codigo: number | null
  precio: number | null
  stock: number | null
  categoriaId: number | null
  marcaId: number | null
}

export type ProductoMinAggregateOutputType = {
  id: number | null
  codigo: number | null
  nombre: string | null
  descripcion: string | null
  precio: number | null
  stock: number | null
  categoriaId: number | null
  marcaId: number | null
}

export type ProductoMaxAggregateOutputType = {
  id: number | null
  codigo: number | null
  nombre: string | null
  descripcion: string | null
  precio: number | null
  stock: number | null
  categoriaId: number | null
  marcaId: number | null
}

export type ProductoCountAggregateOutputType = {
  id: number
  codigo: number
  nombre: number
  descripcion: number
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
  _all: number
}


export type ProductoAvgAggregateInputType = {
  id?: true
  codigo?: true
  precio?: true
  stock?: true
  categoriaId?: true
  marcaId?: true
}

export type ProductoSumAggregateInputType = {
  id?: true
  codigo?: true
  precio?: true
  stock?: true
  categoriaId?: true
  marcaId?: true
}

export type ProductoMinAggregateInputType = {
  id?: true
  codigo?: true
  nombre?: true
  descripcion?: true
  precio?: true
  stock?: true
  categoriaId?: true
  marcaId?: true
}

export type ProductoMaxAggregateInputType = {
  id?: true
  codigo?: true
  nombre?: true
  descripcion?: true
  precio?: true
  stock?: true
  categoriaId?: true
  marcaId?: true
}

export type ProductoCountAggregateInputType = {
  id?: true
  codigo?: true
  nombre?: true
  descripcion?: true
  precio?: true
  stock?: true
  categoriaId?: true
  marcaId?: true
  _all?: true
}

export type ProductoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Producto to aggregate.
   */
  where?: Prisma.ProductoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Productos to fetch.
   */
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Productos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Productos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Productos
  **/
  _count?: true | ProductoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductoMaxAggregateInputType
}

export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
      [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProducto[P]>
    : Prisma.GetScalarType<T[P], AggregateProducto[P]>
}




export type ProductoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoWhereInput
  orderBy?: Prisma.ProductoOrderByWithAggregationInput | Prisma.ProductoOrderByWithAggregationInput[]
  by: Prisma.ProductoScalarFieldEnum[] | Prisma.ProductoScalarFieldEnum
  having?: Prisma.ProductoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductoCountAggregateInputType | true
  _avg?: ProductoAvgAggregateInputType
  _sum?: ProductoSumAggregateInputType
  _min?: ProductoMinAggregateInputType
  _max?: ProductoMaxAggregateInputType
}

export type ProductoGroupByOutputType = {
  id: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
  _count: ProductoCountAggregateOutputType | null
  _avg: ProductoAvgAggregateOutputType | null
  _sum: ProductoSumAggregateOutputType | null
  _min: ProductoMinAggregateOutputType | null
  _max: ProductoMaxAggregateOutputType | null
}

type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductoGroupByOutputType[P]>
      }
    >
  > 



export type ProductoWhereInput = {
  AND?: Prisma.ProductoWhereInput | Prisma.ProductoWhereInput[]
  OR?: Prisma.ProductoWhereInput[]
  NOT?: Prisma.ProductoWhereInput | Prisma.ProductoWhereInput[]
  id?: Prisma.IntFilter<"Producto"> | number
  codigo?: Prisma.IntFilter<"Producto"> | number
  nombre?: Prisma.StringFilter<"Producto"> | string
  descripcion?: Prisma.StringFilter<"Producto"> | string
  precio?: Prisma.FloatFilter<"Producto"> | number
  stock?: Prisma.IntFilter<"Producto"> | number
  categoriaId?: Prisma.IntFilter<"Producto"> | number
  marcaId?: Prisma.IntFilter<"Producto"> | number
  categoria?: Prisma.XOR<Prisma.CategoriaScalarRelationFilter, Prisma.CategoriaWhereInput>
  marca?: Prisma.XOR<Prisma.MarcaScalarRelationFilter, Prisma.MarcaWhereInput>
  productosXCompra?: Prisma.ProductoXCompraListRelationFilter
  productosXVenta?: Prisma.ProductoXVentaListRelationFilter
}

export type ProductoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
  categoria?: Prisma.CategoriaOrderByWithRelationInput
  marca?: Prisma.MarcaOrderByWithRelationInput
  productosXCompra?: Prisma.ProductoXCompraOrderByRelationAggregateInput
  productosXVenta?: Prisma.ProductoXVentaOrderByRelationAggregateInput
}

export type ProductoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  codigo?: number
  AND?: Prisma.ProductoWhereInput | Prisma.ProductoWhereInput[]
  OR?: Prisma.ProductoWhereInput[]
  NOT?: Prisma.ProductoWhereInput | Prisma.ProductoWhereInput[]
  nombre?: Prisma.StringFilter<"Producto"> | string
  descripcion?: Prisma.StringFilter<"Producto"> | string
  precio?: Prisma.FloatFilter<"Producto"> | number
  stock?: Prisma.IntFilter<"Producto"> | number
  categoriaId?: Prisma.IntFilter<"Producto"> | number
  marcaId?: Prisma.IntFilter<"Producto"> | number
  categoria?: Prisma.XOR<Prisma.CategoriaScalarRelationFilter, Prisma.CategoriaWhereInput>
  marca?: Prisma.XOR<Prisma.MarcaScalarRelationFilter, Prisma.MarcaWhereInput>
  productosXCompra?: Prisma.ProductoXCompraListRelationFilter
  productosXVenta?: Prisma.ProductoXVentaListRelationFilter
}, "id" | "codigo">

export type ProductoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
  _count?: Prisma.ProductoCountOrderByAggregateInput
  _avg?: Prisma.ProductoAvgOrderByAggregateInput
  _max?: Prisma.ProductoMaxOrderByAggregateInput
  _min?: Prisma.ProductoMinOrderByAggregateInput
  _sum?: Prisma.ProductoSumOrderByAggregateInput
}

export type ProductoScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductoScalarWhereWithAggregatesInput | Prisma.ProductoScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductoScalarWhereWithAggregatesInput | Prisma.ProductoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Producto"> | number
  codigo?: Prisma.IntWithAggregatesFilter<"Producto"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Producto"> | string
  descripcion?: Prisma.StringWithAggregatesFilter<"Producto"> | string
  precio?: Prisma.FloatWithAggregatesFilter<"Producto"> | number
  stock?: Prisma.IntWithAggregatesFilter<"Producto"> | number
  categoriaId?: Prisma.IntWithAggregatesFilter<"Producto"> | number
  marcaId?: Prisma.IntWithAggregatesFilter<"Producto"> | number
}

export type ProductoCreateInput = {
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoria: Prisma.CategoriaCreateNestedOneWithoutProductosInput
  marca: Prisma.MarcaCreateNestedOneWithoutProductosInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutProductoInput
}

export type ProductoUncheckedCreateInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutProductoInput
}

export type ProductoUpdateInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoria?: Prisma.CategoriaUpdateOneRequiredWithoutProductosNestedInput
  marca?: Prisma.MarcaUpdateOneRequiredWithoutProductosNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutProductoNestedInput
}

export type ProductoCreateManyInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
}

export type ProductoUpdateManyMutationInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoListRelationFilter = {
  every?: Prisma.ProductoWhereInput
  some?: Prisma.ProductoWhereInput
  none?: Prisma.ProductoWhereInput
}

export type ProductoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
}

export type ProductoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
}

export type ProductoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
}

export type ProductoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  descripcion?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
}

export type ProductoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  precio?: Prisma.SortOrder
  stock?: Prisma.SortOrder
  categoriaId?: Prisma.SortOrder
  marcaId?: Prisma.SortOrder
}

export type ProductoScalarRelationFilter = {
  is?: Prisma.ProductoWhereInput
  isNot?: Prisma.ProductoWhereInput
}

export type ProductoCreateNestedManyWithoutCategoriaInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput> | Prisma.ProductoCreateWithoutCategoriaInput[] | Prisma.ProductoUncheckedCreateWithoutCategoriaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutCategoriaInput | Prisma.ProductoCreateOrConnectWithoutCategoriaInput[]
  createMany?: Prisma.ProductoCreateManyCategoriaInputEnvelope
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
}

export type ProductoUncheckedCreateNestedManyWithoutCategoriaInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput> | Prisma.ProductoCreateWithoutCategoriaInput[] | Prisma.ProductoUncheckedCreateWithoutCategoriaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutCategoriaInput | Prisma.ProductoCreateOrConnectWithoutCategoriaInput[]
  createMany?: Prisma.ProductoCreateManyCategoriaInputEnvelope
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
}

export type ProductoUpdateManyWithoutCategoriaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput> | Prisma.ProductoCreateWithoutCategoriaInput[] | Prisma.ProductoUncheckedCreateWithoutCategoriaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutCategoriaInput | Prisma.ProductoCreateOrConnectWithoutCategoriaInput[]
  upsert?: Prisma.ProductoUpsertWithWhereUniqueWithoutCategoriaInput | Prisma.ProductoUpsertWithWhereUniqueWithoutCategoriaInput[]
  createMany?: Prisma.ProductoCreateManyCategoriaInputEnvelope
  set?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  disconnect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  delete?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  update?: Prisma.ProductoUpdateWithWhereUniqueWithoutCategoriaInput | Prisma.ProductoUpdateWithWhereUniqueWithoutCategoriaInput[]
  updateMany?: Prisma.ProductoUpdateManyWithWhereWithoutCategoriaInput | Prisma.ProductoUpdateManyWithWhereWithoutCategoriaInput[]
  deleteMany?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
}

export type ProductoUncheckedUpdateManyWithoutCategoriaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput> | Prisma.ProductoCreateWithoutCategoriaInput[] | Prisma.ProductoUncheckedCreateWithoutCategoriaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutCategoriaInput | Prisma.ProductoCreateOrConnectWithoutCategoriaInput[]
  upsert?: Prisma.ProductoUpsertWithWhereUniqueWithoutCategoriaInput | Prisma.ProductoUpsertWithWhereUniqueWithoutCategoriaInput[]
  createMany?: Prisma.ProductoCreateManyCategoriaInputEnvelope
  set?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  disconnect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  delete?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  update?: Prisma.ProductoUpdateWithWhereUniqueWithoutCategoriaInput | Prisma.ProductoUpdateWithWhereUniqueWithoutCategoriaInput[]
  updateMany?: Prisma.ProductoUpdateManyWithWhereWithoutCategoriaInput | Prisma.ProductoUpdateManyWithWhereWithoutCategoriaInput[]
  deleteMany?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
}

export type ProductoCreateNestedManyWithoutMarcaInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput> | Prisma.ProductoCreateWithoutMarcaInput[] | Prisma.ProductoUncheckedCreateWithoutMarcaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutMarcaInput | Prisma.ProductoCreateOrConnectWithoutMarcaInput[]
  createMany?: Prisma.ProductoCreateManyMarcaInputEnvelope
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
}

export type ProductoUncheckedCreateNestedManyWithoutMarcaInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput> | Prisma.ProductoCreateWithoutMarcaInput[] | Prisma.ProductoUncheckedCreateWithoutMarcaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutMarcaInput | Prisma.ProductoCreateOrConnectWithoutMarcaInput[]
  createMany?: Prisma.ProductoCreateManyMarcaInputEnvelope
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
}

export type ProductoUpdateManyWithoutMarcaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput> | Prisma.ProductoCreateWithoutMarcaInput[] | Prisma.ProductoUncheckedCreateWithoutMarcaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutMarcaInput | Prisma.ProductoCreateOrConnectWithoutMarcaInput[]
  upsert?: Prisma.ProductoUpsertWithWhereUniqueWithoutMarcaInput | Prisma.ProductoUpsertWithWhereUniqueWithoutMarcaInput[]
  createMany?: Prisma.ProductoCreateManyMarcaInputEnvelope
  set?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  disconnect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  delete?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  update?: Prisma.ProductoUpdateWithWhereUniqueWithoutMarcaInput | Prisma.ProductoUpdateWithWhereUniqueWithoutMarcaInput[]
  updateMany?: Prisma.ProductoUpdateManyWithWhereWithoutMarcaInput | Prisma.ProductoUpdateManyWithWhereWithoutMarcaInput[]
  deleteMany?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
}

export type ProductoUncheckedUpdateManyWithoutMarcaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput> | Prisma.ProductoCreateWithoutMarcaInput[] | Prisma.ProductoUncheckedCreateWithoutMarcaInput[]
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutMarcaInput | Prisma.ProductoCreateOrConnectWithoutMarcaInput[]
  upsert?: Prisma.ProductoUpsertWithWhereUniqueWithoutMarcaInput | Prisma.ProductoUpsertWithWhereUniqueWithoutMarcaInput[]
  createMany?: Prisma.ProductoCreateManyMarcaInputEnvelope
  set?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  disconnect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  delete?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  connect?: Prisma.ProductoWhereUniqueInput | Prisma.ProductoWhereUniqueInput[]
  update?: Prisma.ProductoUpdateWithWhereUniqueWithoutMarcaInput | Prisma.ProductoUpdateWithWhereUniqueWithoutMarcaInput[]
  updateMany?: Prisma.ProductoUpdateManyWithWhereWithoutMarcaInput | Prisma.ProductoUpdateManyWithWhereWithoutMarcaInput[]
  deleteMany?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
}

export type ProductoCreateNestedOneWithoutProductosXCompraInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXCompraInput, Prisma.ProductoUncheckedCreateWithoutProductosXCompraInput>
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutProductosXCompraInput
  connect?: Prisma.ProductoWhereUniqueInput
}

export type ProductoUpdateOneRequiredWithoutProductosXCompraNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXCompraInput, Prisma.ProductoUncheckedCreateWithoutProductosXCompraInput>
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutProductosXCompraInput
  upsert?: Prisma.ProductoUpsertWithoutProductosXCompraInput
  connect?: Prisma.ProductoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductoUpdateToOneWithWhereWithoutProductosXCompraInput, Prisma.ProductoUpdateWithoutProductosXCompraInput>, Prisma.ProductoUncheckedUpdateWithoutProductosXCompraInput>
}

export type ProductoCreateNestedOneWithoutProductosXVentaInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXVentaInput, Prisma.ProductoUncheckedCreateWithoutProductosXVentaInput>
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutProductosXVentaInput
  connect?: Prisma.ProductoWhereUniqueInput
}

export type ProductoUpdateOneRequiredWithoutProductosXVentaNestedInput = {
  create?: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXVentaInput, Prisma.ProductoUncheckedCreateWithoutProductosXVentaInput>
  connectOrCreate?: Prisma.ProductoCreateOrConnectWithoutProductosXVentaInput
  upsert?: Prisma.ProductoUpsertWithoutProductosXVentaInput
  connect?: Prisma.ProductoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductoUpdateToOneWithWhereWithoutProductosXVentaInput, Prisma.ProductoUpdateWithoutProductosXVentaInput>, Prisma.ProductoUncheckedUpdateWithoutProductosXVentaInput>
}

export type ProductoCreateWithoutCategoriaInput = {
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  marca: Prisma.MarcaCreateNestedOneWithoutProductosInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutProductoInput
}

export type ProductoUncheckedCreateWithoutCategoriaInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  marcaId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutProductoInput
}

export type ProductoCreateOrConnectWithoutCategoriaInput = {
  where: Prisma.ProductoWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput>
}

export type ProductoCreateManyCategoriaInputEnvelope = {
  data: Prisma.ProductoCreateManyCategoriaInput | Prisma.ProductoCreateManyCategoriaInput[]
}

export type ProductoUpsertWithWhereUniqueWithoutCategoriaInput = {
  where: Prisma.ProductoWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoUpdateWithoutCategoriaInput, Prisma.ProductoUncheckedUpdateWithoutCategoriaInput>
  create: Prisma.XOR<Prisma.ProductoCreateWithoutCategoriaInput, Prisma.ProductoUncheckedCreateWithoutCategoriaInput>
}

export type ProductoUpdateWithWhereUniqueWithoutCategoriaInput = {
  where: Prisma.ProductoWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoUpdateWithoutCategoriaInput, Prisma.ProductoUncheckedUpdateWithoutCategoriaInput>
}

export type ProductoUpdateManyWithWhereWithoutCategoriaInput = {
  where: Prisma.ProductoScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoUpdateManyMutationInput, Prisma.ProductoUncheckedUpdateManyWithoutCategoriaInput>
}

export type ProductoScalarWhereInput = {
  AND?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
  OR?: Prisma.ProductoScalarWhereInput[]
  NOT?: Prisma.ProductoScalarWhereInput | Prisma.ProductoScalarWhereInput[]
  id?: Prisma.IntFilter<"Producto"> | number
  codigo?: Prisma.IntFilter<"Producto"> | number
  nombre?: Prisma.StringFilter<"Producto"> | string
  descripcion?: Prisma.StringFilter<"Producto"> | string
  precio?: Prisma.FloatFilter<"Producto"> | number
  stock?: Prisma.IntFilter<"Producto"> | number
  categoriaId?: Prisma.IntFilter<"Producto"> | number
  marcaId?: Prisma.IntFilter<"Producto"> | number
}

export type ProductoCreateWithoutMarcaInput = {
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoria: Prisma.CategoriaCreateNestedOneWithoutProductosInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutProductoInput
}

export type ProductoUncheckedCreateWithoutMarcaInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutProductoInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutProductoInput
}

export type ProductoCreateOrConnectWithoutMarcaInput = {
  where: Prisma.ProductoWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput>
}

export type ProductoCreateManyMarcaInputEnvelope = {
  data: Prisma.ProductoCreateManyMarcaInput | Prisma.ProductoCreateManyMarcaInput[]
}

export type ProductoUpsertWithWhereUniqueWithoutMarcaInput = {
  where: Prisma.ProductoWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductoUpdateWithoutMarcaInput, Prisma.ProductoUncheckedUpdateWithoutMarcaInput>
  create: Prisma.XOR<Prisma.ProductoCreateWithoutMarcaInput, Prisma.ProductoUncheckedCreateWithoutMarcaInput>
}

export type ProductoUpdateWithWhereUniqueWithoutMarcaInput = {
  where: Prisma.ProductoWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductoUpdateWithoutMarcaInput, Prisma.ProductoUncheckedUpdateWithoutMarcaInput>
}

export type ProductoUpdateManyWithWhereWithoutMarcaInput = {
  where: Prisma.ProductoScalarWhereInput
  data: Prisma.XOR<Prisma.ProductoUpdateManyMutationInput, Prisma.ProductoUncheckedUpdateManyWithoutMarcaInput>
}

export type ProductoCreateWithoutProductosXCompraInput = {
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoria: Prisma.CategoriaCreateNestedOneWithoutProductosInput
  marca: Prisma.MarcaCreateNestedOneWithoutProductosInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutProductoInput
}

export type ProductoUncheckedCreateWithoutProductosXCompraInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutProductoInput
}

export type ProductoCreateOrConnectWithoutProductosXCompraInput = {
  where: Prisma.ProductoWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXCompraInput, Prisma.ProductoUncheckedCreateWithoutProductosXCompraInput>
}

export type ProductoUpsertWithoutProductosXCompraInput = {
  update: Prisma.XOR<Prisma.ProductoUpdateWithoutProductosXCompraInput, Prisma.ProductoUncheckedUpdateWithoutProductosXCompraInput>
  create: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXCompraInput, Prisma.ProductoUncheckedCreateWithoutProductosXCompraInput>
  where?: Prisma.ProductoWhereInput
}

export type ProductoUpdateToOneWithWhereWithoutProductosXCompraInput = {
  where?: Prisma.ProductoWhereInput
  data: Prisma.XOR<Prisma.ProductoUpdateWithoutProductosXCompraInput, Prisma.ProductoUncheckedUpdateWithoutProductosXCompraInput>
}

export type ProductoUpdateWithoutProductosXCompraInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoria?: Prisma.CategoriaUpdateOneRequiredWithoutProductosNestedInput
  marca?: Prisma.MarcaUpdateOneRequiredWithoutProductosNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateWithoutProductosXCompraInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutProductoNestedInput
}

export type ProductoCreateWithoutProductosXVentaInput = {
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoria: Prisma.CategoriaCreateNestedOneWithoutProductosInput
  marca: Prisma.MarcaCreateNestedOneWithoutProductosInput
  productosXCompra?: Prisma.ProductoXCompraCreateNestedManyWithoutProductoInput
}

export type ProductoUncheckedCreateWithoutProductosXVentaInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
  marcaId: number
  productosXCompra?: Prisma.ProductoXCompraUncheckedCreateNestedManyWithoutProductoInput
}

export type ProductoCreateOrConnectWithoutProductosXVentaInput = {
  where: Prisma.ProductoWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXVentaInput, Prisma.ProductoUncheckedCreateWithoutProductosXVentaInput>
}

export type ProductoUpsertWithoutProductosXVentaInput = {
  update: Prisma.XOR<Prisma.ProductoUpdateWithoutProductosXVentaInput, Prisma.ProductoUncheckedUpdateWithoutProductosXVentaInput>
  create: Prisma.XOR<Prisma.ProductoCreateWithoutProductosXVentaInput, Prisma.ProductoUncheckedCreateWithoutProductosXVentaInput>
  where?: Prisma.ProductoWhereInput
}

export type ProductoUpdateToOneWithWhereWithoutProductosXVentaInput = {
  where?: Prisma.ProductoWhereInput
  data: Prisma.XOR<Prisma.ProductoUpdateWithoutProductosXVentaInput, Prisma.ProductoUncheckedUpdateWithoutProductosXVentaInput>
}

export type ProductoUpdateWithoutProductosXVentaInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoria?: Prisma.CategoriaUpdateOneRequiredWithoutProductosNestedInput
  marca?: Prisma.MarcaUpdateOneRequiredWithoutProductosNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateWithoutProductosXVentaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutProductoNestedInput
}

export type ProductoCreateManyCategoriaInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  marcaId: number
}

export type ProductoUpdateWithoutCategoriaInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  marca?: Prisma.MarcaUpdateOneRequiredWithoutProductosNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateWithoutCategoriaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateManyWithoutCategoriaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  marcaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ProductoCreateManyMarcaInput = {
  id?: number
  codigo: number
  nombre: string
  descripcion: string
  precio: number
  stock: number
  categoriaId: number
}

export type ProductoUpdateWithoutMarcaInput = {
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoria?: Prisma.CategoriaUpdateOneRequiredWithoutProductosNestedInput
  productosXCompra?: Prisma.ProductoXCompraUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateWithoutMarcaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXCompra?: Prisma.ProductoXCompraUncheckedUpdateManyWithoutProductoNestedInput
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutProductoNestedInput
}

export type ProductoUncheckedUpdateManyWithoutMarcaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  codigo?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  descripcion?: Prisma.StringFieldUpdateOperationsInput | string
  precio?: Prisma.FloatFieldUpdateOperationsInput | number
  stock?: Prisma.IntFieldUpdateOperationsInput | number
  categoriaId?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type ProductoCountOutputType
 */

export type ProductoCountOutputType = {
  productosXCompra: number
  productosXVenta: number
}

export type ProductoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productosXCompra?: boolean | ProductoCountOutputTypeCountProductosXCompraArgs
  productosXVenta?: boolean | ProductoCountOutputTypeCountProductosXVentaArgs
}

/**
 * ProductoCountOutputType without action
 */
export type ProductoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoCountOutputType
   */
  select?: Prisma.ProductoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductoCountOutputType without action
 */
export type ProductoCountOutputTypeCountProductosXCompraArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXCompraWhereInput
}

/**
 * ProductoCountOutputType without action
 */
export type ProductoCountOutputTypeCountProductosXVentaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXVentaWhereInput
}


export type ProductoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  nombre?: boolean
  descripcion?: boolean
  precio?: boolean
  stock?: boolean
  categoriaId?: boolean
  marcaId?: boolean
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
  productosXCompra?: boolean | Prisma.Producto$productosXCompraArgs<ExtArgs>
  productosXVenta?: boolean | Prisma.Producto$productosXVentaArgs<ExtArgs>
  _count?: boolean | Prisma.ProductoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["producto"]>

export type ProductoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  nombre?: boolean
  descripcion?: boolean
  precio?: boolean
  stock?: boolean
  categoriaId?: boolean
  marcaId?: boolean
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["producto"]>

export type ProductoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  nombre?: boolean
  descripcion?: boolean
  precio?: boolean
  stock?: boolean
  categoriaId?: boolean
  marcaId?: boolean
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
}, ExtArgs["result"]["producto"]>

export type ProductoSelectScalar = {
  id?: boolean
  codigo?: boolean
  nombre?: boolean
  descripcion?: boolean
  precio?: boolean
  stock?: boolean
  categoriaId?: boolean
  marcaId?: boolean
}

export type ProductoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "codigo" | "nombre" | "descripcion" | "precio" | "stock" | "categoriaId" | "marcaId", ExtArgs["result"]["producto"]>
export type ProductoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
  productosXCompra?: boolean | Prisma.Producto$productosXCompraArgs<ExtArgs>
  productosXVenta?: boolean | Prisma.Producto$productosXVentaArgs<ExtArgs>
  _count?: boolean | Prisma.ProductoCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProductoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
}
export type ProductoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categoria?: boolean | Prisma.CategoriaDefaultArgs<ExtArgs>
  marca?: boolean | Prisma.MarcaDefaultArgs<ExtArgs>
}

export type $ProductoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Producto"
  objects: {
    categoria: Prisma.$CategoriaPayload<ExtArgs>
    marca: Prisma.$MarcaPayload<ExtArgs>
    productosXCompra: Prisma.$ProductoXCompraPayload<ExtArgs>[]
    productosXVenta: Prisma.$ProductoXVentaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    codigo: number
    nombre: string
    descripcion: string
    precio: number
    stock: number
    categoriaId: number
    marcaId: number
  }, ExtArgs["result"]["producto"]>
  composites: {}
}

export type ProductoGetPayload<S extends boolean | null | undefined | ProductoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductoPayload, S>

export type ProductoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductoCountAggregateInputType | true
  }

export interface ProductoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Producto'], meta: { name: 'Producto' } }
  /**
   * Find zero or one Producto that matches the filter.
   * @param {ProductoFindUniqueArgs} args - Arguments to find a Producto
   * @example
   * // Get one Producto
   * const producto = await prisma.producto.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductoFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Producto that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductoFindUniqueOrThrowArgs} args - Arguments to find a Producto
   * @example
   * // Get one Producto
   * const producto = await prisma.producto.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Producto that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoFindFirstArgs} args - Arguments to find a Producto
   * @example
   * // Get one Producto
   * const producto = await prisma.producto.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductoFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductoFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Producto that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoFindFirstOrThrowArgs} args - Arguments to find a Producto
   * @example
   * // Get one Producto
   * const producto = await prisma.producto.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Productos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Productos
   * const productos = await prisma.producto.findMany()
   * 
   * // Get first 10 Productos
   * const productos = await prisma.producto.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productoWithIdOnly = await prisma.producto.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductoFindManyArgs>(args?: Prisma.SelectSubset<T, ProductoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Producto.
   * @param {ProductoCreateArgs} args - Arguments to create a Producto.
   * @example
   * // Create one Producto
   * const Producto = await prisma.producto.create({
   *   data: {
   *     // ... data to create a Producto
   *   }
   * })
   * 
   */
  create<T extends ProductoCreateArgs>(args: Prisma.SelectSubset<T, ProductoCreateArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Productos.
   * @param {ProductoCreateManyArgs} args - Arguments to create many Productos.
   * @example
   * // Create many Productos
   * const producto = await prisma.producto.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductoCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Productos and returns the data saved in the database.
   * @param {ProductoCreateManyAndReturnArgs} args - Arguments to create many Productos.
   * @example
   * // Create many Productos
   * const producto = await prisma.producto.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Productos and only return the `id`
   * const productoWithIdOnly = await prisma.producto.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Producto.
   * @param {ProductoDeleteArgs} args - Arguments to delete one Producto.
   * @example
   * // Delete one Producto
   * const Producto = await prisma.producto.delete({
   *   where: {
   *     // ... filter to delete one Producto
   *   }
   * })
   * 
   */
  delete<T extends ProductoDeleteArgs>(args: Prisma.SelectSubset<T, ProductoDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Producto.
   * @param {ProductoUpdateArgs} args - Arguments to update one Producto.
   * @example
   * // Update one Producto
   * const producto = await prisma.producto.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductoUpdateArgs>(args: Prisma.SelectSubset<T, ProductoUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Productos.
   * @param {ProductoDeleteManyArgs} args - Arguments to filter Productos to delete.
   * @example
   * // Delete a few Productos
   * const { count } = await prisma.producto.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductoDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Productos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Productos
   * const producto = await prisma.producto.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductoUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Productos and returns the data updated in the database.
   * @param {ProductoUpdateManyAndReturnArgs} args - Arguments to update many Productos.
   * @example
   * // Update many Productos
   * const producto = await prisma.producto.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Productos and only return the `id`
   * const productoWithIdOnly = await prisma.producto.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Producto.
   * @param {ProductoUpsertArgs} args - Arguments to update or create a Producto.
   * @example
   * // Update or create a Producto
   * const producto = await prisma.producto.upsert({
   *   create: {
   *     // ... data to create a Producto
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Producto we want to update
   *   }
   * })
   */
  upsert<T extends ProductoUpsertArgs>(args: Prisma.SelectSubset<T, ProductoUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductoClient<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Productos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoCountArgs} args - Arguments to filter Productos to count.
   * @example
   * // Count the number of Productos
   * const count = await prisma.producto.count({
   *   where: {
   *     // ... the filter for the Productos we want to count
   *   }
   * })
  **/
  count<T extends ProductoCountArgs>(
    args?: Prisma.Subset<T, ProductoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Producto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductoAggregateArgs>(args: Prisma.Subset<T, ProductoAggregateArgs>): Prisma.PrismaPromise<GetProductoAggregateType<T>>

  /**
   * Group by Producto.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductoGroupByArgs['orderBy'] }
      : { orderBy?: ProductoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Producto model
 */
readonly fields: ProductoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Producto.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  categoria<T extends Prisma.CategoriaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CategoriaDefaultArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  marca<T extends Prisma.MarcaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MarcaDefaultArgs<ExtArgs>>): Prisma.Prisma__MarcaClient<runtime.Types.Result.GetResult<Prisma.$MarcaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  productosXCompra<T extends Prisma.Producto$productosXCompraArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Producto$productosXCompraArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXCompraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  productosXVenta<T extends Prisma.Producto$productosXVentaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Producto$productosXVentaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Producto model
 */
export interface ProductoFieldRefs {
  readonly id: Prisma.FieldRef<"Producto", 'Int'>
  readonly codigo: Prisma.FieldRef<"Producto", 'Int'>
  readonly nombre: Prisma.FieldRef<"Producto", 'String'>
  readonly descripcion: Prisma.FieldRef<"Producto", 'String'>
  readonly precio: Prisma.FieldRef<"Producto", 'Float'>
  readonly stock: Prisma.FieldRef<"Producto", 'Int'>
  readonly categoriaId: Prisma.FieldRef<"Producto", 'Int'>
  readonly marcaId: Prisma.FieldRef<"Producto", 'Int'>
}
    

// Custom InputTypes
/**
 * Producto findUnique
 */
export type ProductoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter, which Producto to fetch.
   */
  where: Prisma.ProductoWhereUniqueInput
}

/**
 * Producto findUniqueOrThrow
 */
export type ProductoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter, which Producto to fetch.
   */
  where: Prisma.ProductoWhereUniqueInput
}

/**
 * Producto findFirst
 */
export type ProductoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter, which Producto to fetch.
   */
  where?: Prisma.ProductoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Productos to fetch.
   */
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Productos.
   */
  cursor?: Prisma.ProductoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Productos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Productos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Productos.
   */
  distinct?: Prisma.ProductoScalarFieldEnum | Prisma.ProductoScalarFieldEnum[]
}

/**
 * Producto findFirstOrThrow
 */
export type ProductoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter, which Producto to fetch.
   */
  where?: Prisma.ProductoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Productos to fetch.
   */
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Productos.
   */
  cursor?: Prisma.ProductoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Productos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Productos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Productos.
   */
  distinct?: Prisma.ProductoScalarFieldEnum | Prisma.ProductoScalarFieldEnum[]
}

/**
 * Producto findMany
 */
export type ProductoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter, which Productos to fetch.
   */
  where?: Prisma.ProductoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Productos to fetch.
   */
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Productos.
   */
  cursor?: Prisma.ProductoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Productos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Productos.
   */
  skip?: number
  distinct?: Prisma.ProductoScalarFieldEnum | Prisma.ProductoScalarFieldEnum[]
}

/**
 * Producto create
 */
export type ProductoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * The data needed to create a Producto.
   */
  data: Prisma.XOR<Prisma.ProductoCreateInput, Prisma.ProductoUncheckedCreateInput>
}

/**
 * Producto createMany
 */
export type ProductoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Productos.
   */
  data: Prisma.ProductoCreateManyInput | Prisma.ProductoCreateManyInput[]
}

/**
 * Producto createManyAndReturn
 */
export type ProductoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * The data used to create many Productos.
   */
  data: Prisma.ProductoCreateManyInput | Prisma.ProductoCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Producto update
 */
export type ProductoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * The data needed to update a Producto.
   */
  data: Prisma.XOR<Prisma.ProductoUpdateInput, Prisma.ProductoUncheckedUpdateInput>
  /**
   * Choose, which Producto to update.
   */
  where: Prisma.ProductoWhereUniqueInput
}

/**
 * Producto updateMany
 */
export type ProductoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Productos.
   */
  data: Prisma.XOR<Prisma.ProductoUpdateManyMutationInput, Prisma.ProductoUncheckedUpdateManyInput>
  /**
   * Filter which Productos to update
   */
  where?: Prisma.ProductoWhereInput
  /**
   * Limit how many Productos to update.
   */
  limit?: number
}

/**
 * Producto updateManyAndReturn
 */
export type ProductoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * The data used to update Productos.
   */
  data: Prisma.XOR<Prisma.ProductoUpdateManyMutationInput, Prisma.ProductoUncheckedUpdateManyInput>
  /**
   * Filter which Productos to update
   */
  where?: Prisma.ProductoWhereInput
  /**
   * Limit how many Productos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Producto upsert
 */
export type ProductoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * The filter to search for the Producto to update in case it exists.
   */
  where: Prisma.ProductoWhereUniqueInput
  /**
   * In case the Producto found by the `where` argument doesn't exist, create a new Producto with this data.
   */
  create: Prisma.XOR<Prisma.ProductoCreateInput, Prisma.ProductoUncheckedCreateInput>
  /**
   * In case the Producto was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductoUpdateInput, Prisma.ProductoUncheckedUpdateInput>
}

/**
 * Producto delete
 */
export type ProductoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  /**
   * Filter which Producto to delete.
   */
  where: Prisma.ProductoWhereUniqueInput
}

/**
 * Producto deleteMany
 */
export type ProductoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Productos to delete
   */
  where?: Prisma.ProductoWhereInput
  /**
   * Limit how many Productos to delete.
   */
  limit?: number
}

/**
 * Producto.productosXCompra
 */
export type Producto$productosXCompraArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXCompra
   */
  select?: Prisma.ProductoXCompraSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXCompra
   */
  omit?: Prisma.ProductoXCompraOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXCompraInclude<ExtArgs> | null
  where?: Prisma.ProductoXCompraWhereInput
  orderBy?: Prisma.ProductoXCompraOrderByWithRelationInput | Prisma.ProductoXCompraOrderByWithRelationInput[]
  cursor?: Prisma.ProductoXCompraWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoXCompraScalarFieldEnum | Prisma.ProductoXCompraScalarFieldEnum[]
}

/**
 * Producto.productosXVenta
 */
export type Producto$productosXVentaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  where?: Prisma.ProductoXVentaWhereInput
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoXVentaScalarFieldEnum | Prisma.ProductoXVentaScalarFieldEnum[]
}

/**
 * Producto without action
 */
export type ProductoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
}
