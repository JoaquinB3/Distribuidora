
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MetodoPago` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MetodoPago
 * 
 */
export type MetodoPagoModel = runtime.Types.Result.DefaultSelection<Prisma.$MetodoPagoPayload>

export type AggregateMetodoPago = {
  _count: MetodoPagoCountAggregateOutputType | null
  _avg: MetodoPagoAvgAggregateOutputType | null
  _sum: MetodoPagoSumAggregateOutputType | null
  _min: MetodoPagoMinAggregateOutputType | null
  _max: MetodoPagoMaxAggregateOutputType | null
}

export type MetodoPagoAvgAggregateOutputType = {
  id: number | null
}

export type MetodoPagoSumAggregateOutputType = {
  id: number | null
}

export type MetodoPagoMinAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type MetodoPagoMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type MetodoPagoCountAggregateOutputType = {
  id: number
  nombre: number
  _all: number
}


export type MetodoPagoAvgAggregateInputType = {
  id?: true
}

export type MetodoPagoSumAggregateInputType = {
  id?: true
}

export type MetodoPagoMinAggregateInputType = {
  id?: true
  nombre?: true
}

export type MetodoPagoMaxAggregateInputType = {
  id?: true
  nombre?: true
}

export type MetodoPagoCountAggregateInputType = {
  id?: true
  nombre?: true
  _all?: true
}

export type MetodoPagoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MetodoPago to aggregate.
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MetodoPagos to fetch.
   */
  orderBy?: Prisma.MetodoPagoOrderByWithRelationInput | Prisma.MetodoPagoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MetodoPagoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MetodoPagos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MetodoPagos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MetodoPagos
  **/
  _count?: true | MetodoPagoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MetodoPagoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MetodoPagoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MetodoPagoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MetodoPagoMaxAggregateInputType
}

export type GetMetodoPagoAggregateType<T extends MetodoPagoAggregateArgs> = {
      [P in keyof T & keyof AggregateMetodoPago]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetodoPago[P]>
    : Prisma.GetScalarType<T[P], AggregateMetodoPago[P]>
}




export type MetodoPagoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MetodoPagoWhereInput
  orderBy?: Prisma.MetodoPagoOrderByWithAggregationInput | Prisma.MetodoPagoOrderByWithAggregationInput[]
  by: Prisma.MetodoPagoScalarFieldEnum[] | Prisma.MetodoPagoScalarFieldEnum
  having?: Prisma.MetodoPagoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MetodoPagoCountAggregateInputType | true
  _avg?: MetodoPagoAvgAggregateInputType
  _sum?: MetodoPagoSumAggregateInputType
  _min?: MetodoPagoMinAggregateInputType
  _max?: MetodoPagoMaxAggregateInputType
}

export type MetodoPagoGroupByOutputType = {
  id: number
  nombre: string
  _count: MetodoPagoCountAggregateOutputType | null
  _avg: MetodoPagoAvgAggregateOutputType | null
  _sum: MetodoPagoSumAggregateOutputType | null
  _min: MetodoPagoMinAggregateOutputType | null
  _max: MetodoPagoMaxAggregateOutputType | null
}

type GetMetodoPagoGroupByPayload<T extends MetodoPagoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MetodoPagoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MetodoPagoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
      }
    >
  > 



export type MetodoPagoWhereInput = {
  AND?: Prisma.MetodoPagoWhereInput | Prisma.MetodoPagoWhereInput[]
  OR?: Prisma.MetodoPagoWhereInput[]
  NOT?: Prisma.MetodoPagoWhereInput | Prisma.MetodoPagoWhereInput[]
  id?: Prisma.IntFilter<"MetodoPago"> | number
  nombre?: Prisma.StringFilter<"MetodoPago"> | string
}

export type MetodoPagoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MetodoPagoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MetodoPagoWhereInput | Prisma.MetodoPagoWhereInput[]
  OR?: Prisma.MetodoPagoWhereInput[]
  NOT?: Prisma.MetodoPagoWhereInput | Prisma.MetodoPagoWhereInput[]
  nombre?: Prisma.StringFilter<"MetodoPago"> | string
}, "id">

export type MetodoPagoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  _count?: Prisma.MetodoPagoCountOrderByAggregateInput
  _avg?: Prisma.MetodoPagoAvgOrderByAggregateInput
  _max?: Prisma.MetodoPagoMaxOrderByAggregateInput
  _min?: Prisma.MetodoPagoMinOrderByAggregateInput
  _sum?: Prisma.MetodoPagoSumOrderByAggregateInput
}

export type MetodoPagoScalarWhereWithAggregatesInput = {
  AND?: Prisma.MetodoPagoScalarWhereWithAggregatesInput | Prisma.MetodoPagoScalarWhereWithAggregatesInput[]
  OR?: Prisma.MetodoPagoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MetodoPagoScalarWhereWithAggregatesInput | Prisma.MetodoPagoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"MetodoPago"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"MetodoPago"> | string
}

export type MetodoPagoCreateInput = {
  nombre: string
}

export type MetodoPagoUncheckedCreateInput = {
  id?: number
  nombre: string
}

export type MetodoPagoUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetodoPagoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetodoPagoCreateManyInput = {
  id?: number
  nombre: string
}

export type MetodoPagoUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetodoPagoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MetodoPagoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MetodoPagoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type MetodoPagoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MetodoPagoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type MetodoPagoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type MetodoPagoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["metodoPago"]>

export type MetodoPagoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["metodoPago"]>

export type MetodoPagoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["metodoPago"]>

export type MetodoPagoSelectScalar = {
  id?: boolean
  nombre?: boolean
}

export type MetodoPagoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["metodoPago"]>

export type $MetodoPagoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MetodoPago"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
  }, ExtArgs["result"]["metodoPago"]>
  composites: {}
}

export type MetodoPagoGetPayload<S extends boolean | null | undefined | MetodoPagoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload, S>

export type MetodoPagoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MetodoPagoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MetodoPagoCountAggregateInputType | true
  }

export interface MetodoPagoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetodoPago'], meta: { name: 'MetodoPago' } }
  /**
   * Find zero or one MetodoPago that matches the filter.
   * @param {MetodoPagoFindUniqueArgs} args - Arguments to find a MetodoPago
   * @example
   * // Get one MetodoPago
   * const metodoPago = await prisma.metodoPago.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetodoPagoFindUniqueArgs>(args: Prisma.SelectSubset<T, MetodoPagoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MetodoPago that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetodoPagoFindUniqueOrThrowArgs} args - Arguments to find a MetodoPago
   * @example
   * // Get one MetodoPago
   * const metodoPago = await prisma.metodoPago.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetodoPagoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MetodoPagoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MetodoPago that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoFindFirstArgs} args - Arguments to find a MetodoPago
   * @example
   * // Get one MetodoPago
   * const metodoPago = await prisma.metodoPago.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetodoPagoFindFirstArgs>(args?: Prisma.SelectSubset<T, MetodoPagoFindFirstArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MetodoPago that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoFindFirstOrThrowArgs} args - Arguments to find a MetodoPago
   * @example
   * // Get one MetodoPago
   * const metodoPago = await prisma.metodoPago.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetodoPagoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MetodoPagoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MetodoPagos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MetodoPagos
   * const metodoPagos = await prisma.metodoPago.findMany()
   * 
   * // Get first 10 MetodoPagos
   * const metodoPagos = await prisma.metodoPago.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const metodoPagoWithIdOnly = await prisma.metodoPago.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MetodoPagoFindManyArgs>(args?: Prisma.SelectSubset<T, MetodoPagoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MetodoPago.
   * @param {MetodoPagoCreateArgs} args - Arguments to create a MetodoPago.
   * @example
   * // Create one MetodoPago
   * const MetodoPago = await prisma.metodoPago.create({
   *   data: {
   *     // ... data to create a MetodoPago
   *   }
   * })
   * 
   */
  create<T extends MetodoPagoCreateArgs>(args: Prisma.SelectSubset<T, MetodoPagoCreateArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MetodoPagos.
   * @param {MetodoPagoCreateManyArgs} args - Arguments to create many MetodoPagos.
   * @example
   * // Create many MetodoPagos
   * const metodoPago = await prisma.metodoPago.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MetodoPagoCreateManyArgs>(args?: Prisma.SelectSubset<T, MetodoPagoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MetodoPagos and returns the data saved in the database.
   * @param {MetodoPagoCreateManyAndReturnArgs} args - Arguments to create many MetodoPagos.
   * @example
   * // Create many MetodoPagos
   * const metodoPago = await prisma.metodoPago.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MetodoPagos and only return the `id`
   * const metodoPagoWithIdOnly = await prisma.metodoPago.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MetodoPagoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MetodoPagoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MetodoPago.
   * @param {MetodoPagoDeleteArgs} args - Arguments to delete one MetodoPago.
   * @example
   * // Delete one MetodoPago
   * const MetodoPago = await prisma.metodoPago.delete({
   *   where: {
   *     // ... filter to delete one MetodoPago
   *   }
   * })
   * 
   */
  delete<T extends MetodoPagoDeleteArgs>(args: Prisma.SelectSubset<T, MetodoPagoDeleteArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MetodoPago.
   * @param {MetodoPagoUpdateArgs} args - Arguments to update one MetodoPago.
   * @example
   * // Update one MetodoPago
   * const metodoPago = await prisma.metodoPago.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MetodoPagoUpdateArgs>(args: Prisma.SelectSubset<T, MetodoPagoUpdateArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MetodoPagos.
   * @param {MetodoPagoDeleteManyArgs} args - Arguments to filter MetodoPagos to delete.
   * @example
   * // Delete a few MetodoPagos
   * const { count } = await prisma.metodoPago.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MetodoPagoDeleteManyArgs>(args?: Prisma.SelectSubset<T, MetodoPagoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MetodoPagos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MetodoPagos
   * const metodoPago = await prisma.metodoPago.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MetodoPagoUpdateManyArgs>(args: Prisma.SelectSubset<T, MetodoPagoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MetodoPagos and returns the data updated in the database.
   * @param {MetodoPagoUpdateManyAndReturnArgs} args - Arguments to update many MetodoPagos.
   * @example
   * // Update many MetodoPagos
   * const metodoPago = await prisma.metodoPago.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MetodoPagos and only return the `id`
   * const metodoPagoWithIdOnly = await prisma.metodoPago.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MetodoPagoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MetodoPagoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MetodoPago.
   * @param {MetodoPagoUpsertArgs} args - Arguments to update or create a MetodoPago.
   * @example
   * // Update or create a MetodoPago
   * const metodoPago = await prisma.metodoPago.upsert({
   *   create: {
   *     // ... data to create a MetodoPago
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MetodoPago we want to update
   *   }
   * })
   */
  upsert<T extends MetodoPagoUpsertArgs>(args: Prisma.SelectSubset<T, MetodoPagoUpsertArgs<ExtArgs>>): Prisma.Prisma__MetodoPagoClient<runtime.Types.Result.GetResult<Prisma.$MetodoPagoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MetodoPagos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoCountArgs} args - Arguments to filter MetodoPagos to count.
   * @example
   * // Count the number of MetodoPagos
   * const count = await prisma.metodoPago.count({
   *   where: {
   *     // ... the filter for the MetodoPagos we want to count
   *   }
   * })
  **/
  count<T extends MetodoPagoCountArgs>(
    args?: Prisma.Subset<T, MetodoPagoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetodoPagoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MetodoPago.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MetodoPagoAggregateArgs>(args: Prisma.Subset<T, MetodoPagoAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoAggregateType<T>>

  /**
   * Group by MetodoPago.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetodoPagoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MetodoPagoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetodoPagoGroupByArgs['orderBy'] }
      : { orderBy?: MetodoPagoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MetodoPagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MetodoPago model
 */
readonly fields: MetodoPagoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MetodoPago.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetodoPagoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MetodoPago model
 */
export interface MetodoPagoFieldRefs {
  readonly id: Prisma.FieldRef<"MetodoPago", 'Int'>
  readonly nombre: Prisma.FieldRef<"MetodoPago", 'String'>
}
    

// Custom InputTypes
/**
 * MetodoPago findUnique
 */
export type MetodoPagoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter, which MetodoPago to fetch.
   */
  where: Prisma.MetodoPagoWhereUniqueInput
}

/**
 * MetodoPago findUniqueOrThrow
 */
export type MetodoPagoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter, which MetodoPago to fetch.
   */
  where: Prisma.MetodoPagoWhereUniqueInput
}

/**
 * MetodoPago findFirst
 */
export type MetodoPagoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter, which MetodoPago to fetch.
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MetodoPagos to fetch.
   */
  orderBy?: Prisma.MetodoPagoOrderByWithRelationInput | Prisma.MetodoPagoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MetodoPagos.
   */
  cursor?: Prisma.MetodoPagoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MetodoPagos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MetodoPagos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MetodoPagos.
   */
  distinct?: Prisma.MetodoPagoScalarFieldEnum | Prisma.MetodoPagoScalarFieldEnum[]
}

/**
 * MetodoPago findFirstOrThrow
 */
export type MetodoPagoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter, which MetodoPago to fetch.
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MetodoPagos to fetch.
   */
  orderBy?: Prisma.MetodoPagoOrderByWithRelationInput | Prisma.MetodoPagoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MetodoPagos.
   */
  cursor?: Prisma.MetodoPagoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MetodoPagos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MetodoPagos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MetodoPagos.
   */
  distinct?: Prisma.MetodoPagoScalarFieldEnum | Prisma.MetodoPagoScalarFieldEnum[]
}

/**
 * MetodoPago findMany
 */
export type MetodoPagoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter, which MetodoPagos to fetch.
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MetodoPagos to fetch.
   */
  orderBy?: Prisma.MetodoPagoOrderByWithRelationInput | Prisma.MetodoPagoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MetodoPagos.
   */
  cursor?: Prisma.MetodoPagoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MetodoPagos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MetodoPagos.
   */
  skip?: number
  distinct?: Prisma.MetodoPagoScalarFieldEnum | Prisma.MetodoPagoScalarFieldEnum[]
}

/**
 * MetodoPago create
 */
export type MetodoPagoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * The data needed to create a MetodoPago.
   */
  data: Prisma.XOR<Prisma.MetodoPagoCreateInput, Prisma.MetodoPagoUncheckedCreateInput>
}

/**
 * MetodoPago createMany
 */
export type MetodoPagoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MetodoPagos.
   */
  data: Prisma.MetodoPagoCreateManyInput | Prisma.MetodoPagoCreateManyInput[]
}

/**
 * MetodoPago createManyAndReturn
 */
export type MetodoPagoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * The data used to create many MetodoPagos.
   */
  data: Prisma.MetodoPagoCreateManyInput | Prisma.MetodoPagoCreateManyInput[]
}

/**
 * MetodoPago update
 */
export type MetodoPagoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * The data needed to update a MetodoPago.
   */
  data: Prisma.XOR<Prisma.MetodoPagoUpdateInput, Prisma.MetodoPagoUncheckedUpdateInput>
  /**
   * Choose, which MetodoPago to update.
   */
  where: Prisma.MetodoPagoWhereUniqueInput
}

/**
 * MetodoPago updateMany
 */
export type MetodoPagoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MetodoPagos.
   */
  data: Prisma.XOR<Prisma.MetodoPagoUpdateManyMutationInput, Prisma.MetodoPagoUncheckedUpdateManyInput>
  /**
   * Filter which MetodoPagos to update
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * Limit how many MetodoPagos to update.
   */
  limit?: number
}

/**
 * MetodoPago updateManyAndReturn
 */
export type MetodoPagoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * The data used to update MetodoPagos.
   */
  data: Prisma.XOR<Prisma.MetodoPagoUpdateManyMutationInput, Prisma.MetodoPagoUncheckedUpdateManyInput>
  /**
   * Filter which MetodoPagos to update
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * Limit how many MetodoPagos to update.
   */
  limit?: number
}

/**
 * MetodoPago upsert
 */
export type MetodoPagoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * The filter to search for the MetodoPago to update in case it exists.
   */
  where: Prisma.MetodoPagoWhereUniqueInput
  /**
   * In case the MetodoPago found by the `where` argument doesn't exist, create a new MetodoPago with this data.
   */
  create: Prisma.XOR<Prisma.MetodoPagoCreateInput, Prisma.MetodoPagoUncheckedCreateInput>
  /**
   * In case the MetodoPago was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MetodoPagoUpdateInput, Prisma.MetodoPagoUncheckedUpdateInput>
}

/**
 * MetodoPago delete
 */
export type MetodoPagoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
  /**
   * Filter which MetodoPago to delete.
   */
  where: Prisma.MetodoPagoWhereUniqueInput
}

/**
 * MetodoPago deleteMany
 */
export type MetodoPagoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MetodoPagos to delete
   */
  where?: Prisma.MetodoPagoWhereInput
  /**
   * Limit how many MetodoPagos to delete.
   */
  limit?: number
}

/**
 * MetodoPago without action
 */
export type MetodoPagoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MetodoPago
   */
  select?: Prisma.MetodoPagoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MetodoPago
   */
  omit?: Prisma.MetodoPagoOmit<ExtArgs> | null
}
