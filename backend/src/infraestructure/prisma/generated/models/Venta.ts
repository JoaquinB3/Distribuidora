
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Venta` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Venta
 * 
 */
export type VentaModel = runtime.Types.Result.DefaultSelection<Prisma.$VentaPayload>

export type AggregateVenta = {
  _count: VentaCountAggregateOutputType | null
  _avg: VentaAvgAggregateOutputType | null
  _sum: VentaSumAggregateOutputType | null
  _min: VentaMinAggregateOutputType | null
  _max: VentaMaxAggregateOutputType | null
}

export type VentaAvgAggregateOutputType = {
  id: number | null
  monto: number | null
  clienteId: number | null
}

export type VentaSumAggregateOutputType = {
  id: number | null
  monto: number | null
  clienteId: number | null
}

export type VentaMinAggregateOutputType = {
  id: number | null
  monto: number | null
  fecha: Date | null
  metodoPagoId: string | null
  clienteId: number | null
}

export type VentaMaxAggregateOutputType = {
  id: number | null
  monto: number | null
  fecha: Date | null
  metodoPagoId: string | null
  clienteId: number | null
}

export type VentaCountAggregateOutputType = {
  id: number
  monto: number
  fecha: number
  metodoPagoId: number
  clienteId: number
  _all: number
}


export type VentaAvgAggregateInputType = {
  id?: true
  monto?: true
  clienteId?: true
}

export type VentaSumAggregateInputType = {
  id?: true
  monto?: true
  clienteId?: true
}

export type VentaMinAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPagoId?: true
  clienteId?: true
}

export type VentaMaxAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPagoId?: true
  clienteId?: true
}

export type VentaCountAggregateInputType = {
  id?: true
  monto?: true
  fecha?: true
  metodoPagoId?: true
  clienteId?: true
  _all?: true
}

export type VentaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Venta to aggregate.
   */
  where?: Prisma.VentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ventas to fetch.
   */
  orderBy?: Prisma.VentaOrderByWithRelationInput | Prisma.VentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ventas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ventas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Ventas
  **/
  _count?: true | VentaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: VentaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: VentaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VentaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VentaMaxAggregateInputType
}

export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
      [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVenta[P]>
    : Prisma.GetScalarType<T[P], AggregateVenta[P]>
}




export type VentaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VentaWhereInput
  orderBy?: Prisma.VentaOrderByWithAggregationInput | Prisma.VentaOrderByWithAggregationInput[]
  by: Prisma.VentaScalarFieldEnum[] | Prisma.VentaScalarFieldEnum
  having?: Prisma.VentaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VentaCountAggregateInputType | true
  _avg?: VentaAvgAggregateInputType
  _sum?: VentaSumAggregateInputType
  _min?: VentaMinAggregateInputType
  _max?: VentaMaxAggregateInputType
}

export type VentaGroupByOutputType = {
  id: number
  monto: number
  fecha: Date
  metodoPagoId: string
  clienteId: number
  _count: VentaCountAggregateOutputType | null
  _avg: VentaAvgAggregateOutputType | null
  _sum: VentaSumAggregateOutputType | null
  _min: VentaMinAggregateOutputType | null
  _max: VentaMaxAggregateOutputType | null
}

type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VentaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VentaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VentaGroupByOutputType[P]>
      }
    >
  > 



export type VentaWhereInput = {
  AND?: Prisma.VentaWhereInput | Prisma.VentaWhereInput[]
  OR?: Prisma.VentaWhereInput[]
  NOT?: Prisma.VentaWhereInput | Prisma.VentaWhereInput[]
  id?: Prisma.IntFilter<"Venta"> | number
  monto?: Prisma.FloatFilter<"Venta"> | number
  fecha?: Prisma.DateTimeFilter<"Venta"> | Date | string
  metodoPagoId?: Prisma.StringFilter<"Venta"> | string
  clienteId?: Prisma.IntFilter<"Venta"> | number
  cliente?: Prisma.XOR<Prisma.ClienteScalarRelationFilter, Prisma.ClienteWhereInput>
  productosXVenta?: Prisma.ProductoXVentaListRelationFilter
  factura?: Prisma.XOR<Prisma.FacturaNullableScalarRelationFilter, Prisma.FacturaWhereInput> | null
}

export type VentaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPagoId?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
  cliente?: Prisma.ClienteOrderByWithRelationInput
  productosXVenta?: Prisma.ProductoXVentaOrderByRelationAggregateInput
  factura?: Prisma.FacturaOrderByWithRelationInput
}

export type VentaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.VentaWhereInput | Prisma.VentaWhereInput[]
  OR?: Prisma.VentaWhereInput[]
  NOT?: Prisma.VentaWhereInput | Prisma.VentaWhereInput[]
  monto?: Prisma.FloatFilter<"Venta"> | number
  fecha?: Prisma.DateTimeFilter<"Venta"> | Date | string
  metodoPagoId?: Prisma.StringFilter<"Venta"> | string
  clienteId?: Prisma.IntFilter<"Venta"> | number
  cliente?: Prisma.XOR<Prisma.ClienteScalarRelationFilter, Prisma.ClienteWhereInput>
  productosXVenta?: Prisma.ProductoXVentaListRelationFilter
  factura?: Prisma.XOR<Prisma.FacturaNullableScalarRelationFilter, Prisma.FacturaWhereInput> | null
}, "id">

export type VentaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPagoId?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
  _count?: Prisma.VentaCountOrderByAggregateInput
  _avg?: Prisma.VentaAvgOrderByAggregateInput
  _max?: Prisma.VentaMaxOrderByAggregateInput
  _min?: Prisma.VentaMinOrderByAggregateInput
  _sum?: Prisma.VentaSumOrderByAggregateInput
}

export type VentaScalarWhereWithAggregatesInput = {
  AND?: Prisma.VentaScalarWhereWithAggregatesInput | Prisma.VentaScalarWhereWithAggregatesInput[]
  OR?: Prisma.VentaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VentaScalarWhereWithAggregatesInput | Prisma.VentaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Venta"> | number
  monto?: Prisma.FloatWithAggregatesFilter<"Venta"> | number
  fecha?: Prisma.DateTimeWithAggregatesFilter<"Venta"> | Date | string
  metodoPagoId?: Prisma.StringWithAggregatesFilter<"Venta"> | string
  clienteId?: Prisma.IntWithAggregatesFilter<"Venta"> | number
}

export type VentaCreateInput = {
  monto: number
  fecha: Date | string
  metodoPagoId: string
  cliente: Prisma.ClienteCreateNestedOneWithoutVentasInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutVentaInput
  factura?: Prisma.FacturaCreateNestedOneWithoutVentaInput
}

export type VentaUncheckedCreateInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
  clienteId: number
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutVentaInput
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutVentaInput
}

export type VentaUpdateInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  cliente?: Prisma.ClienteUpdateOneRequiredWithoutVentasNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutVentaNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutVentaNestedInput
}

export type VentaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  clienteId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutVentaNestedInput
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutVentaNestedInput
}

export type VentaCreateManyInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
  clienteId: number
}

export type VentaUpdateManyMutationInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type VentaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  clienteId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type VentaListRelationFilter = {
  every?: Prisma.VentaWhereInput
  some?: Prisma.VentaWhereInput
  none?: Prisma.VentaWhereInput
}

export type VentaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type VentaNullableScalarRelationFilter = {
  is?: Prisma.VentaWhereInput | null
  isNot?: Prisma.VentaWhereInput | null
}

export type VentaScalarRelationFilter = {
  is?: Prisma.VentaWhereInput
  isNot?: Prisma.VentaWhereInput
}

export type VentaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPagoId?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
}

export type VentaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
}

export type VentaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPagoId?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
}

export type VentaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  fecha?: Prisma.SortOrder
  metodoPagoId?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
}

export type VentaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  monto?: Prisma.SortOrder
  clienteId?: Prisma.SortOrder
}

export type VentaCreateNestedManyWithoutClienteInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput> | Prisma.VentaCreateWithoutClienteInput[] | Prisma.VentaUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutClienteInput | Prisma.VentaCreateOrConnectWithoutClienteInput[]
  createMany?: Prisma.VentaCreateManyClienteInputEnvelope
  connect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
}

export type VentaUncheckedCreateNestedManyWithoutClienteInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput> | Prisma.VentaCreateWithoutClienteInput[] | Prisma.VentaUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutClienteInput | Prisma.VentaCreateOrConnectWithoutClienteInput[]
  createMany?: Prisma.VentaCreateManyClienteInputEnvelope
  connect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
}

export type VentaUpdateManyWithoutClienteNestedInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput> | Prisma.VentaCreateWithoutClienteInput[] | Prisma.VentaUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutClienteInput | Prisma.VentaCreateOrConnectWithoutClienteInput[]
  upsert?: Prisma.VentaUpsertWithWhereUniqueWithoutClienteInput | Prisma.VentaUpsertWithWhereUniqueWithoutClienteInput[]
  createMany?: Prisma.VentaCreateManyClienteInputEnvelope
  set?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  disconnect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  delete?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  connect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  update?: Prisma.VentaUpdateWithWhereUniqueWithoutClienteInput | Prisma.VentaUpdateWithWhereUniqueWithoutClienteInput[]
  updateMany?: Prisma.VentaUpdateManyWithWhereWithoutClienteInput | Prisma.VentaUpdateManyWithWhereWithoutClienteInput[]
  deleteMany?: Prisma.VentaScalarWhereInput | Prisma.VentaScalarWhereInput[]
}

export type VentaUncheckedUpdateManyWithoutClienteNestedInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput> | Prisma.VentaCreateWithoutClienteInput[] | Prisma.VentaUncheckedCreateWithoutClienteInput[]
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutClienteInput | Prisma.VentaCreateOrConnectWithoutClienteInput[]
  upsert?: Prisma.VentaUpsertWithWhereUniqueWithoutClienteInput | Prisma.VentaUpsertWithWhereUniqueWithoutClienteInput[]
  createMany?: Prisma.VentaCreateManyClienteInputEnvelope
  set?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  disconnect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  delete?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  connect?: Prisma.VentaWhereUniqueInput | Prisma.VentaWhereUniqueInput[]
  update?: Prisma.VentaUpdateWithWhereUniqueWithoutClienteInput | Prisma.VentaUpdateWithWhereUniqueWithoutClienteInput[]
  updateMany?: Prisma.VentaUpdateManyWithWhereWithoutClienteInput | Prisma.VentaUpdateManyWithWhereWithoutClienteInput[]
  deleteMany?: Prisma.VentaScalarWhereInput | Prisma.VentaScalarWhereInput[]
}

export type VentaCreateNestedOneWithoutFacturaInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutFacturaInput, Prisma.VentaUncheckedCreateWithoutFacturaInput>
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutFacturaInput
  connect?: Prisma.VentaWhereUniqueInput
}

export type VentaUpdateOneWithoutFacturaNestedInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutFacturaInput, Prisma.VentaUncheckedCreateWithoutFacturaInput>
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutFacturaInput
  upsert?: Prisma.VentaUpsertWithoutFacturaInput
  disconnect?: Prisma.VentaWhereInput | boolean
  delete?: Prisma.VentaWhereInput | boolean
  connect?: Prisma.VentaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VentaUpdateToOneWithWhereWithoutFacturaInput, Prisma.VentaUpdateWithoutFacturaInput>, Prisma.VentaUncheckedUpdateWithoutFacturaInput>
}

export type VentaCreateNestedOneWithoutProductosXVentaInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutProductosXVentaInput, Prisma.VentaUncheckedCreateWithoutProductosXVentaInput>
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutProductosXVentaInput
  connect?: Prisma.VentaWhereUniqueInput
}

export type VentaUpdateOneRequiredWithoutProductosXVentaNestedInput = {
  create?: Prisma.XOR<Prisma.VentaCreateWithoutProductosXVentaInput, Prisma.VentaUncheckedCreateWithoutProductosXVentaInput>
  connectOrCreate?: Prisma.VentaCreateOrConnectWithoutProductosXVentaInput
  upsert?: Prisma.VentaUpsertWithoutProductosXVentaInput
  connect?: Prisma.VentaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.VentaUpdateToOneWithWhereWithoutProductosXVentaInput, Prisma.VentaUpdateWithoutProductosXVentaInput>, Prisma.VentaUncheckedUpdateWithoutProductosXVentaInput>
}

export type VentaCreateWithoutClienteInput = {
  monto: number
  fecha: Date | string
  metodoPagoId: string
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutVentaInput
  factura?: Prisma.FacturaCreateNestedOneWithoutVentaInput
}

export type VentaUncheckedCreateWithoutClienteInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutVentaInput
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutVentaInput
}

export type VentaCreateOrConnectWithoutClienteInput = {
  where: Prisma.VentaWhereUniqueInput
  create: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput>
}

export type VentaCreateManyClienteInputEnvelope = {
  data: Prisma.VentaCreateManyClienteInput | Prisma.VentaCreateManyClienteInput[]
}

export type VentaUpsertWithWhereUniqueWithoutClienteInput = {
  where: Prisma.VentaWhereUniqueInput
  update: Prisma.XOR<Prisma.VentaUpdateWithoutClienteInput, Prisma.VentaUncheckedUpdateWithoutClienteInput>
  create: Prisma.XOR<Prisma.VentaCreateWithoutClienteInput, Prisma.VentaUncheckedCreateWithoutClienteInput>
}

export type VentaUpdateWithWhereUniqueWithoutClienteInput = {
  where: Prisma.VentaWhereUniqueInput
  data: Prisma.XOR<Prisma.VentaUpdateWithoutClienteInput, Prisma.VentaUncheckedUpdateWithoutClienteInput>
}

export type VentaUpdateManyWithWhereWithoutClienteInput = {
  where: Prisma.VentaScalarWhereInput
  data: Prisma.XOR<Prisma.VentaUpdateManyMutationInput, Prisma.VentaUncheckedUpdateManyWithoutClienteInput>
}

export type VentaScalarWhereInput = {
  AND?: Prisma.VentaScalarWhereInput | Prisma.VentaScalarWhereInput[]
  OR?: Prisma.VentaScalarWhereInput[]
  NOT?: Prisma.VentaScalarWhereInput | Prisma.VentaScalarWhereInput[]
  id?: Prisma.IntFilter<"Venta"> | number
  monto?: Prisma.FloatFilter<"Venta"> | number
  fecha?: Prisma.DateTimeFilter<"Venta"> | Date | string
  metodoPagoId?: Prisma.StringFilter<"Venta"> | string
  clienteId?: Prisma.IntFilter<"Venta"> | number
}

export type VentaCreateWithoutFacturaInput = {
  monto: number
  fecha: Date | string
  metodoPagoId: string
  cliente: Prisma.ClienteCreateNestedOneWithoutVentasInput
  productosXVenta?: Prisma.ProductoXVentaCreateNestedManyWithoutVentaInput
}

export type VentaUncheckedCreateWithoutFacturaInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
  clienteId: number
  productosXVenta?: Prisma.ProductoXVentaUncheckedCreateNestedManyWithoutVentaInput
}

export type VentaCreateOrConnectWithoutFacturaInput = {
  where: Prisma.VentaWhereUniqueInput
  create: Prisma.XOR<Prisma.VentaCreateWithoutFacturaInput, Prisma.VentaUncheckedCreateWithoutFacturaInput>
}

export type VentaUpsertWithoutFacturaInput = {
  update: Prisma.XOR<Prisma.VentaUpdateWithoutFacturaInput, Prisma.VentaUncheckedUpdateWithoutFacturaInput>
  create: Prisma.XOR<Prisma.VentaCreateWithoutFacturaInput, Prisma.VentaUncheckedCreateWithoutFacturaInput>
  where?: Prisma.VentaWhereInput
}

export type VentaUpdateToOneWithWhereWithoutFacturaInput = {
  where?: Prisma.VentaWhereInput
  data: Prisma.XOR<Prisma.VentaUpdateWithoutFacturaInput, Prisma.VentaUncheckedUpdateWithoutFacturaInput>
}

export type VentaUpdateWithoutFacturaInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  cliente?: Prisma.ClienteUpdateOneRequiredWithoutVentasNestedInput
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutVentaNestedInput
}

export type VentaUncheckedUpdateWithoutFacturaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  clienteId?: Prisma.IntFieldUpdateOperationsInput | number
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutVentaNestedInput
}

export type VentaCreateWithoutProductosXVentaInput = {
  monto: number
  fecha: Date | string
  metodoPagoId: string
  cliente: Prisma.ClienteCreateNestedOneWithoutVentasInput
  factura?: Prisma.FacturaCreateNestedOneWithoutVentaInput
}

export type VentaUncheckedCreateWithoutProductosXVentaInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
  clienteId: number
  factura?: Prisma.FacturaUncheckedCreateNestedOneWithoutVentaInput
}

export type VentaCreateOrConnectWithoutProductosXVentaInput = {
  where: Prisma.VentaWhereUniqueInput
  create: Prisma.XOR<Prisma.VentaCreateWithoutProductosXVentaInput, Prisma.VentaUncheckedCreateWithoutProductosXVentaInput>
}

export type VentaUpsertWithoutProductosXVentaInput = {
  update: Prisma.XOR<Prisma.VentaUpdateWithoutProductosXVentaInput, Prisma.VentaUncheckedUpdateWithoutProductosXVentaInput>
  create: Prisma.XOR<Prisma.VentaCreateWithoutProductosXVentaInput, Prisma.VentaUncheckedCreateWithoutProductosXVentaInput>
  where?: Prisma.VentaWhereInput
}

export type VentaUpdateToOneWithWhereWithoutProductosXVentaInput = {
  where?: Prisma.VentaWhereInput
  data: Prisma.XOR<Prisma.VentaUpdateWithoutProductosXVentaInput, Prisma.VentaUncheckedUpdateWithoutProductosXVentaInput>
}

export type VentaUpdateWithoutProductosXVentaInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  cliente?: Prisma.ClienteUpdateOneRequiredWithoutVentasNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutVentaNestedInput
}

export type VentaUncheckedUpdateWithoutProductosXVentaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  clienteId?: Prisma.IntFieldUpdateOperationsInput | number
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutVentaNestedInput
}

export type VentaCreateManyClienteInput = {
  id?: number
  monto: number
  fecha: Date | string
  metodoPagoId: string
}

export type VentaUpdateWithoutClienteInput = {
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  productosXVenta?: Prisma.ProductoXVentaUpdateManyWithoutVentaNestedInput
  factura?: Prisma.FacturaUpdateOneWithoutVentaNestedInput
}

export type VentaUncheckedUpdateWithoutClienteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
  productosXVenta?: Prisma.ProductoXVentaUncheckedUpdateManyWithoutVentaNestedInput
  factura?: Prisma.FacturaUncheckedUpdateOneWithoutVentaNestedInput
}

export type VentaUncheckedUpdateManyWithoutClienteInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  monto?: Prisma.FloatFieldUpdateOperationsInput | number
  fecha?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  metodoPagoId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type VentaCountOutputType
 */

export type VentaCountOutputType = {
  productosXVenta: number
}

export type VentaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productosXVenta?: boolean | VentaCountOutputTypeCountProductosXVentaArgs
}

/**
 * VentaCountOutputType without action
 */
export type VentaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the VentaCountOutputType
   */
  select?: Prisma.VentaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * VentaCountOutputType without action
 */
export type VentaCountOutputTypeCountProductosXVentaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoXVentaWhereInput
}


export type VentaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPagoId?: boolean
  clienteId?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  productosXVenta?: boolean | Prisma.Venta$productosXVentaArgs<ExtArgs>
  factura?: boolean | Prisma.Venta$facturaArgs<ExtArgs>
  _count?: boolean | Prisma.VentaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["venta"]>

export type VentaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPagoId?: boolean
  clienteId?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
}, ExtArgs["result"]["venta"]>

export type VentaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPagoId?: boolean
  clienteId?: boolean
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
}, ExtArgs["result"]["venta"]>

export type VentaSelectScalar = {
  id?: boolean
  monto?: boolean
  fecha?: boolean
  metodoPagoId?: boolean
  clienteId?: boolean
}

export type VentaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "monto" | "fecha" | "metodoPagoId" | "clienteId", ExtArgs["result"]["venta"]>
export type VentaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
  productosXVenta?: boolean | Prisma.Venta$productosXVentaArgs<ExtArgs>
  factura?: boolean | Prisma.Venta$facturaArgs<ExtArgs>
  _count?: boolean | Prisma.VentaCountOutputTypeDefaultArgs<ExtArgs>
}
export type VentaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
}
export type VentaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  cliente?: boolean | Prisma.ClienteDefaultArgs<ExtArgs>
}

export type $VentaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Venta"
  objects: {
    cliente: Prisma.$ClientePayload<ExtArgs>
    productosXVenta: Prisma.$ProductoXVentaPayload<ExtArgs>[]
    factura: Prisma.$FacturaPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    monto: number
    fecha: Date
    metodoPagoId: string
    clienteId: number
  }, ExtArgs["result"]["venta"]>
  composites: {}
}

export type VentaGetPayload<S extends boolean | null | undefined | VentaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VentaPayload, S>

export type VentaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VentaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VentaCountAggregateInputType | true
  }

export interface VentaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venta'], meta: { name: 'Venta' } }
  /**
   * Find zero or one Venta that matches the filter.
   * @param {VentaFindUniqueArgs} args - Arguments to find a Venta
   * @example
   * // Get one Venta
   * const venta = await prisma.venta.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VentaFindUniqueArgs>(args: Prisma.SelectSubset<T, VentaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Venta that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VentaFindUniqueOrThrowArgs} args - Arguments to find a Venta
   * @example
   * // Get one Venta
   * const venta = await prisma.venta.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VentaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Venta that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaFindFirstArgs} args - Arguments to find a Venta
   * @example
   * // Get one Venta
   * const venta = await prisma.venta.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VentaFindFirstArgs>(args?: Prisma.SelectSubset<T, VentaFindFirstArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Venta that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaFindFirstOrThrowArgs} args - Arguments to find a Venta
   * @example
   * // Get one Venta
   * const venta = await prisma.venta.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VentaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VentaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ventas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ventas
   * const ventas = await prisma.venta.findMany()
   * 
   * // Get first 10 Ventas
   * const ventas = await prisma.venta.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ventaWithIdOnly = await prisma.venta.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VentaFindManyArgs>(args?: Prisma.SelectSubset<T, VentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Venta.
   * @param {VentaCreateArgs} args - Arguments to create a Venta.
   * @example
   * // Create one Venta
   * const Venta = await prisma.venta.create({
   *   data: {
   *     // ... data to create a Venta
   *   }
   * })
   * 
   */
  create<T extends VentaCreateArgs>(args: Prisma.SelectSubset<T, VentaCreateArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ventas.
   * @param {VentaCreateManyArgs} args - Arguments to create many Ventas.
   * @example
   * // Create many Ventas
   * const venta = await prisma.venta.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VentaCreateManyArgs>(args?: Prisma.SelectSubset<T, VentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Ventas and returns the data saved in the database.
   * @param {VentaCreateManyAndReturnArgs} args - Arguments to create many Ventas.
   * @example
   * // Create many Ventas
   * const venta = await prisma.venta.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Ventas and only return the `id`
   * const ventaWithIdOnly = await prisma.venta.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VentaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VentaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Venta.
   * @param {VentaDeleteArgs} args - Arguments to delete one Venta.
   * @example
   * // Delete one Venta
   * const Venta = await prisma.venta.delete({
   *   where: {
   *     // ... filter to delete one Venta
   *   }
   * })
   * 
   */
  delete<T extends VentaDeleteArgs>(args: Prisma.SelectSubset<T, VentaDeleteArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Venta.
   * @param {VentaUpdateArgs} args - Arguments to update one Venta.
   * @example
   * // Update one Venta
   * const venta = await prisma.venta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VentaUpdateArgs>(args: Prisma.SelectSubset<T, VentaUpdateArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ventas.
   * @param {VentaDeleteManyArgs} args - Arguments to filter Ventas to delete.
   * @example
   * // Delete a few Ventas
   * const { count } = await prisma.venta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VentaDeleteManyArgs>(args?: Prisma.SelectSubset<T, VentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ventas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ventas
   * const venta = await prisma.venta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VentaUpdateManyArgs>(args: Prisma.SelectSubset<T, VentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ventas and returns the data updated in the database.
   * @param {VentaUpdateManyAndReturnArgs} args - Arguments to update many Ventas.
   * @example
   * // Update many Ventas
   * const venta = await prisma.venta.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Ventas and only return the `id`
   * const ventaWithIdOnly = await prisma.venta.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VentaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VentaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Venta.
   * @param {VentaUpsertArgs} args - Arguments to update or create a Venta.
   * @example
   * // Update or create a Venta
   * const venta = await prisma.venta.upsert({
   *   create: {
   *     // ... data to create a Venta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Venta we want to update
   *   }
   * })
   */
  upsert<T extends VentaUpsertArgs>(args: Prisma.SelectSubset<T, VentaUpsertArgs<ExtArgs>>): Prisma.Prisma__VentaClient<runtime.Types.Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ventas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaCountArgs} args - Arguments to filter Ventas to count.
   * @example
   * // Count the number of Ventas
   * const count = await prisma.venta.count({
   *   where: {
   *     // ... the filter for the Ventas we want to count
   *   }
   * })
  **/
  count<T extends VentaCountArgs>(
    args?: Prisma.Subset<T, VentaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VentaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Venta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VentaAggregateArgs>(args: Prisma.Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

  /**
   * Group by Venta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VentaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VentaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VentaGroupByArgs['orderBy'] }
      : { orderBy?: VentaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Venta model
 */
readonly fields: VentaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Venta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VentaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  cliente<T extends Prisma.ClienteDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClienteDefaultArgs<ExtArgs>>): Prisma.Prisma__ClienteClient<runtime.Types.Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  productosXVenta<T extends Prisma.Venta$productosXVentaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Venta$productosXVentaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoXVentaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  factura<T extends Prisma.Venta$facturaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Venta$facturaArgs<ExtArgs>>): Prisma.Prisma__FacturaClient<runtime.Types.Result.GetResult<Prisma.$FacturaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Venta model
 */
export interface VentaFieldRefs {
  readonly id: Prisma.FieldRef<"Venta", 'Int'>
  readonly monto: Prisma.FieldRef<"Venta", 'Float'>
  readonly fecha: Prisma.FieldRef<"Venta", 'DateTime'>
  readonly metodoPagoId: Prisma.FieldRef<"Venta", 'String'>
  readonly clienteId: Prisma.FieldRef<"Venta", 'Int'>
}
    

// Custom InputTypes
/**
 * Venta findUnique
 */
export type VentaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter, which Venta to fetch.
   */
  where: Prisma.VentaWhereUniqueInput
}

/**
 * Venta findUniqueOrThrow
 */
export type VentaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter, which Venta to fetch.
   */
  where: Prisma.VentaWhereUniqueInput
}

/**
 * Venta findFirst
 */
export type VentaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter, which Venta to fetch.
   */
  where?: Prisma.VentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ventas to fetch.
   */
  orderBy?: Prisma.VentaOrderByWithRelationInput | Prisma.VentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ventas.
   */
  cursor?: Prisma.VentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ventas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ventas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ventas.
   */
  distinct?: Prisma.VentaScalarFieldEnum | Prisma.VentaScalarFieldEnum[]
}

/**
 * Venta findFirstOrThrow
 */
export type VentaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter, which Venta to fetch.
   */
  where?: Prisma.VentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ventas to fetch.
   */
  orderBy?: Prisma.VentaOrderByWithRelationInput | Prisma.VentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Ventas.
   */
  cursor?: Prisma.VentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ventas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ventas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Ventas.
   */
  distinct?: Prisma.VentaScalarFieldEnum | Prisma.VentaScalarFieldEnum[]
}

/**
 * Venta findMany
 */
export type VentaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter, which Ventas to fetch.
   */
  where?: Prisma.VentaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Ventas to fetch.
   */
  orderBy?: Prisma.VentaOrderByWithRelationInput | Prisma.VentaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Ventas.
   */
  cursor?: Prisma.VentaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Ventas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Ventas.
   */
  skip?: number
  distinct?: Prisma.VentaScalarFieldEnum | Prisma.VentaScalarFieldEnum[]
}

/**
 * Venta create
 */
export type VentaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * The data needed to create a Venta.
   */
  data: Prisma.XOR<Prisma.VentaCreateInput, Prisma.VentaUncheckedCreateInput>
}

/**
 * Venta createMany
 */
export type VentaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Ventas.
   */
  data: Prisma.VentaCreateManyInput | Prisma.VentaCreateManyInput[]
}

/**
 * Venta createManyAndReturn
 */
export type VentaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * The data used to create many Ventas.
   */
  data: Prisma.VentaCreateManyInput | Prisma.VentaCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Venta update
 */
export type VentaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * The data needed to update a Venta.
   */
  data: Prisma.XOR<Prisma.VentaUpdateInput, Prisma.VentaUncheckedUpdateInput>
  /**
   * Choose, which Venta to update.
   */
  where: Prisma.VentaWhereUniqueInput
}

/**
 * Venta updateMany
 */
export type VentaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Ventas.
   */
  data: Prisma.XOR<Prisma.VentaUpdateManyMutationInput, Prisma.VentaUncheckedUpdateManyInput>
  /**
   * Filter which Ventas to update
   */
  where?: Prisma.VentaWhereInput
  /**
   * Limit how many Ventas to update.
   */
  limit?: number
}

/**
 * Venta updateManyAndReturn
 */
export type VentaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * The data used to update Ventas.
   */
  data: Prisma.XOR<Prisma.VentaUpdateManyMutationInput, Prisma.VentaUncheckedUpdateManyInput>
  /**
   * Filter which Ventas to update
   */
  where?: Prisma.VentaWhereInput
  /**
   * Limit how many Ventas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Venta upsert
 */
export type VentaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * The filter to search for the Venta to update in case it exists.
   */
  where: Prisma.VentaWhereUniqueInput
  /**
   * In case the Venta found by the `where` argument doesn't exist, create a new Venta with this data.
   */
  create: Prisma.XOR<Prisma.VentaCreateInput, Prisma.VentaUncheckedCreateInput>
  /**
   * In case the Venta was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VentaUpdateInput, Prisma.VentaUncheckedUpdateInput>
}

/**
 * Venta delete
 */
export type VentaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
  /**
   * Filter which Venta to delete.
   */
  where: Prisma.VentaWhereUniqueInput
}

/**
 * Venta deleteMany
 */
export type VentaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Ventas to delete
   */
  where?: Prisma.VentaWhereInput
  /**
   * Limit how many Ventas to delete.
   */
  limit?: number
}

/**
 * Venta.productosXVenta
 */
export type Venta$productosXVentaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductoXVenta
   */
  select?: Prisma.ProductoXVentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductoXVenta
   */
  omit?: Prisma.ProductoXVentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoXVentaInclude<ExtArgs> | null
  where?: Prisma.ProductoXVentaWhereInput
  orderBy?: Prisma.ProductoXVentaOrderByWithRelationInput | Prisma.ProductoXVentaOrderByWithRelationInput[]
  cursor?: Prisma.ProductoXVentaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoXVentaScalarFieldEnum | Prisma.ProductoXVentaScalarFieldEnum[]
}

/**
 * Venta.factura
 */
export type Venta$facturaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Factura
   */
  select?: Prisma.FacturaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Factura
   */
  omit?: Prisma.FacturaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FacturaInclude<ExtArgs> | null
  where?: Prisma.FacturaWhereInput
}

/**
 * Venta without action
 */
export type VentaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Venta
   */
  select?: Prisma.VentaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Venta
   */
  omit?: Prisma.VentaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VentaInclude<ExtArgs> | null
}
