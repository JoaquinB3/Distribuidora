
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Categoria` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Categoria
 * 
 */
export type CategoriaModel = runtime.Types.Result.DefaultSelection<Prisma.$CategoriaPayload>

export type AggregateCategoria = {
  _count: CategoriaCountAggregateOutputType | null
  _avg: CategoriaAvgAggregateOutputType | null
  _sum: CategoriaSumAggregateOutputType | null
  _min: CategoriaMinAggregateOutputType | null
  _max: CategoriaMaxAggregateOutputType | null
}

export type CategoriaAvgAggregateOutputType = {
  id: number | null
}

export type CategoriaSumAggregateOutputType = {
  id: number | null
}

export type CategoriaMinAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type CategoriaMaxAggregateOutputType = {
  id: number | null
  nombre: string | null
}

export type CategoriaCountAggregateOutputType = {
  id: number
  nombre: number
  _all: number
}


export type CategoriaAvgAggregateInputType = {
  id?: true
}

export type CategoriaSumAggregateInputType = {
  id?: true
}

export type CategoriaMinAggregateInputType = {
  id?: true
  nombre?: true
}

export type CategoriaMaxAggregateInputType = {
  id?: true
  nombre?: true
}

export type CategoriaCountAggregateInputType = {
  id?: true
  nombre?: true
  _all?: true
}

export type CategoriaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Categoria to aggregate.
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Categorias to fetch.
   */
  orderBy?: Prisma.CategoriaOrderByWithRelationInput | Prisma.CategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Categorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Categorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Categorias
  **/
  _count?: true | CategoriaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CategoriaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CategoriaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CategoriaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CategoriaMaxAggregateInputType
}

export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
      [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCategoria[P]>
    : Prisma.GetScalarType<T[P], AggregateCategoria[P]>
}




export type CategoriaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CategoriaWhereInput
  orderBy?: Prisma.CategoriaOrderByWithAggregationInput | Prisma.CategoriaOrderByWithAggregationInput[]
  by: Prisma.CategoriaScalarFieldEnum[] | Prisma.CategoriaScalarFieldEnum
  having?: Prisma.CategoriaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CategoriaCountAggregateInputType | true
  _avg?: CategoriaAvgAggregateInputType
  _sum?: CategoriaSumAggregateInputType
  _min?: CategoriaMinAggregateInputType
  _max?: CategoriaMaxAggregateInputType
}

export type CategoriaGroupByOutputType = {
  id: number
  nombre: string
  _count: CategoriaCountAggregateOutputType | null
  _avg: CategoriaAvgAggregateOutputType | null
  _sum: CategoriaSumAggregateOutputType | null
  _min: CategoriaMinAggregateOutputType | null
  _max: CategoriaMaxAggregateOutputType | null
}

type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CategoriaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CategoriaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CategoriaGroupByOutputType[P]>
      }
    >
  > 



export type CategoriaWhereInput = {
  AND?: Prisma.CategoriaWhereInput | Prisma.CategoriaWhereInput[]
  OR?: Prisma.CategoriaWhereInput[]
  NOT?: Prisma.CategoriaWhereInput | Prisma.CategoriaWhereInput[]
  id?: Prisma.IntFilter<"Categoria"> | number
  nombre?: Prisma.StringFilter<"Categoria"> | string
  productos?: Prisma.ProductoListRelationFilter
}

export type CategoriaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  productos?: Prisma.ProductoOrderByRelationAggregateInput
}

export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CategoriaWhereInput | Prisma.CategoriaWhereInput[]
  OR?: Prisma.CategoriaWhereInput[]
  NOT?: Prisma.CategoriaWhereInput | Prisma.CategoriaWhereInput[]
  nombre?: Prisma.StringFilter<"Categoria"> | string
  productos?: Prisma.ProductoListRelationFilter
}, "id">

export type CategoriaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
  _count?: Prisma.CategoriaCountOrderByAggregateInput
  _avg?: Prisma.CategoriaAvgOrderByAggregateInput
  _max?: Prisma.CategoriaMaxOrderByAggregateInput
  _min?: Prisma.CategoriaMinOrderByAggregateInput
  _sum?: Prisma.CategoriaSumOrderByAggregateInput
}

export type CategoriaScalarWhereWithAggregatesInput = {
  AND?: Prisma.CategoriaScalarWhereWithAggregatesInput | Prisma.CategoriaScalarWhereWithAggregatesInput[]
  OR?: Prisma.CategoriaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CategoriaScalarWhereWithAggregatesInput | Prisma.CategoriaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Categoria"> | number
  nombre?: Prisma.StringWithAggregatesFilter<"Categoria"> | string
}

export type CategoriaCreateInput = {
  nombre: string
  productos?: Prisma.ProductoCreateNestedManyWithoutCategoriaInput
}

export type CategoriaUncheckedCreateInput = {
  id?: number
  nombre: string
  productos?: Prisma.ProductoUncheckedCreateNestedManyWithoutCategoriaInput
}

export type CategoriaUpdateInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  productos?: Prisma.ProductoUpdateManyWithoutCategoriaNestedInput
}

export type CategoriaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
  productos?: Prisma.ProductoUncheckedUpdateManyWithoutCategoriaNestedInput
}

export type CategoriaCreateManyInput = {
  id?: number
  nombre: string
}

export type CategoriaUpdateManyMutationInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CategoriaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CategoriaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type CategoriaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CategoriaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type CategoriaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nombre?: Prisma.SortOrder
}

export type CategoriaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CategoriaScalarRelationFilter = {
  is?: Prisma.CategoriaWhereInput
  isNot?: Prisma.CategoriaWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type CategoriaCreateNestedOneWithoutProductosInput = {
  create?: Prisma.XOR<Prisma.CategoriaCreateWithoutProductosInput, Prisma.CategoriaUncheckedCreateWithoutProductosInput>
  connectOrCreate?: Prisma.CategoriaCreateOrConnectWithoutProductosInput
  connect?: Prisma.CategoriaWhereUniqueInput
}

export type CategoriaUpdateOneRequiredWithoutProductosNestedInput = {
  create?: Prisma.XOR<Prisma.CategoriaCreateWithoutProductosInput, Prisma.CategoriaUncheckedCreateWithoutProductosInput>
  connectOrCreate?: Prisma.CategoriaCreateOrConnectWithoutProductosInput
  upsert?: Prisma.CategoriaUpsertWithoutProductosInput
  connect?: Prisma.CategoriaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CategoriaUpdateToOneWithWhereWithoutProductosInput, Prisma.CategoriaUpdateWithoutProductosInput>, Prisma.CategoriaUncheckedUpdateWithoutProductosInput>
}

export type CategoriaCreateWithoutProductosInput = {
  nombre: string
}

export type CategoriaUncheckedCreateWithoutProductosInput = {
  id?: number
  nombre: string
}

export type CategoriaCreateOrConnectWithoutProductosInput = {
  where: Prisma.CategoriaWhereUniqueInput
  create: Prisma.XOR<Prisma.CategoriaCreateWithoutProductosInput, Prisma.CategoriaUncheckedCreateWithoutProductosInput>
}

export type CategoriaUpsertWithoutProductosInput = {
  update: Prisma.XOR<Prisma.CategoriaUpdateWithoutProductosInput, Prisma.CategoriaUncheckedUpdateWithoutProductosInput>
  create: Prisma.XOR<Prisma.CategoriaCreateWithoutProductosInput, Prisma.CategoriaUncheckedCreateWithoutProductosInput>
  where?: Prisma.CategoriaWhereInput
}

export type CategoriaUpdateToOneWithWhereWithoutProductosInput = {
  where?: Prisma.CategoriaWhereInput
  data: Prisma.XOR<Prisma.CategoriaUpdateWithoutProductosInput, Prisma.CategoriaUncheckedUpdateWithoutProductosInput>
}

export type CategoriaUpdateWithoutProductosInput = {
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}

export type CategoriaUncheckedUpdateWithoutProductosInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nombre?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type CategoriaCountOutputType
 */

export type CategoriaCountOutputType = {
  productos: number
}

export type CategoriaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productos?: boolean | CategoriaCountOutputTypeCountProductosArgs
}

/**
 * CategoriaCountOutputType without action
 */
export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CategoriaCountOutputType
   */
  select?: Prisma.CategoriaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CategoriaCountOutputType without action
 */
export type CategoriaCountOutputTypeCountProductosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductoWhereInput
}


export type CategoriaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
  productos?: boolean | Prisma.Categoria$productosArgs<ExtArgs>
  _count?: boolean | Prisma.CategoriaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["categoria"]>

export type CategoriaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["categoria"]>

export type CategoriaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nombre?: boolean
}, ExtArgs["result"]["categoria"]>

export type CategoriaSelectScalar = {
  id?: boolean
  nombre?: boolean
}

export type CategoriaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nombre", ExtArgs["result"]["categoria"]>
export type CategoriaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  productos?: boolean | Prisma.Categoria$productosArgs<ExtArgs>
  _count?: boolean | Prisma.CategoriaCountOutputTypeDefaultArgs<ExtArgs>
}
export type CategoriaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type CategoriaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $CategoriaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Categoria"
  objects: {
    productos: Prisma.$ProductoPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nombre: string
  }, ExtArgs["result"]["categoria"]>
  composites: {}
}

export type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CategoriaPayload, S>

export type CategoriaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CategoriaCountAggregateInputType | true
  }

export interface CategoriaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
  /**
   * Find zero or one Categoria that matches the filter.
   * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
   * @example
   * // Get one Categoria
   * const categoria = await prisma.categoria.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CategoriaFindUniqueArgs>(args: Prisma.SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Categoria that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
   * @example
   * // Get one Categoria
   * const categoria = await prisma.categoria.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Categoria that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
   * @example
   * // Get one Categoria
   * const categoria = await prisma.categoria.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CategoriaFindFirstArgs>(args?: Prisma.SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Categoria that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
   * @example
   * // Get one Categoria
   * const categoria = await prisma.categoria.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Categorias that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Categorias
   * const categorias = await prisma.categoria.findMany()
   * 
   * // Get first 10 Categorias
   * const categorias = await prisma.categoria.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CategoriaFindManyArgs>(args?: Prisma.SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Categoria.
   * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
   * @example
   * // Create one Categoria
   * const Categoria = await prisma.categoria.create({
   *   data: {
   *     // ... data to create a Categoria
   *   }
   * })
   * 
   */
  create<T extends CategoriaCreateArgs>(args: Prisma.SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Categorias.
   * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
   * @example
   * // Create many Categorias
   * const categoria = await prisma.categoria.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CategoriaCreateManyArgs>(args?: Prisma.SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Categorias and returns the data saved in the database.
   * @param {CategoriaCreateManyAndReturnArgs} args - Arguments to create many Categorias.
   * @example
   * // Create many Categorias
   * const categoria = await prisma.categoria.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Categorias and only return the `id`
   * const categoriaWithIdOnly = await prisma.categoria.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CategoriaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CategoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Categoria.
   * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
   * @example
   * // Delete one Categoria
   * const Categoria = await prisma.categoria.delete({
   *   where: {
   *     // ... filter to delete one Categoria
   *   }
   * })
   * 
   */
  delete<T extends CategoriaDeleteArgs>(args: Prisma.SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Categoria.
   * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
   * @example
   * // Update one Categoria
   * const categoria = await prisma.categoria.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CategoriaUpdateArgs>(args: Prisma.SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Categorias.
   * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
   * @example
   * // Delete a few Categorias
   * const { count } = await prisma.categoria.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CategoriaDeleteManyArgs>(args?: Prisma.SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categorias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Categorias
   * const categoria = await prisma.categoria.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CategoriaUpdateManyArgs>(args: Prisma.SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Categorias and returns the data updated in the database.
   * @param {CategoriaUpdateManyAndReturnArgs} args - Arguments to update many Categorias.
   * @example
   * // Update many Categorias
   * const categoria = await prisma.categoria.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Categorias and only return the `id`
   * const categoriaWithIdOnly = await prisma.categoria.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CategoriaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CategoriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Categoria.
   * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
   * @example
   * // Update or create a Categoria
   * const categoria = await prisma.categoria.upsert({
   *   create: {
   *     // ... data to create a Categoria
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Categoria we want to update
   *   }
   * })
   */
  upsert<T extends CategoriaUpsertArgs>(args: Prisma.SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma.Prisma__CategoriaClient<runtime.Types.Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Categorias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
   * @example
   * // Count the number of Categorias
   * const count = await prisma.categoria.count({
   *   where: {
   *     // ... the filter for the Categorias we want to count
   *   }
   * })
  **/
  count<T extends CategoriaCountArgs>(
    args?: Prisma.Subset<T, CategoriaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CategoriaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Categoria.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CategoriaAggregateArgs>(args: Prisma.Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

  /**
   * Group by Categoria.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CategoriaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CategoriaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CategoriaGroupByArgs['orderBy'] }
      : { orderBy?: CategoriaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Categoria model
 */
readonly fields: CategoriaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Categoria.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  productos<T extends Prisma.Categoria$productosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Categoria$productosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Categoria model
 */
export interface CategoriaFieldRefs {
  readonly id: Prisma.FieldRef<"Categoria", 'Int'>
  readonly nombre: Prisma.FieldRef<"Categoria", 'String'>
}
    

// Custom InputTypes
/**
 * Categoria findUnique
 */
export type CategoriaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter, which Categoria to fetch.
   */
  where: Prisma.CategoriaWhereUniqueInput
}

/**
 * Categoria findUniqueOrThrow
 */
export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter, which Categoria to fetch.
   */
  where: Prisma.CategoriaWhereUniqueInput
}

/**
 * Categoria findFirst
 */
export type CategoriaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter, which Categoria to fetch.
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Categorias to fetch.
   */
  orderBy?: Prisma.CategoriaOrderByWithRelationInput | Prisma.CategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Categorias.
   */
  cursor?: Prisma.CategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Categorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Categorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Categorias.
   */
  distinct?: Prisma.CategoriaScalarFieldEnum | Prisma.CategoriaScalarFieldEnum[]
}

/**
 * Categoria findFirstOrThrow
 */
export type CategoriaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter, which Categoria to fetch.
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Categorias to fetch.
   */
  orderBy?: Prisma.CategoriaOrderByWithRelationInput | Prisma.CategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Categorias.
   */
  cursor?: Prisma.CategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Categorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Categorias.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Categorias.
   */
  distinct?: Prisma.CategoriaScalarFieldEnum | Prisma.CategoriaScalarFieldEnum[]
}

/**
 * Categoria findMany
 */
export type CategoriaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter, which Categorias to fetch.
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Categorias to fetch.
   */
  orderBy?: Prisma.CategoriaOrderByWithRelationInput | Prisma.CategoriaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Categorias.
   */
  cursor?: Prisma.CategoriaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Categorias from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Categorias.
   */
  skip?: number
  distinct?: Prisma.CategoriaScalarFieldEnum | Prisma.CategoriaScalarFieldEnum[]
}

/**
 * Categoria create
 */
export type CategoriaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * The data needed to create a Categoria.
   */
  data: Prisma.XOR<Prisma.CategoriaCreateInput, Prisma.CategoriaUncheckedCreateInput>
}

/**
 * Categoria createMany
 */
export type CategoriaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Categorias.
   */
  data: Prisma.CategoriaCreateManyInput | Prisma.CategoriaCreateManyInput[]
}

/**
 * Categoria createManyAndReturn
 */
export type CategoriaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * The data used to create many Categorias.
   */
  data: Prisma.CategoriaCreateManyInput | Prisma.CategoriaCreateManyInput[]
}

/**
 * Categoria update
 */
export type CategoriaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * The data needed to update a Categoria.
   */
  data: Prisma.XOR<Prisma.CategoriaUpdateInput, Prisma.CategoriaUncheckedUpdateInput>
  /**
   * Choose, which Categoria to update.
   */
  where: Prisma.CategoriaWhereUniqueInput
}

/**
 * Categoria updateMany
 */
export type CategoriaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Categorias.
   */
  data: Prisma.XOR<Prisma.CategoriaUpdateManyMutationInput, Prisma.CategoriaUncheckedUpdateManyInput>
  /**
   * Filter which Categorias to update
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * Limit how many Categorias to update.
   */
  limit?: number
}

/**
 * Categoria updateManyAndReturn
 */
export type CategoriaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * The data used to update Categorias.
   */
  data: Prisma.XOR<Prisma.CategoriaUpdateManyMutationInput, Prisma.CategoriaUncheckedUpdateManyInput>
  /**
   * Filter which Categorias to update
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * Limit how many Categorias to update.
   */
  limit?: number
}

/**
 * Categoria upsert
 */
export type CategoriaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * The filter to search for the Categoria to update in case it exists.
   */
  where: Prisma.CategoriaWhereUniqueInput
  /**
   * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
   */
  create: Prisma.XOR<Prisma.CategoriaCreateInput, Prisma.CategoriaUncheckedCreateInput>
  /**
   * In case the Categoria was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CategoriaUpdateInput, Prisma.CategoriaUncheckedUpdateInput>
}

/**
 * Categoria delete
 */
export type CategoriaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
  /**
   * Filter which Categoria to delete.
   */
  where: Prisma.CategoriaWhereUniqueInput
}

/**
 * Categoria deleteMany
 */
export type CategoriaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Categorias to delete
   */
  where?: Prisma.CategoriaWhereInput
  /**
   * Limit how many Categorias to delete.
   */
  limit?: number
}

/**
 * Categoria.productos
 */
export type Categoria$productosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Producto
   */
  select?: Prisma.ProductoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Producto
   */
  omit?: Prisma.ProductoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductoInclude<ExtArgs> | null
  where?: Prisma.ProductoWhereInput
  orderBy?: Prisma.ProductoOrderByWithRelationInput | Prisma.ProductoOrderByWithRelationInput[]
  cursor?: Prisma.ProductoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProductoScalarFieldEnum | Prisma.ProductoScalarFieldEnum[]
}

/**
 * Categoria without action
 */
export type CategoriaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Categoria
   */
  select?: Prisma.CategoriaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Categoria
   */
  omit?: Prisma.CategoriaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CategoriaInclude<ExtArgs> | null
}
