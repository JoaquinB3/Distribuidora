
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
export const prismaVersion: PrismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Categoria: 'Categoria',
  Cliente: 'Cliente',
  Compra: 'Compra',
  Factura: 'Factura',
  Marca: 'Marca',
  MetodoPago: 'MetodoPago',
  Producto: 'Producto',
  ProductoXCompra: 'ProductoXCompra',
  ProductoXVenta: 'ProductoXVenta',
  Proveedor: 'Proveedor',
  Venta: 'Venta'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "categoria" | "cliente" | "compra" | "factura" | "marca" | "metodoPago" | "producto" | "productoXCompra" | "productoXVenta" | "proveedor" | "venta"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Categoria: {
      payload: Prisma.$CategoriaPayload<ExtArgs>
      fields: Prisma.CategoriaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        findFirst: {
          args: Prisma.CategoriaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        findMany: {
          args: Prisma.CategoriaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
        }
        create: {
          args: Prisma.CategoriaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        createMany: {
          args: Prisma.CategoriaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CategoriaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
        }
        delete: {
          args: Prisma.CategoriaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        update: {
          args: Prisma.CategoriaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        deleteMany: {
          args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CategoriaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
        }
        upsert: {
          args: Prisma.CategoriaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoriaPayload>
        }
        aggregate: {
          args: Prisma.CategoriaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategoria>
        }
        groupBy: {
          args: Prisma.CategoriaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriaGroupByOutputType>[]
        }
        count: {
          args: Prisma.CategoriaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoriaCountAggregateOutputType> | number
        }
      }
    }
    Cliente: {
      payload: Prisma.$ClientePayload<ExtArgs>
      fields: Prisma.ClienteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClienteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        findFirst: {
          args: Prisma.ClienteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        findMany: {
          args: Prisma.ClienteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>[]
        }
        create: {
          args: Prisma.ClienteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        createMany: {
          args: Prisma.ClienteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClienteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>[]
        }
        delete: {
          args: Prisma.ClienteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        update: {
          args: Prisma.ClienteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        deleteMany: {
          args: Prisma.ClienteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClienteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClienteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>[]
        }
        upsert: {
          args: Prisma.ClienteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientePayload>
        }
        aggregate: {
          args: Prisma.ClienteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCliente>
        }
        groupBy: {
          args: Prisma.ClienteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClienteGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClienteCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClienteCountAggregateOutputType> | number
        }
      }
    }
    Compra: {
      payload: Prisma.$CompraPayload<ExtArgs>
      fields: Prisma.CompraFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CompraFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CompraFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        findFirst: {
          args: Prisma.CompraFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CompraFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        findMany: {
          args: Prisma.CompraFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>[]
        }
        create: {
          args: Prisma.CompraCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        createMany: {
          args: Prisma.CompraCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CompraCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>[]
        }
        delete: {
          args: Prisma.CompraDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        update: {
          args: Prisma.CompraUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        deleteMany: {
          args: Prisma.CompraDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CompraUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CompraUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>[]
        }
        upsert: {
          args: Prisma.CompraUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CompraPayload>
        }
        aggregate: {
          args: Prisma.CompraAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCompra>
        }
        groupBy: {
          args: Prisma.CompraGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompraGroupByOutputType>[]
        }
        count: {
          args: Prisma.CompraCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CompraCountAggregateOutputType> | number
        }
      }
    }
    Factura: {
      payload: Prisma.$FacturaPayload<ExtArgs>
      fields: Prisma.FacturaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FacturaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FacturaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        findFirst: {
          args: Prisma.FacturaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FacturaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        findMany: {
          args: Prisma.FacturaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>[]
        }
        create: {
          args: Prisma.FacturaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        createMany: {
          args: Prisma.FacturaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FacturaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>[]
        }
        delete: {
          args: Prisma.FacturaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        update: {
          args: Prisma.FacturaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        deleteMany: {
          args: Prisma.FacturaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FacturaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FacturaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>[]
        }
        upsert: {
          args: Prisma.FacturaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FacturaPayload>
        }
        aggregate: {
          args: Prisma.FacturaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFactura>
        }
        groupBy: {
          args: Prisma.FacturaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacturaGroupByOutputType>[]
        }
        count: {
          args: Prisma.FacturaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FacturaCountAggregateOutputType> | number
        }
      }
    }
    Marca: {
      payload: Prisma.$MarcaPayload<ExtArgs>
      fields: Prisma.MarcaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MarcaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MarcaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        findFirst: {
          args: Prisma.MarcaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MarcaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        findMany: {
          args: Prisma.MarcaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>[]
        }
        create: {
          args: Prisma.MarcaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        createMany: {
          args: Prisma.MarcaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MarcaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>[]
        }
        delete: {
          args: Prisma.MarcaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        update: {
          args: Prisma.MarcaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        deleteMany: {
          args: Prisma.MarcaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MarcaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MarcaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>[]
        }
        upsert: {
          args: Prisma.MarcaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MarcaPayload>
        }
        aggregate: {
          args: Prisma.MarcaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMarca>
        }
        groupBy: {
          args: Prisma.MarcaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarcaGroupByOutputType>[]
        }
        count: {
          args: Prisma.MarcaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MarcaCountAggregateOutputType> | number
        }
      }
    }
    MetodoPago: {
      payload: Prisma.$MetodoPagoPayload<ExtArgs>
      fields: Prisma.MetodoPagoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MetodoPagoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MetodoPagoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        findFirst: {
          args: Prisma.MetodoPagoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MetodoPagoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        findMany: {
          args: Prisma.MetodoPagoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>[]
        }
        create: {
          args: Prisma.MetodoPagoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        createMany: {
          args: Prisma.MetodoPagoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MetodoPagoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>[]
        }
        delete: {
          args: Prisma.MetodoPagoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        update: {
          args: Prisma.MetodoPagoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        deleteMany: {
          args: Prisma.MetodoPagoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MetodoPagoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MetodoPagoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>[]
        }
        upsert: {
          args: Prisma.MetodoPagoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetodoPagoPayload>
        }
        aggregate: {
          args: Prisma.MetodoPagoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetodoPago>
        }
        groupBy: {
          args: Prisma.MetodoPagoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MetodoPagoGroupByOutputType>[]
        }
        count: {
          args: Prisma.MetodoPagoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MetodoPagoCountAggregateOutputType> | number
        }
      }
    }
    Producto: {
      payload: Prisma.$ProductoPayload<ExtArgs>
      fields: Prisma.ProductoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        findFirst: {
          args: Prisma.ProductoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        findMany: {
          args: Prisma.ProductoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>[]
        }
        create: {
          args: Prisma.ProductoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        createMany: {
          args: Prisma.ProductoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>[]
        }
        delete: {
          args: Prisma.ProductoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        update: {
          args: Prisma.ProductoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        deleteMany: {
          args: Prisma.ProductoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>[]
        }
        upsert: {
          args: Prisma.ProductoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoPayload>
        }
        aggregate: {
          args: Prisma.ProductoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProducto>
        }
        groupBy: {
          args: Prisma.ProductoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoCountAggregateOutputType> | number
        }
      }
    }
    ProductoXCompra: {
      payload: Prisma.$ProductoXCompraPayload<ExtArgs>
      fields: Prisma.ProductoXCompraFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductoXCompraFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductoXCompraFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        findFirst: {
          args: Prisma.ProductoXCompraFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductoXCompraFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        findMany: {
          args: Prisma.ProductoXCompraFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>[]
        }
        create: {
          args: Prisma.ProductoXCompraCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        createMany: {
          args: Prisma.ProductoXCompraCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductoXCompraCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>[]
        }
        delete: {
          args: Prisma.ProductoXCompraDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        update: {
          args: Prisma.ProductoXCompraUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        deleteMany: {
          args: Prisma.ProductoXCompraDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductoXCompraUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductoXCompraUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>[]
        }
        upsert: {
          args: Prisma.ProductoXCompraUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXCompraPayload>
        }
        aggregate: {
          args: Prisma.ProductoXCompraAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductoXCompra>
        }
        groupBy: {
          args: Prisma.ProductoXCompraGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoXCompraGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductoXCompraCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoXCompraCountAggregateOutputType> | number
        }
      }
    }
    ProductoXVenta: {
      payload: Prisma.$ProductoXVentaPayload<ExtArgs>
      fields: Prisma.ProductoXVentaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProductoXVentaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProductoXVentaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        findFirst: {
          args: Prisma.ProductoXVentaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProductoXVentaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        findMany: {
          args: Prisma.ProductoXVentaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>[]
        }
        create: {
          args: Prisma.ProductoXVentaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        createMany: {
          args: Prisma.ProductoXVentaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProductoXVentaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>[]
        }
        delete: {
          args: Prisma.ProductoXVentaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        update: {
          args: Prisma.ProductoXVentaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        deleteMany: {
          args: Prisma.ProductoXVentaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProductoXVentaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProductoXVentaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>[]
        }
        upsert: {
          args: Prisma.ProductoXVentaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProductoXVentaPayload>
        }
        aggregate: {
          args: Prisma.ProductoXVentaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProductoXVenta>
        }
        groupBy: {
          args: Prisma.ProductoXVentaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoXVentaGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProductoXVentaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProductoXVentaCountAggregateOutputType> | number
        }
      }
    }
    Proveedor: {
      payload: Prisma.$ProveedorPayload<ExtArgs>
      fields: Prisma.ProveedorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProveedorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProveedorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        findFirst: {
          args: Prisma.ProveedorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProveedorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        findMany: {
          args: Prisma.ProveedorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
        }
        create: {
          args: Prisma.ProveedorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        createMany: {
          args: Prisma.ProveedorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProveedorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
        }
        delete: {
          args: Prisma.ProveedorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        update: {
          args: Prisma.ProveedorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        deleteMany: {
          args: Prisma.ProveedorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProveedorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProveedorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>[]
        }
        upsert: {
          args: Prisma.ProveedorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProveedorPayload>
        }
        aggregate: {
          args: Prisma.ProveedorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProveedor>
        }
        groupBy: {
          args: Prisma.ProveedorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProveedorGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProveedorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProveedorCountAggregateOutputType> | number
        }
      }
    }
    Venta: {
      payload: Prisma.$VentaPayload<ExtArgs>
      fields: Prisma.VentaFieldRefs
      operations: {
        findUnique: {
          args: Prisma.VentaFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.VentaFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        findFirst: {
          args: Prisma.VentaFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.VentaFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        findMany: {
          args: Prisma.VentaFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>[]
        }
        create: {
          args: Prisma.VentaCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        createMany: {
          args: Prisma.VentaCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.VentaCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>[]
        }
        delete: {
          args: Prisma.VentaDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        update: {
          args: Prisma.VentaUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        deleteMany: {
          args: Prisma.VentaDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.VentaUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.VentaUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>[]
        }
        upsert: {
          args: Prisma.VentaUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$VentaPayload>
        }
        aggregate: {
          args: Prisma.VentaAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateVenta>
        }
        groupBy: {
          args: Prisma.VentaGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VentaGroupByOutputType>[]
        }
        count: {
          args: Prisma.VentaCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.VentaCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const CategoriaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
} as const

export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


export const ClienteScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  contacto: 'contacto',
  razonSocial: 'razonSocial',
  telefono: 'telefono',
  email: 'email'
} as const

export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


export const CompraScalarFieldEnum = {
  id: 'id',
  monto: 'monto',
  fecha: 'fecha',
  metodoPago: 'metodoPago',
  proveedorId: 'proveedorId'
} as const

export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


export const FacturaScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  ventaId: 'ventaId',
  compraId: 'compraId'
} as const

export type FacturaScalarFieldEnum = (typeof FacturaScalarFieldEnum)[keyof typeof FacturaScalarFieldEnum]


export const MarcaScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
} as const

export type MarcaScalarFieldEnum = (typeof MarcaScalarFieldEnum)[keyof typeof MarcaScalarFieldEnum]


export const MetodoPagoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre'
} as const

export type MetodoPagoScalarFieldEnum = (typeof MetodoPagoScalarFieldEnum)[keyof typeof MetodoPagoScalarFieldEnum]


export const ProductoScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio: 'precio',
  stock: 'stock',
  categoriaId: 'categoriaId',
  marcaId: 'marcaId'
} as const

export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


export const ProductoXCompraScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  compraId: 'compraId',
  cantidad: 'cantidad'
} as const

export type ProductoXCompraScalarFieldEnum = (typeof ProductoXCompraScalarFieldEnum)[keyof typeof ProductoXCompraScalarFieldEnum]


export const ProductoXVentaScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  ventaId: 'ventaId',
  cantidad: 'cantidad'
} as const

export type ProductoXVentaScalarFieldEnum = (typeof ProductoXVentaScalarFieldEnum)[keyof typeof ProductoXVentaScalarFieldEnum]


export const ProveedorScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  contacto: 'contacto',
  razonSocial: 'razonSocial',
  telefono: 'telefono',
  email: 'email'
} as const

export type ProveedorScalarFieldEnum = (typeof ProveedorScalarFieldEnum)[keyof typeof ProveedorScalarFieldEnum]


export const VentaScalarFieldEnum = {
  id: 'id',
  monto: 'monto',
  fecha: 'fecha',
  metodoPagoId: 'metodoPagoId',
  clienteId: 'clienteId'
} as const

export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  categoria?: Prisma.CategoriaOmit
  cliente?: Prisma.ClienteOmit
  compra?: Prisma.CompraOmit
  factura?: Prisma.FacturaOmit
  marca?: Prisma.MarcaOmit
  metodoPago?: Prisma.MetodoPagoOmit
  producto?: Prisma.ProductoOmit
  productoXCompra?: Prisma.ProductoXCompraOmit
  productoXVenta?: Prisma.ProductoXVentaOmit
  proveedor?: Prisma.ProveedorOmit
  venta?: Prisma.VentaOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

